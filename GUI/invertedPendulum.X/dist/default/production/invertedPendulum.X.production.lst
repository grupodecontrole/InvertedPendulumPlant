

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Nov 11 21:07:54 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     
    75                           ; Version 1.45
    76                           ; Generated 16/11/2017 GMT
    77                           ; 
    78                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC16F877A Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  0088                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0013                     	;# 
   190  0014                     	;# 
   191  0015                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  001D                     	;# 
   202  001E                     	;# 
   203  001F                     	;# 
   204  0081                     	;# 
   205  0085                     	;# 
   206  0086                     	;# 
   207  0087                     	;# 
   208  0088                     	;# 
   209  0089                     	;# 
   210  008C                     	;# 
   211  008D                     	;# 
   212  008E                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229                           
   230                           	psect	idataBANK0
   231  07FA                     __pidataBANK0:	
   232                           
   233                           ;initializer for _randx
   234  07FA  3401               	retlw	1
   235  07FB  3400               	retlw	0
   236  07FC  3400               	retlw	0
   237  07FD  3400               	retlw	0
   238                           
   239                           ;initializer for _acquirement
   240  07FE  3401               	retlw	1
   241                           
   242                           	psect	stringtext
   243  0100                     __pstringtext:	
   244  0100                     stringtab:	
   245  0100                     __stringtab:	
   246                           
   247                           ;	String table - string pointers are 2 bytes each
   248  0100  1BFF               	btfsc	btemp+1,7
   249  0101  290A               	ljmp	stringcode
   250  0102  1383               	bcf	3,7
   251  0103  187F               	btfsc	btemp+1,0
   252  0104  1783               	bsf	3,7
   253  0105  0800               	movf	0,w
   254  0106  0A84               	incf	4,f
   255  0107  1903               	skipnz
   256  0108  0AFF               	incf	btemp+1,f
   257  0109  0008               	return
   258  010A                     stringcode:	
   259  010A  087F               	movf	btemp+1,w
   260  010B  397F               	andlw	127
   261  010C  008A               	movwf	10
   262  010D  0804               	movf	4,w
   263  010E  0A84               	incf	4,f
   264  010F  1903               	skipnz
   265  0110  0AFF               	incf	btemp+1,f
   266  0111  0082               	movwf	2
   267  0112                     __stringbase:	
   268  0112                     __end_of__stringtab:	
   269  0112                     _dpowers:	
   270  0112  3401               	retlw	1
   271  0113  3400               	retlw	0
   272  0114  340A               	retlw	10
   273  0115  3400               	retlw	0
   274  0116  3464               	retlw	100
   275  0117  3400               	retlw	0
   276  0118  34E8               	retlw	232
   277  0119  3403               	retlw	3
   278  011A  3410               	retlw	16
   279  011B  3427               	retlw	39
   280  011C                     __end_of_dpowers:	
   281  011C                     STR_35:	
   282  011C  342A               	retlw	42	;'*'
   283  011D  342A               	retlw	42	;'*'
   284  011E  342A               	retlw	42	;'*'
   285  011F  342A               	retlw	42	;'*'
   286  0120  342A               	retlw	42	;'*'
   287  0121  342A               	retlw	42	;'*'
   288  0122  342A               	retlw	42	;'*'
   289  0123  342A               	retlw	42	;'*'
   290  0124  342A               	retlw	42	;'*'
   291  0125  342A               	retlw	42	;'*'
   292  0126  342A               	retlw	42	;'*'
   293  0127  342A               	retlw	42	;'*'
   294  0128  342A               	retlw	42	;'*'
   295  0129  342A               	retlw	42	;'*'
   296  012A  342A               	retlw	42	;'*'
   297  012B  342A               	retlw	42	;'*'
   298  012C  342A               	retlw	42	;'*'
   299  012D  342A               	retlw	42	;'*'
   300  012E  342A               	retlw	42	;'*'
   301  012F  342A               	retlw	42	;'*'
   302  0130  342A               	retlw	42	;'*'
   303  0131  342A               	retlw	42	;'*'
   304  0132  342A               	retlw	42	;'*'
   305  0133  342A               	retlw	42	;'*'
   306  0134  342A               	retlw	42	;'*'
   307  0135  342A               	retlw	42	;'*'
   308  0136  342A               	retlw	42	;'*'
   309  0137  342A               	retlw	42	;'*'
   310  0138  342A               	retlw	42	;'*'
   311  0139  342A               	retlw	42	;'*'
   312  013A  342A               	retlw	42	;'*'
   313  013B  342A               	retlw	42	;'*'
   314  013C  342A               	retlw	42	;'*'
   315  013D  342A               	retlw	42	;'*'
   316  013E  342A               	retlw	42	;'*'
   317  013F  342A               	retlw	42	;'*'
   318  0140  342A               	retlw	42	;'*'
   319  0141  342A               	retlw	42	;'*'
   320  0142  342A               	retlw	42	;'*'
   321  0143  342A               	retlw	42	;'*'
   322  0144  342A               	retlw	42	;'*'
   323  0145  342A               	retlw	42	;'*'
   324  0146  342A               	retlw	42	;'*'
   325  0147  342A               	retlw	42	;'*'
   326  0148  342A               	retlw	42	;'*'
   327  0149  342A               	retlw	42	;'*'
   328  014A  342A               	retlw	42	;'*'
   329  014B  342A               	retlw	42	;'*'
   330  014C  342A               	retlw	42	;'*'
   331  014D  342A               	retlw	42	;'*'
   332  014E  342A               	retlw	42	;'*'
   333  014F  342A               	retlw	42	;'*'
   334  0150  342A               	retlw	42	;'*'
   335  0151  342A               	retlw	42	;'*'
   336  0152  342A               	retlw	42	;'*'
   337  0153  342A               	retlw	42	;'*'
   338  0154  342A               	retlw	42	;'*'
   339  0155  342A               	retlw	42	;'*'
   340  0156  342A               	retlw	42	;'*'
   341  0157  342A               	retlw	42	;'*'
   342  0158  342A               	retlw	42	;'*'
   343  0159  342A               	retlw	42	;'*'
   344  015A  342A               	retlw	42	;'*'
   345  015B  342A               	retlw	42	;'*'
   346  015C  342A               	retlw	42	;'*'
   347  015D  342A               	retlw	42	;'*'
   348  015E  342A               	retlw	42	;'*'
   349  015F  342A               	retlw	42	;'*'
   350  0160  342A               	retlw	42	;'*'
   351  0161  342A               	retlw	42	;'*'
   352  0162  342A               	retlw	42	;'*'
   353  0163  342A               	retlw	42	;'*'
   354  0164  342A               	retlw	42	;'*'
   355  0165  342A               	retlw	42	;'*'
   356  0166  342A               	retlw	42	;'*'
   357  0167  342A               	retlw	42	;'*'
   358  0168  342A               	retlw	42	;'*'
   359  0169  342A               	retlw	42	;'*'
   360  016A  342A               	retlw	42	;'*'
   361  016B  342A               	retlw	42	;'*'
   362  016C  342A               	retlw	42	;'*'
   363  016D  342A               	retlw	42	;'*'
   364  016E  342A               	retlw	42	;'*'
   365  016F  342A               	retlw	42	;'*'
   366  0170  342A               	retlw	42	;'*'
   367  0171  342A               	retlw	42	;'*'
   368  0172  342A               	retlw	42	;'*'
   369  0173  342A               	retlw	42	;'*'
   370  0174  342A               	retlw	42	;'*'
   371  0175  342A               	retlw	42	;'*'
   372  0176  342A               	retlw	42	;'*'
   373  0177  342A               	retlw	42	;'*'
   374  0178  342A               	retlw	42	;'*'
   375  0179  3400               	retlw	0
   376  017A                     STR_6:	
   377  017A  3420               	retlw	32	;' '
   378  017B  3420               	retlw	32	;' '
   379  017C  3420               	retlw	32	;' '
   380  017D  3420               	retlw	32	;' '
   381  017E  3420               	retlw	32	;' '
   382  017F  3420               	retlw	32	;' '
   383  0180  3420               	retlw	32	;' '
   384  0181  3420               	retlw	32	;' '
   385  0182  3449               	retlw	73	;'I'
   386  0183  3466               	retlw	102	;'f'
   387  0184  3420               	retlw	32	;' '
   388  0185  3479               	retlw	121	;'y'
   389  0186  346F               	retlw	111	;'o'
   390  0187  3475               	retlw	117	;'u'
   391  0188  3420               	retlw	32	;' '
   392  0189  3477               	retlw	119	;'w'
   393  018A  3461               	retlw	97	;'a'
   394  018B  346E               	retlw	110	;'n'
   395  018C  3474               	retlw	116	;'t'
   396  018D  3420               	retlw	32	;' '
   397  018E  3467               	retlw	103	;'g'
   398  018F  3469               	retlw	105	;'i'
   399  0190  3476               	retlw	118	;'v'
   400  0191  3465               	retlw	101	;'e'
   401  0192  3420               	retlw	32	;' '
   402  0193  3461               	retlw	97	;'a'
   403  0194  3420               	retlw	32	;' '
   404  0195  3473               	retlw	115	;'s'
   405  0196  3474               	retlw	116	;'t'
   406  0197  3465               	retlw	101	;'e'
   407  0198  3470               	retlw	112	;'p'
   408  0199  3420               	retlw	32	;' '
   409  019A  3477               	retlw	119	;'w'
   410  019B  3469               	retlw	105	;'i'
   411  019C  3474               	retlw	116	;'t'
   412  019D  3468               	retlw	104	;'h'
   413  019E  3420               	retlw	32	;' '
   414  019F  3431               	retlw	49	;'1'
   415  01A0  3430               	retlw	48	;'0'
   416  01A1  3430               	retlw	48	;'0'
   417  01A2  3425               	retlw	37	;'%'
   418  01A3  3420               	retlw	32	;' '
   419  01A4  346F               	retlw	111	;'o'
   420  01A5  3466               	retlw	102	;'f'
   421  01A6  3420               	retlw	32	;' '
   422  01A7  3464               	retlw	100	;'d'
   423  01A8  3475               	retlw	117	;'u'
   424  01A9  3474               	retlw	116	;'t'
   425  01AA  3479               	retlw	121	;'y'
   426  01AB  342D               	retlw	45	;'-'
   427  01AC  3463               	retlw	99	;'c'
   428  01AD  3479               	retlw	121	;'y'
   429  01AE  3463               	retlw	99	;'c'
   430  01AF  346C               	retlw	108	;'l'
   431  01B0  3465               	retlw	101	;'e'
   432  01B1  342C               	retlw	44	;','
   433  01B2  3420               	retlw	32	;' '
   434  01B3  3475               	retlw	117	;'u'
   435  01B4  346E               	retlw	110	;'n'
   436  01B5  3474               	retlw	116	;'t'
   437  01B6  3469               	retlw	105	;'i'
   438  01B7  346C               	retlw	108	;'l'
   439  01B8  3420               	retlw	32	;' '
   440  01B9  3479               	retlw	121	;'y'
   441  01BA  346F               	retlw	111	;'o'
   442  01BB  3475               	retlw	117	;'u'
   443  01BC  3420               	retlw	32	;' '
   444  01BD  3474               	retlw	116	;'t'
   445  01BE  3479               	retlw	121	;'y'
   446  01BF  3470               	retlw	112	;'p'
   447  01C0  3465               	retlw	101	;'e'
   448  01C1  3420               	retlw	32	;' '
   449  01C2  3461               	retlw	97	;'a'
   450  01C3  346E               	retlw	110	;'n'
   451  01C4  3479               	retlw	121	;'y'
   452  01C5  3474               	retlw	116	;'t'
   453  01C6  3468               	retlw	104	;'h'
   454  01C7  3469               	retlw	105	;'i'
   455  01C8  346E               	retlw	110	;'n'
   456  01C9  3467               	retlw	103	;'g'
   457  01CA  342C               	retlw	44	;','
   458  01CB  3420               	retlw	32	;' '
   459  01CC  3474               	retlw	116	;'t'
   460  01CD  3479               	retlw	121	;'y'
   461  01CE  3470               	retlw	112	;'p'
   462  01CF  3465               	retlw	101	;'e'
   463  01D0  343A               	retlw	58	;':'
   464  01D1  3400               	retlw	0
   465  01D2                     STR_9:	
   466  01D2  3420               	retlw	32	;' '
   467  01D3  3420               	retlw	32	;' '
   468  01D4  3420               	retlw	32	;' '
   469  01D5  3420               	retlw	32	;' '
   470  01D6  3420               	retlw	32	;' '
   471  01D7  3420               	retlw	32	;' '
   472  01D8  3420               	retlw	32	;' '
   473  01D9  3420               	retlw	32	;' '
   474  01DA  3449               	retlw	73	;'I'
   475  01DB  3466               	retlw	102	;'f'
   476  01DC  3420               	retlw	32	;' '
   477  01DD  3479               	retlw	121	;'y'
   478  01DE  346F               	retlw	111	;'o'
   479  01DF  3475               	retlw	117	;'u'
   480  01E0  3420               	retlw	32	;' '
   481  01E1  3477               	retlw	119	;'w'
   482  01E2  3461               	retlw	97	;'a'
   483  01E3  346E               	retlw	110	;'n'
   484  01E4  3474               	retlw	116	;'t'
   485  01E5  3420               	retlw	32	;' '
   486  01E6  3467               	retlw	103	;'g'
   487  01E7  3469               	retlw	105	;'i'
   488  01E8  3476               	retlw	118	;'v'
   489  01E9  3465               	retlw	101	;'e'
   490  01EA  3420               	retlw	32	;' '
   491  01EB  3461               	retlw	97	;'a'
   492  01EC  3420               	retlw	32	;' '
   493  01ED  3473               	retlw	115	;'s'
   494  01EE  3474               	retlw	116	;'t'
   495  01EF  3465               	retlw	101	;'e'
   496  01F0  3470               	retlw	112	;'p'
   497  01F1  3420               	retlw	32	;' '
   498  01F2  3477               	retlw	119	;'w'
   499  01F3  3469               	retlw	105	;'i'
   500  01F4  3474               	retlw	116	;'t'
   501  01F5  3468               	retlw	104	;'h'
   502  01F6  3420               	retlw	32	;' '
   503  01F7  3431               	retlw	49	;'1'
   504  01F8  3430               	retlw	48	;'0'
   505  01F9  3430               	retlw	48	;'0'
   506  01FA  3425               	retlw	37	;'%'
   507  01FB  3420               	retlw	32	;' '
   508  01FC  346F               	retlw	111	;'o'
   509  01FD  3466               	retlw	102	;'f'
   510  01FE  3420               	retlw	32	;' '
   511  01FF  3464               	retlw	100	;'d'
   512  0200  3475               	retlw	117	;'u'
   513  0201  3474               	retlw	116	;'t'
   514  0202  3479               	retlw	121	;'y'
   515  0203  342D               	retlw	45	;'-'
   516  0204  3463               	retlw	99	;'c'
   517  0205  3479               	retlw	121	;'y'
   518  0206  3463               	retlw	99	;'c'
   519  0207  346C               	retlw	108	;'l'
   520  0208  3465               	retlw	101	;'e'
   521  0209  342C               	retlw	44	;','
   522  020A  3420               	retlw	32	;' '
   523  020B  3466               	retlw	102	;'f'
   524  020C  346F               	retlw	111	;'o'
   525  020D  3472               	retlw	114	;'r'
   526  020E  3420               	retlw	32	;' '
   527  020F  3432               	retlw	50	;'2'
   528  0210  3430               	retlw	48	;'0'
   529  0211  3430               	retlw	48	;'0'
   530  0212  3420               	retlw	32	;' '
   531  0213  346D               	retlw	109	;'m'
   532  0214  3469               	retlw	105	;'i'
   533  0215  346C               	retlw	108	;'l'
   534  0216  346C               	retlw	108	;'l'
   535  0217  3469               	retlw	105	;'i'
   536  0218  3473               	retlw	115	;'s'
   537  0219  3465               	retlw	101	;'e'
   538  021A  3463               	retlw	99	;'c'
   539  021B  346F               	retlw	111	;'o'
   540  021C  346E               	retlw	110	;'n'
   541  021D  3464               	retlw	100	;'d'
   542  021E  3473               	retlw	115	;'s'
   543  021F  342C               	retlw	44	;','
   544  0220  3420               	retlw	32	;' '
   545  0221  3474               	retlw	116	;'t'
   546  0222  3479               	retlw	121	;'y'
   547  0223  3470               	retlw	112	;'p'
   548  0224  3465               	retlw	101	;'e'
   549  0225  343A               	retlw	58	;':'
   550  0226  3400               	retlw	0
   551  0227                     STR_12:	
   552  0227  3420               	retlw	32	;' '
   553  0228  3420               	retlw	32	;' '
   554  0229  3420               	retlw	32	;' '
   555  022A  3420               	retlw	32	;' '
   556  022B  3420               	retlw	32	;' '
   557  022C  3420               	retlw	32	;' '
   558  022D  3420               	retlw	32	;' '
   559  022E  3420               	retlw	32	;' '
   560  022F  3449               	retlw	73	;'I'
   561  0230  3466               	retlw	102	;'f'
   562  0231  3420               	retlw	32	;' '
   563  0232  3479               	retlw	121	;'y'
   564  0233  346F               	retlw	111	;'o'
   565  0234  3475               	retlw	117	;'u'
   566  0235  3420               	retlw	32	;' '
   567  0236  3477               	retlw	119	;'w'
   568  0237  3461               	retlw	97	;'a'
   569  0238  346E               	retlw	110	;'n'
   570  0239  3474               	retlw	116	;'t'
   571  023A  3420               	retlw	32	;' '
   572  023B  3467               	retlw	103	;'g'
   573  023C  3469               	retlw	105	;'i'
   574  023D  3476               	retlw	118	;'v'
   575  023E  3465               	retlw	101	;'e'
   576  023F  3420               	retlw	32	;' '
   577  0240  3461               	retlw	97	;'a'
   578  0241  3420               	retlw	32	;' '
   579  0242  3473               	retlw	115	;'s'
   580  0243  3474               	retlw	116	;'t'
   581  0244  3465               	retlw	101	;'e'
   582  0245  3470               	retlw	112	;'p'
   583  0246  3420               	retlw	32	;' '
   584  0247  3477               	retlw	119	;'w'
   585  0248  3469               	retlw	105	;'i'
   586  0249  3474               	retlw	116	;'t'
   587  024A  3468               	retlw	104	;'h'
   588  024B  3420               	retlw	32	;' '
   589  024C  3435               	retlw	53	;'5'
   590  024D  3430               	retlw	48	;'0'
   591  024E  3425               	retlw	37	;'%'
   592  024F  3420               	retlw	32	;' '
   593  0250  346F               	retlw	111	;'o'
   594  0251  3466               	retlw	102	;'f'
   595  0252  3420               	retlw	32	;' '
   596  0253  3464               	retlw	100	;'d'
   597  0254  3475               	retlw	117	;'u'
   598  0255  3474               	retlw	116	;'t'
   599  0256  3479               	retlw	121	;'y'
   600  0257  342D               	retlw	45	;'-'
   601  0258  3463               	retlw	99	;'c'
   602  0259  3479               	retlw	121	;'y'
   603  025A  3463               	retlw	99	;'c'
   604  025B  346C               	retlw	108	;'l'
   605  025C  3465               	retlw	101	;'e'
   606  025D  342C               	retlw	44	;','
   607  025E  3466               	retlw	102	;'f'
   608  025F  346F               	retlw	111	;'o'
   609  0260  3472               	retlw	114	;'r'
   610  0261  3420               	retlw	32	;' '
   611  0262  3433               	retlw	51	;'3'
   612  0263  3430               	retlw	48	;'0'
   613  0264  3430               	retlw	48	;'0'
   614  0265  3420               	retlw	32	;' '
   615  0266  346D               	retlw	109	;'m'
   616  0267  3469               	retlw	105	;'i'
   617  0268  346C               	retlw	108	;'l'
   618  0269  346C               	retlw	108	;'l'
   619  026A  3469               	retlw	105	;'i'
   620  026B  3473               	retlw	115	;'s'
   621  026C  3465               	retlw	101	;'e'
   622  026D  3463               	retlw	99	;'c'
   623  026E  346F               	retlw	111	;'o'
   624  026F  346E               	retlw	110	;'n'
   625  0270  3464               	retlw	100	;'d'
   626  0271  3473               	retlw	115	;'s'
   627  0272  342C               	retlw	44	;','
   628  0273  3420               	retlw	32	;' '
   629  0274  3474               	retlw	116	;'t'
   630  0275  3479               	retlw	121	;'y'
   631  0276  3470               	retlw	112	;'p'
   632  0277  3465               	retlw	101	;'e'
   633  0278  343A               	retlw	58	;':'
   634  0279  3400               	retlw	0
   635  027A                     STR_15:	
   636  027A  3420               	retlw	32	;' '
   637  027B  3420               	retlw	32	;' '
   638  027C  3420               	retlw	32	;' '
   639  027D  3420               	retlw	32	;' '
   640  027E  3420               	retlw	32	;' '
   641  027F  3420               	retlw	32	;' '
   642  0280  3420               	retlw	32	;' '
   643  0281  3420               	retlw	32	;' '
   644  0282  3449               	retlw	73	;'I'
   645  0283  3466               	retlw	102	;'f'
   646  0284  3420               	retlw	32	;' '
   647  0285  3479               	retlw	121	;'y'
   648  0286  346F               	retlw	111	;'o'
   649  0287  3475               	retlw	117	;'u'
   650  0288  3420               	retlw	32	;' '
   651  0289  3477               	retlw	119	;'w'
   652  028A  3461               	retlw	97	;'a'
   653  028B  346E               	retlw	110	;'n'
   654  028C  3474               	retlw	116	;'t'
   655  028D  3420               	retlw	32	;' '
   656  028E  346F               	retlw	111	;'o'
   657  028F  3470               	retlw	112	;'p'
   658  0290  3465               	retlw	101	;'e'
   659  0291  3472               	retlw	114	;'r'
   660  0292  3461               	retlw	97	;'a'
   661  0293  3474               	retlw	116	;'t'
   662  0294  3465               	retlw	101	;'e'
   663  0295  3420               	retlw	32	;' '
   664  0296  3474               	retlw	116	;'t'
   665  0297  3468               	retlw	104	;'h'
   666  0298  3465               	retlw	101	;'e'
   667  0299  3420               	retlw	32	;' '
   668  029A  3473               	retlw	115	;'s'
   669  029B  3479               	retlw	121	;'y'
   670  029C  3473               	retlw	115	;'s'
   671  029D  3474               	retlw	116	;'t'
   672  029E  3465               	retlw	101	;'e'
   673  029F  346D               	retlw	109	;'m'
   674  02A0  3420               	retlw	32	;' '
   675  02A1  3463               	retlw	99	;'c'
   676  02A2  346F               	retlw	111	;'o'
   677  02A3  346E               	retlw	110	;'n'
   678  02A4  3474               	retlw	116	;'t'
   679  02A5  3469               	retlw	105	;'i'
   680  02A6  346E               	retlw	110	;'n'
   681  02A7  3475               	retlw	117	;'u'
   682  02A8  3461               	retlw	97	;'a'
   683  02A9  346C               	retlw	108	;'l'
   684  02AA  346C               	retlw	108	;'l'
   685  02AB  3479               	retlw	121	;'y'
   686  02AC  3420               	retlw	32	;' '
   687  02AD  3477               	retlw	119	;'w'
   688  02AE  3469               	retlw	105	;'i'
   689  02AF  3474               	retlw	116	;'t'
   690  02B0  3468               	retlw	104	;'h'
   691  02B1  3420               	retlw	32	;' '
   692  02B2  3431               	retlw	49	;'1'
   693  02B3  3430               	retlw	48	;'0'
   694  02B4  3430               	retlw	48	;'0'
   695  02B5  3425               	retlw	37	;'%'
   696  02B6  3420               	retlw	32	;' '
   697  02B7  346F               	retlw	111	;'o'
   698  02B8  3466               	retlw	102	;'f'
   699  02B9  3420               	retlw	32	;' '
   700  02BA  3464               	retlw	100	;'d'
   701  02BB  3475               	retlw	117	;'u'
   702  02BC  3474               	retlw	116	;'t'
   703  02BD  3479               	retlw	121	;'y'
   704  02BE  342D               	retlw	45	;'-'
   705  02BF  3463               	retlw	99	;'c'
   706  02C0  3479               	retlw	121	;'y'
   707  02C1  3463               	retlw	99	;'c'
   708  02C2  346C               	retlw	108	;'l'
   709  02C3  3465               	retlw	101	;'e'
   710  02C4  342C               	retlw	44	;','
   711  02C5  3420               	retlw	32	;' '
   712  02C6  3474               	retlw	116	;'t'
   713  02C7  3479               	retlw	121	;'y'
   714  02C8  3470               	retlw	112	;'p'
   715  02C9  3465               	retlw	101	;'e'
   716  02CA  343A               	retlw	58	;':'
   717  02CB  3400               	retlw	0
   718  02CC                     STR_27:	
   719  02CC  3420               	retlw	32	;' '
   720  02CD  3420               	retlw	32	;' '
   721  02CE  3420               	retlw	32	;' '
   722  02CF  3420               	retlw	32	;' '
   723  02D0  3420               	retlw	32	;' '
   724  02D1  3420               	retlw	32	;' '
   725  02D2  3420               	retlw	32	;' '
   726  02D3  3420               	retlw	32	;' '
   727  02D4  3449               	retlw	73	;'I'
   728  02D5  3466               	retlw	102	;'f'
   729  02D6  3420               	retlw	32	;' '
   730  02D7  3479               	retlw	121	;'y'
   731  02D8  346F               	retlw	111	;'o'
   732  02D9  3475               	retlw	117	;'u'
   733  02DA  3420               	retlw	32	;' '
   734  02DB  3477               	retlw	119	;'w'
   735  02DC  3461               	retlw	97	;'a'
   736  02DD  346E               	retlw	110	;'n'
   737  02DE  3474               	retlw	116	;'t'
   738  02DF  3420               	retlw	32	;' '
   739  02E0  3461               	retlw	97	;'a'
   740  02E1  3463               	retlw	99	;'c'
   741  02E2  3471               	retlw	113	;'q'
   742  02E3  3475               	retlw	117	;'u'
   743  02E4  3469               	retlw	105	;'i'
   744  02E5  3472               	retlw	114	;'r'
   745  02E6  3465               	retlw	101	;'e'
   746  02E7  3420               	retlw	32	;' '
   747  02E8  3474               	retlw	116	;'t'
   748  02E9  3468               	retlw	104	;'h'
   749  02EA  3465               	retlw	101	;'e'
   750  02EB  3420               	retlw	32	;' '
   751  02EC  3464               	retlw	100	;'d'
   752  02ED  3461               	retlw	97	;'a'
   753  02EE  3474               	retlw	116	;'t'
   754  02EF  3461               	retlw	97	;'a'
   755  02F0  3420               	retlw	32	;' '
   756  02F1  346F               	retlw	111	;'o'
   757  02F2  3462               	retlw	98	;'b'
   758  02F3  3474               	retlw	116	;'t'
   759  02F4  3461               	retlw	97	;'a'
   760  02F5  3469               	retlw	105	;'i'
   761  02F6  346E               	retlw	110	;'n'
   762  02F7  3465               	retlw	101	;'e'
   763  02F8  3464               	retlw	100	;'d'
   764  02F9  3420               	retlw	32	;' '
   765  02FA  3462               	retlw	98	;'b'
   766  02FB  3479               	retlw	121	;'y'
   767  02FC  3420               	retlw	32	;' '
   768  02FD  3473               	retlw	115	;'s'
   769  02FE  3465               	retlw	101	;'e'
   770  02FF  346E               	retlw	110	;'n'
   771  0300  3473               	retlw	115	;'s'
   772  0301  346F               	retlw	111	;'o'
   773  0302  3472               	retlw	114	;'r'
   774  0303  3473               	retlw	115	;'s'
   775  0304  3420               	retlw	32	;' '
   776  0305  346F               	retlw	111	;'o'
   777  0306  3466               	retlw	102	;'f'
   778  0307  3420               	retlw	32	;' '
   779  0308  3473               	retlw	115	;'s'
   780  0309  3479               	retlw	121	;'y'
   781  030A  3473               	retlw	115	;'s'
   782  030B  3474               	retlw	116	;'t'
   783  030C  3465               	retlw	101	;'e'
   784  030D  346D               	retlw	109	;'m'
   785  030E  342C               	retlw	44	;','
   786  030F  3420               	retlw	32	;' '
   787  0310  3474               	retlw	116	;'t'
   788  0311  3479               	retlw	121	;'y'
   789  0312  3470               	retlw	112	;'p'
   790  0313  3465               	retlw	101	;'e'
   791  0314  343A               	retlw	58	;':'
   792  0315  3400               	retlw	0
   793  0316                     STR_18:	
   794  0316  3420               	retlw	32	;' '
   795  0317  3420               	retlw	32	;' '
   796  0318  3420               	retlw	32	;' '
   797  0319  3420               	retlw	32	;' '
   798  031A  3420               	retlw	32	;' '
   799  031B  3420               	retlw	32	;' '
   800  031C  3420               	retlw	32	;' '
   801  031D  3420               	retlw	32	;' '
   802  031E  3449               	retlw	73	;'I'
   803  031F  3466               	retlw	102	;'f'
   804  0320  3420               	retlw	32	;' '
   805  0321  3479               	retlw	121	;'y'
   806  0322  346F               	retlw	111	;'o'
   807  0323  3475               	retlw	117	;'u'
   808  0324  3420               	retlw	32	;' '
   809  0325  3477               	retlw	119	;'w'
   810  0326  3461               	retlw	97	;'a'
   811  0327  346E               	retlw	110	;'n'
   812  0328  3474               	retlw	116	;'t'
   813  0329  3420               	retlw	32	;' '
   814  032A  3474               	retlw	116	;'t'
   815  032B  346F               	retlw	111	;'o'
   816  032C  3420               	retlw	32	;' '
   817  032D  3469               	retlw	105	;'i'
   818  032E  3464               	retlw	100	;'d'
   819  032F  3465               	retlw	101	;'e'
   820  0330  346E               	retlw	110	;'n'
   821  0331  3474               	retlw	116	;'t'
   822  0332  3469               	retlw	105	;'i'
   823  0333  3466               	retlw	102	;'f'
   824  0334  3479               	retlw	121	;'y'
   825  0335  3420               	retlw	32	;' '
   826  0336  3474               	retlw	116	;'t'
   827  0337  3468               	retlw	104	;'h'
   828  0338  3465               	retlw	101	;'e'
   829  0339  3420               	retlw	32	;' '
   830  033A  3473               	retlw	115	;'s'
   831  033B  3479               	retlw	121	;'y'
   832  033C  3473               	retlw	115	;'s'
   833  033D  3474               	retlw	116	;'t'
   834  033E  3465               	retlw	101	;'e'
   835  033F  346D               	retlw	109	;'m'
   836  0340  3420               	retlw	32	;' '
   837  0341  3470               	retlw	112	;'p'
   838  0342  3461               	retlw	97	;'a'
   839  0343  3472               	retlw	114	;'r'
   840  0344  3473               	retlw	115	;'s'
   841  0345  3469               	retlw	105	;'i'
   842  0346  346E               	retlw	110	;'n'
   843  0347  3467               	retlw	103	;'g'
   844  0348  3420               	retlw	32	;' '
   845  0349  3461               	retlw	97	;'a'
   846  034A  3420               	retlw	32	;' '
   847  034B  3452               	retlw	82	;'R'
   848  034C  3442               	retlw	66	;'B'
   849  034D  3453               	retlw	83	;'S'
   850  034E  3420               	retlw	32	;' '
   851  034F  3473               	retlw	115	;'s'
   852  0350  3469               	retlw	105	;'i'
   853  0351  346E               	retlw	110	;'n'
   854  0352  3461               	retlw	97	;'a'
   855  0353  346C               	retlw	108	;'l'
   856  0354  342C               	retlw	44	;','
   857  0355  3420               	retlw	32	;' '
   858  0356  3474               	retlw	116	;'t'
   859  0357  3479               	retlw	121	;'y'
   860  0358  3470               	retlw	112	;'p'
   861  0359  3465               	retlw	101	;'e'
   862  035A  343A               	retlw	58	;':'
   863  035B  3400               	retlw	0
   864  035C                     STR_4:	
   865  035C  3420               	retlw	32	;' '
   866  035D  3420               	retlw	32	;' '
   867  035E  3420               	retlw	32	;' '
   868  035F  3420               	retlw	32	;' '
   869  0360  3420               	retlw	32	;' '
   870  0361  3420               	retlw	32	;' '
   871  0362  3420               	retlw	32	;' '
   872  0363  3420               	retlw	32	;' '
   873  0364  3454               	retlw	84	;'T'
   874  0365  346F               	retlw	111	;'o'
   875  0366  3420               	retlw	32	;' '
   876  0367  346F               	retlw	111	;'o'
   877  0368  3470               	retlw	112	;'p'
   878  0369  3465               	retlw	101	;'e'
   879  036A  3472               	retlw	114	;'r'
   880  036B  3461               	retlw	97	;'a'
   881  036C  3474               	retlw	116	;'t'
   882  036D  3465               	retlw	101	;'e'
   883  036E  3420               	retlw	32	;' '
   884  036F  3474               	retlw	116	;'t'
   885  0370  3468               	retlw	104	;'h'
   886  0371  3465               	retlw	101	;'e'
   887  0372  3420               	retlw	32	;' '
   888  0373  3473               	retlw	115	;'s'
   889  0374  3479               	retlw	121	;'y'
   890  0375  3473               	retlw	115	;'s'
   891  0376  3474               	retlw	116	;'t'
   892  0377  3465               	retlw	101	;'e'
   893  0378  346D               	retlw	109	;'m'
   894  0379  342C               	retlw	44	;','
   895  037A  3420               	retlw	32	;' '
   896  037B  3474               	retlw	116	;'t'
   897  037C  3479               	retlw	121	;'y'
   898  037D  3470               	retlw	112	;'p'
   899  037E  3465               	retlw	101	;'e'
   900  037F  3420               	retlw	32	;' '
   901  0380  346F               	retlw	111	;'o'
   902  0381  346E               	retlw	110	;'n'
   903  0382  3420               	retlw	32	;' '
   904  0383  346F               	retlw	111	;'o'
   905  0384  3470               	retlw	112	;'p'
   906  0385  3474               	retlw	116	;'t'
   907  0386  3469               	retlw	105	;'i'
   908  0387  346F               	retlw	111	;'o'
   909  0388  346E               	retlw	110	;'n'
   910  0389  3473               	retlw	115	;'s'
   911  038A  3420               	retlw	32	;' '
   912  038B  3469               	retlw	105	;'i'
   913  038C  346E               	retlw	110	;'n'
   914  038D  3420               	retlw	32	;' '
   915  038E  3462               	retlw	98	;'b'
   916  038F  3465               	retlw	101	;'e'
   917  0390  346C               	retlw	108	;'l'
   918  0391  346F               	retlw	111	;'o'
   919  0392  3477               	retlw	119	;'w'
   920  0393  342E               	retlw	46	;'.'
   921  0394  3400               	retlw	0
   922  0395                     STR_30:	
   923  0395  3420               	retlw	32	;' '
   924  0396  3420               	retlw	32	;' '
   925  0397  3420               	retlw	32	;' '
   926  0398  3420               	retlw	32	;' '
   927  0399  3420               	retlw	32	;' '
   928  039A  3420               	retlw	32	;' '
   929  039B  3420               	retlw	32	;' '
   930  039C  3420               	retlw	32	;' '
   931  039D  3449               	retlw	73	;'I'
   932  039E  3466               	retlw	102	;'f'
   933  039F  3420               	retlw	32	;' '
   934  03A0  3479               	retlw	121	;'y'
   935  03A1  346F               	retlw	111	;'o'
   936  03A2  3475               	retlw	117	;'u'
   937  03A3  3420               	retlw	32	;' '
   938  03A4  3477               	retlw	119	;'w'
   939  03A5  3461               	retlw	97	;'a'
   940  03A6  346E               	retlw	110	;'n'
   941  03A7  3474               	retlw	116	;'t'
   942  03A8  3420               	retlw	32	;' '
   943  03A9  3474               	retlw	116	;'t'
   944  03AA  346F               	retlw	111	;'o'
   945  03AB  3420               	retlw	32	;' '
   946  03AC  346B               	retlw	107	;'k'
   947  03AD  346E               	retlw	110	;'n'
   948  03AE  346F               	retlw	111	;'o'
   949  03AF  3477               	retlw	119	;'w'
   950  03B0  3420               	retlw	32	;' '
   951  03B1  3474               	retlw	116	;'t'
   952  03B2  3468               	retlw	104	;'h'
   953  03B3  3465               	retlw	101	;'e'
   954  03B4  3420               	retlw	32	;' '
   955  03B5  3473               	retlw	115	;'s'
   956  03B6  3474               	retlw	116	;'t'
   957  03B7  3461               	retlw	97	;'a'
   958  03B8  3474               	retlw	116	;'t'
   959  03B9  3475               	retlw	117	;'u'
   960  03BA  3473               	retlw	115	;'s'
   961  03BB  3420               	retlw	32	;' '
   962  03BC  346F               	retlw	111	;'o'
   963  03BD  3466               	retlw	102	;'f'
   964  03BE  3420               	retlw	32	;' '
   965  03BF  3473               	retlw	115	;'s'
   966  03C0  3479               	retlw	121	;'y'
   967  03C1  3473               	retlw	115	;'s'
   968  03C2  3474               	retlw	116	;'t'
   969  03C3  3465               	retlw	101	;'e'
   970  03C4  346D               	retlw	109	;'m'
   971  03C5  342C               	retlw	44	;','
   972  03C6  3420               	retlw	32	;' '
   973  03C7  3474               	retlw	116	;'t'
   974  03C8  3479               	retlw	121	;'y'
   975  03C9  3470               	retlw	112	;'p'
   976  03CA  3465               	retlw	101	;'e'
   977  03CB  343A               	retlw	58	;':'
   978  03CC  3400               	retlw	0
   979  03CD                     STR_3:	
   980  03CD  3420               	retlw	32	;' '
   981  03CE  3420               	retlw	32	;' '
   982  03CF  3420               	retlw	32	;' '
   983  03D0  3420               	retlw	32	;' '
   984  03D1  3420               	retlw	32	;' '
   985  03D2  3420               	retlw	32	;' '
   986  03D3  3420               	retlw	32	;' '
   987  03D4  3420               	retlw	32	;' '
   988  03D5  3457               	retlw	87	;'W'
   989  03D6  3465               	retlw	101	;'e'
   990  03D7  346C               	retlw	108	;'l'
   991  03D8  3463               	retlw	99	;'c'
   992  03D9  346F               	retlw	111	;'o'
   993  03DA  346D               	retlw	109	;'m'
   994  03DB  3465               	retlw	101	;'e'
   995  03DC  3420               	retlw	32	;' '
   996  03DD  3474               	retlw	116	;'t'
   997  03DE  346F               	retlw	111	;'o'
   998  03DF  3420               	retlw	32	;' '
   999  03E0  3474               	retlw	116	;'t'
  1000  03E1  3468               	retlw	104	;'h'
  1001  03E2  3465               	retlw	101	;'e'
  1002  03E3  3420               	retlw	32	;' '
  1003  03E4  3449               	retlw	73	;'I'
  1004  03E5  346E               	retlw	110	;'n'
  1005  03E6  3476               	retlw	118	;'v'
  1006  03E7  3465               	retlw	101	;'e'
  1007  03E8  3472               	retlw	114	;'r'
  1008  03E9  3474               	retlw	116	;'t'
  1009  03EA  3465               	retlw	101	;'e'
  1010  03EB  3464               	retlw	100	;'d'
  1011  03EC  3420               	retlw	32	;' '
  1012  03ED  3450               	retlw	80	;'P'
  1013  03EE  3465               	retlw	101	;'e'
  1014  03EF  346E               	retlw	110	;'n'
  1015  03F0  3464               	retlw	100	;'d'
  1016  03F1  3475               	retlw	117	;'u'
  1017  03F2  346C               	retlw	108	;'l'
  1018  03F3  3475               	retlw	117	;'u'
  1019  03F4  346D               	retlw	109	;'m'
  1020  03F5  3420               	retlw	32	;' '
  1021  03F6  3450               	retlw	80	;'P'
  1022  03F7  346C               	retlw	108	;'l'
  1023  03F8  3461               	retlw	97	;'a'
  1024  03F9  346E               	retlw	110	;'n'
  1025  03FA  3474               	retlw	116	;'t'
  1026  03FB  3421               	retlw	33	;'!'
  1027  03FC  3400               	retlw	0
  1028  03FD                     STR_24:	
  1029  03FD  3420               	retlw	32	;' '
  1030  03FE  3420               	retlw	32	;' '
  1031  03FF  3420               	retlw	32	;' '
  1032  0400  3420               	retlw	32	;' '
  1033  0401  3420               	retlw	32	;' '
  1034  0402  3420               	retlw	32	;' '
  1035  0403  3420               	retlw	32	;' '
  1036  0404  3420               	retlw	32	;' '
  1037  0405  3449               	retlw	73	;'I'
  1038  0406  3466               	retlw	102	;'f'
  1039  0407  3420               	retlw	32	;' '
  1040  0408  3479               	retlw	121	;'y'
  1041  0409  346F               	retlw	111	;'o'
  1042  040A  3475               	retlw	117	;'u'
  1043  040B  3420               	retlw	32	;' '
  1044  040C  3477               	retlw	119	;'w'
  1045  040D  3461               	retlw	97	;'a'
  1046  040E  346E               	retlw	110	;'n'
  1047  040F  3474               	retlw	116	;'t'
  1048  0410  3420               	retlw	32	;' '
  1049  0411  3473               	retlw	115	;'s'
  1050  0412  3474               	retlw	116	;'t'
  1051  0413  346F               	retlw	111	;'o'
  1052  0414  3470               	retlw	112	;'p'
  1053  0415  3420               	retlw	32	;' '
  1054  0416  3474               	retlw	116	;'t'
  1055  0417  3468               	retlw	104	;'h'
  1056  0418  3465               	retlw	101	;'e'
  1057  0419  3420               	retlw	32	;' '
  1058  041A  3473               	retlw	115	;'s'
  1059  041B  3479               	retlw	121	;'y'
  1060  041C  3473               	retlw	115	;'s'
  1061  041D  3474               	retlw	116	;'t'
  1062  041E  3465               	retlw	101	;'e'
  1063  041F  346D               	retlw	109	;'m'
  1064  0420  342C               	retlw	44	;','
  1065  0421  3420               	retlw	32	;' '
  1066  0422  3474               	retlw	116	;'t'
  1067  0423  3479               	retlw	121	;'y'
  1068  0424  3470               	retlw	112	;'p'
  1069  0425  3465               	retlw	101	;'e'
  1070  0426  343A               	retlw	58	;':'
  1071  0427  3400               	retlw	0
  1072  0428                     STR_21:	
  1073  0428  3420               	retlw	32	;' '
  1074  0429  3420               	retlw	32	;' '
  1075  042A  3420               	retlw	32	;' '
  1076  042B  3420               	retlw	32	;' '
  1077  042C  3420               	retlw	32	;' '
  1078  042D  3420               	retlw	32	;' '
  1079  042E  3420               	retlw	32	;' '
  1080  042F  3420               	retlw	32	;' '
  1081  0430  3449               	retlw	73	;'I'
  1082  0431  3466               	retlw	102	;'f'
  1083  0432  3420               	retlw	32	;' '
  1084  0433  3479               	retlw	121	;'y'
  1085  0434  346F               	retlw	111	;'o'
  1086  0435  3475               	retlw	117	;'u'
  1087  0436  3420               	retlw	32	;' '
  1088  0437  3477               	retlw	119	;'w'
  1089  0438  3461               	retlw	97	;'a'
  1090  0439  346E               	retlw	110	;'n'
  1091  043A  3474               	retlw	116	;'t'
  1092  043B  3420               	retlw	32	;' '
  1093  043C  3461               	retlw	97	;'a'
  1094  043D  3420               	retlw	32	;' '
  1095  043E  3468               	retlw	104	;'h'
  1096  043F  3465               	retlw	101	;'e'
  1097  0440  346C               	retlw	108	;'l'
  1098  0441  3470               	retlw	112	;'p'
  1099  0442  342C               	retlw	44	;','
  1100  0443  3420               	retlw	32	;' '
  1101  0444  3474               	retlw	116	;'t'
  1102  0445  3479               	retlw	121	;'y'
  1103  0446  3470               	retlw	112	;'p'
  1104  0447  3465               	retlw	101	;'e'
  1105  0448  343A               	retlw	58	;':'
  1106  0449  3400               	retlw	0
  1107  044A                     STR_50:	
  1108  044A  3459               	retlw	89	;'Y'
  1109  044B  346F               	retlw	111	;'o'
  1110  044C  3475               	retlw	117	;'u'
  1111  044D  3420               	retlw	32	;' '
  1112  044E  3474               	retlw	116	;'t'
  1113  044F  3479               	retlw	121	;'y'
  1114  0450  3470               	retlw	112	;'p'
  1115  0451  3465               	retlw	101	;'e'
  1116  0452  3464               	retlw	100	;'d'
  1117  0453  3420               	retlw	32	;' '
  1118  0454  3473               	retlw	115	;'s'
  1119  0455  346F               	retlw	111	;'o'
  1120  0456  346D               	retlw	109	;'m'
  1121  0457  3465               	retlw	101	;'e'
  1122  0458  3474               	retlw	116	;'t'
  1123  0459  3468               	retlw	104	;'h'
  1124  045A  3469               	retlw	105	;'i'
  1125  045B  346E               	retlw	110	;'n'
  1126  045C  3467               	retlw	103	;'g'
  1127  045D  3420               	retlw	32	;' '
  1128  045E  3477               	retlw	119	;'w'
  1129  045F  3472               	retlw	114	;'r'
  1130  0460  346F               	retlw	111	;'o'
  1131  0461  346E               	retlw	110	;'n'
  1132  0462  3467               	retlw	103	;'g'
  1133  0463  342E               	retlw	46	;'.'
  1134  0464  3420               	retlw	32	;' '
  1135  0465  3400               	retlw	0
  1136  0466                     STR_19:	
  1137  0466  3420               	retlw	32	;' '
  1138  0467  3420               	retlw	32	;' '
  1139  0468  3420               	retlw	32	;' '
  1140  0469  3420               	retlw	32	;' '
  1141  046A  3420               	retlw	32	;' '
  1142  046B  3420               	retlw	32	;' '
  1143  046C  3420               	retlw	32	;' '
  1144  046D  3420               	retlw	32	;' '
  1145  046E  3473               	retlw	115	;'s'
  1146  046F  3479               	retlw	121	;'y'
  1147  0470  3473               	retlw	115	;'s'
  1148  0471  3428               	retlw	40	;'('
  1149  0472  346D               	retlw	109	;'m'
  1150  0473  3461               	retlw	97	;'a'
  1151  0474  3478               	retlw	120	;'x'
  1152  0475  345F               	retlw	95	;'_'
  1153  0476  3464               	retlw	100	;'d'
  1154  0477  3475               	retlw	117	;'u'
  1155  0478  3474               	retlw	116	;'t'
  1156  0479  3479               	retlw	121	;'y'
  1157  047A  345F               	retlw	95	;'_'
  1158  047B  3463               	retlw	99	;'c'
  1159  047C  3469               	retlw	105	;'i'
  1160  047D  3463               	retlw	99	;'c'
  1161  047E  346C               	retlw	108	;'l'
  1162  047F  3465               	retlw	101	;'e'
  1163  0480  3429               	retlw	41	;')'
  1164  0481  3400               	retlw	0
  1165  0482                     STR_58:	
  1166  0482  3454               	retlw	84	;'T'
  1167  0483  3468               	retlw	104	;'h'
  1168  0484  3465               	retlw	101	;'e'
  1169  0485  3420               	retlw	32	;' '
  1170  0486  3464               	retlw	100	;'d'
  1171  0487  3475               	retlw	117	;'u'
  1172  0488  3474               	retlw	116	;'t'
  1173  0489  3479               	retlw	121	;'y'
  1174  048A  342D               	retlw	45	;'-'
  1175  048B  3463               	retlw	99	;'c'
  1176  048C  3479               	retlw	121	;'y'
  1177  048D  3463               	retlw	99	;'c'
  1178  048E  346C               	retlw	108	;'l'
  1179  048F  3465               	retlw	101	;'e'
  1180  0490  3420               	retlw	32	;' '
  1181  0491  346F               	retlw	111	;'o'
  1182  0492  3466               	retlw	102	;'f'
  1183  0493  3420               	retlw	32	;' '
  1184  0494  3450               	retlw	80	;'P'
  1185  0495  3457               	retlw	87	;'W'
  1186  0496  344D               	retlw	77	;'M'
  1187  0497  3420               	retlw	32	;' '
  1188  0498  3469               	retlw	105	;'i'
  1189  0499  3473               	retlw	115	;'s'
  1190  049A  343A               	retlw	58	;':'
  1191  049B  3420               	retlw	32	;' '
  1192  049C  3400               	retlw	0
  1193  049D                     STR_61:	
  1194  049D  3454               	retlw	84	;'T'
  1195  049E  3468               	retlw	104	;'h'
  1196  049F  3465               	retlw	101	;'e'
  1197  04A0  3420               	retlw	32	;' '
  1198  04A1  3461               	retlw	97	;'a'
  1199  04A2  346E               	retlw	110	;'n'
  1200  04A3  3461               	retlw	97	;'a'
  1201  04A4  346C               	retlw	108	;'l'
  1202  04A5  346F               	retlw	111	;'o'
  1203  04A6  3467               	retlw	103	;'g'
  1204  04A7  3420               	retlw	32	;' '
  1205  04A8  3476               	retlw	118	;'v'
  1206  04A9  3461               	retlw	97	;'a'
  1207  04AA  346C               	retlw	108	;'l'
  1208  04AB  3475               	retlw	117	;'u'
  1209  04AC  3465               	retlw	101	;'e'
  1210  04AD  3420               	retlw	32	;' '
  1211  04AE  3469               	retlw	105	;'i'
  1212  04AF  3473               	retlw	115	;'s'
  1213  04B0  343A               	retlw	58	;':'
  1214  04B1  3420               	retlw	32	;' '
  1215  04B2  3400               	retlw	0
  1216  04B3                     STR_13:	
  1217  04B3  3420               	retlw	32	;' '
  1218  04B4  3420               	retlw	32	;' '
  1219  04B5  3420               	retlw	32	;' '
  1220  04B6  3420               	retlw	32	;' '
  1221  04B7  3420               	retlw	32	;' '
  1222  04B8  3420               	retlw	32	;' '
  1223  04B9  3420               	retlw	32	;' '
  1224  04BA  3420               	retlw	32	;' '
  1225  04BB  3473               	retlw	115	;'s'
  1226  04BC  3474               	retlw	116	;'t'
  1227  04BD  3465               	retlw	101	;'e'
  1228  04BE  3470               	retlw	112	;'p'
  1229  04BF  3428               	retlw	40	;'('
  1230  04C0  3435               	retlw	53	;'5'
  1231  04C1  3430               	retlw	48	;'0'
  1232  04C2  342C               	retlw	44	;','
  1233  04C3  3433               	retlw	51	;'3'
  1234  04C4  3430               	retlw	48	;'0'
  1235  04C5  3430               	retlw	48	;'0'
  1236  04C6  3429               	retlw	41	;')'
  1237  04C7  3400               	retlw	0
  1238  04C8                     STR_16:	
  1239  04C8  3420               	retlw	32	;' '
  1240  04C9  3420               	retlw	32	;' '
  1241  04CA  3420               	retlw	32	;' '
  1242  04CB  3420               	retlw	32	;' '
  1243  04CC  3420               	retlw	32	;' '
  1244  04CD  3420               	retlw	32	;' '
  1245  04CE  3420               	retlw	32	;' '
  1246  04CF  3420               	retlw	32	;' '
  1247  04D0  3472               	retlw	114	;'r'
  1248  04D1  3475               	retlw	117	;'u'
  1249  04D2  346E               	retlw	110	;'n'
  1250  04D3  3428               	retlw	40	;'('
  1251  04D4  3429               	retlw	41	;')'
  1252  04D5  3420               	retlw	32	;' '
  1253  04D6  3420               	retlw	32	;' '
  1254  04D7  3420               	retlw	32	;' '
  1255  04D8  3420               	retlw	32	;' '
  1256  04D9  3420               	retlw	32	;' '
  1257  04DA  3400               	retlw	0
  1258  04DB                     STR_22:	
  1259  04DB  3420               	retlw	32	;' '
  1260  04DC  3420               	retlw	32	;' '
  1261  04DD  3420               	retlw	32	;' '
  1262  04DE  3420               	retlw	32	;' '
  1263  04DF  3420               	retlw	32	;' '
  1264  04E0  3420               	retlw	32	;' '
  1265  04E1  3420               	retlw	32	;' '
  1266  04E2  3420               	retlw	32	;' '
  1267  04E3  3468               	retlw	104	;'h'
  1268  04E4  3465               	retlw	101	;'e'
  1269  04E5  346C               	retlw	108	;'l'
  1270  04E6  3470               	retlw	112	;'p'
  1271  04E7  3428               	retlw	40	;'('
  1272  04E8  3429               	retlw	41	;')'
  1273  04E9  3420               	retlw	32	;' '
  1274  04EA  3420               	retlw	32	;' '
  1275  04EB  3420               	retlw	32	;' '
  1276  04EC  3420               	retlw	32	;' '
  1277  04ED  3400               	retlw	0
  1278  04EE                     STR_25:	
  1279  04EE  3420               	retlw	32	;' '
  1280  04EF  3420               	retlw	32	;' '
  1281  04F0  3420               	retlw	32	;' '
  1282  04F1  3420               	retlw	32	;' '
  1283  04F2  3420               	retlw	32	;' '
  1284  04F3  3420               	retlw	32	;' '
  1285  04F4  3420               	retlw	32	;' '
  1286  04F5  3420               	retlw	32	;' '
  1287  04F6  3473               	retlw	115	;'s'
  1288  04F7  3474               	retlw	116	;'t'
  1289  04F8  346F               	retlw	111	;'o'
  1290  04F9  3470               	retlw	112	;'p'
  1291  04FA  3428               	retlw	40	;'('
  1292  04FB  3429               	retlw	41	;')'
  1293  04FC  3420               	retlw	32	;' '
  1294  04FD  3420               	retlw	32	;' '
  1295  04FE  3420               	retlw	32	;' '
  1296  04FF  3420               	retlw	32	;' '
  1297  0500  3400               	retlw	0
  1298  0501                     STR_31:	
  1299  0501  3420               	retlw	32	;' '
  1300  0502  3420               	retlw	32	;' '
  1301  0503  3420               	retlw	32	;' '
  1302  0504  3420               	retlw	32	;' '
  1303  0505  3420               	retlw	32	;' '
  1304  0506  3420               	retlw	32	;' '
  1305  0507  3420               	retlw	32	;' '
  1306  0508  3420               	retlw	32	;' '
  1307  0509  3473               	retlw	115	;'s'
  1308  050A  3474               	retlw	116	;'t'
  1309  050B  3461               	retlw	97	;'a'
  1310  050C  3474               	retlw	116	;'t'
  1311  050D  3475               	retlw	117	;'u'
  1312  050E  3473               	retlw	115	;'s'
  1313  050F  3428               	retlw	40	;'('
  1314  0510  3429               	retlw	41	;')'
  1315  0511  3420               	retlw	32	;' '
  1316  0512  3420               	retlw	32	;' '
  1317  0513  3400               	retlw	0
  1318  0514                     STR_28:	
  1319  0514  3420               	retlw	32	;' '
  1320  0515  3420               	retlw	32	;' '
  1321  0516  3420               	retlw	32	;' '
  1322  0517  3420               	retlw	32	;' '
  1323  0518  3420               	retlw	32	;' '
  1324  0519  3420               	retlw	32	;' '
  1325  051A  3420               	retlw	32	;' '
  1326  051B  3420               	retlw	32	;' '
  1327  051C  3461               	retlw	97	;'a'
  1328  051D  3463               	retlw	99	;'c'
  1329  051E  3471               	retlw	113	;'q'
  1330  051F  3475               	retlw	117	;'u'
  1331  0520  3469               	retlw	105	;'i'
  1332  0521  3472               	retlw	114	;'r'
  1333  0522  3465               	retlw	101	;'e'
  1334  0523  3428               	retlw	40	;'('
  1335  0524  3429               	retlw	41	;')'
  1336  0525  3420               	retlw	32	;' '
  1337  0526  3400               	retlw	0
  1338  0527                     STR_5:	
  1339  0527  3420               	retlw	32	;' '
  1340  0528  3420               	retlw	32	;' '
  1341  0529  3420               	retlw	32	;' '
  1342  052A  3420               	retlw	32	;' '
  1343  052B  3420               	retlw	32	;' '
  1344  052C  3420               	retlw	32	;' '
  1345  052D  3420               	retlw	32	;' '
  1346  052E  3420               	retlw	32	;' '
  1347  052F  3445               	retlw	69	;'E'
  1348  0530  3478               	retlw	120	;'x'
  1349  0531  3461               	retlw	97	;'a'
  1350  0532  346D               	retlw	109	;'m'
  1351  0533  3470               	retlw	112	;'p'
  1352  0534  346C               	retlw	108	;'l'
  1353  0535  3465               	retlw	101	;'e'
  1354  0536  3420               	retlw	32	;' '
  1355  0537  3430               	retlw	48	;'0'
  1356  0538  343A               	retlw	58	;':'
  1357  0539  3400               	retlw	0
  1358  053A                     STR_8:	
  1359  053A  3420               	retlw	32	;' '
  1360  053B  3420               	retlw	32	;' '
  1361  053C  3420               	retlw	32	;' '
  1362  053D  3420               	retlw	32	;' '
  1363  053E  3420               	retlw	32	;' '
  1364  053F  3420               	retlw	32	;' '
  1365  0540  3420               	retlw	32	;' '
  1366  0541  3420               	retlw	32	;' '
  1367  0542  3445               	retlw	69	;'E'
  1368  0543  3478               	retlw	120	;'x'
  1369  0544  3461               	retlw	97	;'a'
  1370  0545  346D               	retlw	109	;'m'
  1371  0546  3470               	retlw	112	;'p'
  1372  0547  346C               	retlw	108	;'l'
  1373  0548  3465               	retlw	101	;'e'
  1374  0549  3420               	retlw	32	;' '
  1375  054A  3431               	retlw	49	;'1'
  1376  054B  343A               	retlw	58	;':'
  1377  054C  3400               	retlw	0
  1378  054D                     STR_11:	
  1379  054D  3420               	retlw	32	;' '
  1380  054E  3420               	retlw	32	;' '
  1381  054F  3420               	retlw	32	;' '
  1382  0550  3420               	retlw	32	;' '
  1383  0551  3420               	retlw	32	;' '
  1384  0552  3420               	retlw	32	;' '
  1385  0553  3420               	retlw	32	;' '
  1386  0554  3420               	retlw	32	;' '
  1387  0555  3445               	retlw	69	;'E'
  1388  0556  3478               	retlw	120	;'x'
  1389  0557  3461               	retlw	97	;'a'
  1390  0558  346D               	retlw	109	;'m'
  1391  0559  3470               	retlw	112	;'p'
  1392  055A  346C               	retlw	108	;'l'
  1393  055B  3465               	retlw	101	;'e'
  1394  055C  3420               	retlw	32	;' '
  1395  055D  3432               	retlw	50	;'2'
  1396  055E  343A               	retlw	58	;':'
  1397  055F  3400               	retlw	0
  1398  0560                     STR_14:	
  1399  0560  3420               	retlw	32	;' '
  1400  0561  3420               	retlw	32	;' '
  1401  0562  3420               	retlw	32	;' '
  1402  0563  3420               	retlw	32	;' '
  1403  0564  3420               	retlw	32	;' '
  1404  0565  3420               	retlw	32	;' '
  1405  0566  3420               	retlw	32	;' '
  1406  0567  3420               	retlw	32	;' '
  1407  0568  3445               	retlw	69	;'E'
  1408  0569  3478               	retlw	120	;'x'
  1409  056A  3461               	retlw	97	;'a'
  1410  056B  346D               	retlw	109	;'m'
  1411  056C  3470               	retlw	112	;'p'
  1412  056D  346C               	retlw	108	;'l'
  1413  056E  3465               	retlw	101	;'e'
  1414  056F  3420               	retlw	32	;' '
  1415  0570  3433               	retlw	51	;'3'
  1416  0571  343A               	retlw	58	;':'
  1417  0572  3400               	retlw	0
  1418  0573                     STR_17:	
  1419  0573  3420               	retlw	32	;' '
  1420  0574  3420               	retlw	32	;' '
  1421  0575  3420               	retlw	32	;' '
  1422  0576  3420               	retlw	32	;' '
  1423  0577  3420               	retlw	32	;' '
  1424  0578  3420               	retlw	32	;' '
  1425  0579  3420               	retlw	32	;' '
  1426  057A  3420               	retlw	32	;' '
  1427  057B  3445               	retlw	69	;'E'
  1428  057C  3478               	retlw	120	;'x'
  1429  057D  3461               	retlw	97	;'a'
  1430  057E  346D               	retlw	109	;'m'
  1431  057F  3470               	retlw	112	;'p'
  1432  0580  346C               	retlw	108	;'l'
  1433  0581  3465               	retlw	101	;'e'
  1434  0582  3420               	retlw	32	;' '
  1435  0583  3434               	retlw	52	;'4'
  1436  0584  343A               	retlw	58	;':'
  1437  0585  3400               	retlw	0
  1438  0586                     STR_20:	
  1439  0586  3420               	retlw	32	;' '
  1440  0587  3420               	retlw	32	;' '
  1441  0588  3420               	retlw	32	;' '
  1442  0589  3420               	retlw	32	;' '
  1443  058A  3420               	retlw	32	;' '
  1444  058B  3420               	retlw	32	;' '
  1445  058C  3420               	retlw	32	;' '
  1446  058D  3420               	retlw	32	;' '
  1447  058E  3445               	retlw	69	;'E'
  1448  058F  3478               	retlw	120	;'x'
  1449  0590  3461               	retlw	97	;'a'
  1450  0591  346D               	retlw	109	;'m'
  1451  0592  3470               	retlw	112	;'p'
  1452  0593  346C               	retlw	108	;'l'
  1453  0594  3465               	retlw	101	;'e'
  1454  0595  3420               	retlw	32	;' '
  1455  0596  3435               	retlw	53	;'5'
  1456  0597  343A               	retlw	58	;':'
  1457  0598  3400               	retlw	0
  1458  0599                     STR_23:	
  1459  0599  3420               	retlw	32	;' '
  1460  059A  3420               	retlw	32	;' '
  1461  059B  3420               	retlw	32	;' '
  1462  059C  3420               	retlw	32	;' '
  1463  059D  3420               	retlw	32	;' '
  1464  059E  3420               	retlw	32	;' '
  1465  059F  3420               	retlw	32	;' '
  1466  05A0  3420               	retlw	32	;' '
  1467  05A1  3445               	retlw	69	;'E'
  1468  05A2  3478               	retlw	120	;'x'
  1469  05A3  3461               	retlw	97	;'a'
  1470  05A4  346D               	retlw	109	;'m'
  1471  05A5  3470               	retlw	112	;'p'
  1472  05A6  346C               	retlw	108	;'l'
  1473  05A7  3465               	retlw	101	;'e'
  1474  05A8  3420               	retlw	32	;' '
  1475  05A9  3436               	retlw	54	;'6'
  1476  05AA  343A               	retlw	58	;':'
  1477  05AB  3400               	retlw	0
  1478  05AC                     STR_26:	
  1479  05AC  3420               	retlw	32	;' '
  1480  05AD  3420               	retlw	32	;' '
  1481  05AE  3420               	retlw	32	;' '
  1482  05AF  3420               	retlw	32	;' '
  1483  05B0  3420               	retlw	32	;' '
  1484  05B1  3420               	retlw	32	;' '
  1485  05B2  3420               	retlw	32	;' '
  1486  05B3  3420               	retlw	32	;' '
  1487  05B4  3445               	retlw	69	;'E'
  1488  05B5  3478               	retlw	120	;'x'
  1489  05B6  3461               	retlw	97	;'a'
  1490  05B7  346D               	retlw	109	;'m'
  1491  05B8  3470               	retlw	112	;'p'
  1492  05B9  346C               	retlw	108	;'l'
  1493  05BA  3465               	retlw	101	;'e'
  1494  05BB  3420               	retlw	32	;' '
  1495  05BC  3437               	retlw	55	;'7'
  1496  05BD  343A               	retlw	58	;':'
  1497  05BE  3400               	retlw	0
  1498  05BF                     STR_29:	
  1499  05BF  3420               	retlw	32	;' '
  1500  05C0  3420               	retlw	32	;' '
  1501  05C1  3420               	retlw	32	;' '
  1502  05C2  3420               	retlw	32	;' '
  1503  05C3  3420               	retlw	32	;' '
  1504  05C4  3420               	retlw	32	;' '
  1505  05C5  3420               	retlw	32	;' '
  1506  05C6  3420               	retlw	32	;' '
  1507  05C7  3445               	retlw	69	;'E'
  1508  05C8  3478               	retlw	120	;'x'
  1509  05C9  3461               	retlw	97	;'a'
  1510  05CA  346D               	retlw	109	;'m'
  1511  05CB  3470               	retlw	112	;'p'
  1512  05CC  346C               	retlw	108	;'l'
  1513  05CD  3465               	retlw	101	;'e'
  1514  05CE  3420               	retlw	32	;' '
  1515  05CF  3438               	retlw	56	;'8'
  1516  05D0  343A               	retlw	58	;':'
  1517  05D1  3400               	retlw	0
  1518  05D2                     STR_32:	
  1519  05D2  3420               	retlw	32	;' '
  1520  05D3  3420               	retlw	32	;' '
  1521  05D4  3420               	retlw	32	;' '
  1522  05D5  3420               	retlw	32	;' '
  1523  05D6  3420               	retlw	32	;' '
  1524  05D7  3420               	retlw	32	;' '
  1525  05D8  3420               	retlw	32	;' '
  1526  05D9  3420               	retlw	32	;' '
  1527  05DA  3445               	retlw	69	;'E'
  1528  05DB  3478               	retlw	120	;'x'
  1529  05DC  3461               	retlw	97	;'a'
  1530  05DD  346D               	retlw	109	;'m'
  1531  05DE  3470               	retlw	112	;'p'
  1532  05DF  346C               	retlw	108	;'l'
  1533  05E0  3465               	retlw	101	;'e'
  1534  05E1  3420               	retlw	32	;' '
  1535  05E2  3439               	retlw	57	;'9'
  1536  05E3  343A               	retlw	58	;':'
  1537  05E4  3400               	retlw	0
  1538  05E5                     STR_10:	
  1539  05E5  3420               	retlw	32	;' '
  1540  05E6  3420               	retlw	32	;' '
  1541  05E7  3420               	retlw	32	;' '
  1542  05E8  3420               	retlw	32	;' '
  1543  05E9  3420               	retlw	32	;' '
  1544  05EA  3420               	retlw	32	;' '
  1545  05EB  3420               	retlw	32	;' '
  1546  05EC  3420               	retlw	32	;' '
  1547  05ED  3473               	retlw	115	;'s'
  1548  05EE  3474               	retlw	116	;'t'
  1549  05EF  3465               	retlw	101	;'e'
  1550  05F0  3470               	retlw	112	;'p'
  1551  05F1  3428               	retlw	40	;'('
  1552  05F2  3432               	retlw	50	;'2'
  1553  05F3  3430               	retlw	48	;'0'
  1554  05F4  3430               	retlw	48	;'0'
  1555  05F5  3429               	retlw	41	;')'
  1556  05F6  3400               	retlw	0
  1557  05F7                     STR_7:	
  1558  05F7  3420               	retlw	32	;' '
  1559  05F8  3420               	retlw	32	;' '
  1560  05F9  3420               	retlw	32	;' '
  1561  05FA  3420               	retlw	32	;' '
  1562  05FB  3420               	retlw	32	;' '
  1563  05FC  3420               	retlw	32	;' '
  1564  05FD  3420               	retlw	32	;' '
  1565  05FE  3420               	retlw	32	;' '
  1566  05FF  3473               	retlw	115	;'s'
  1567  0600  3474               	retlw	116	;'t'
  1568  0601  3465               	retlw	101	;'e'
  1569  0602  3470               	retlw	112	;'p'
  1570  0603  3428               	retlw	40	;'('
  1571  0604  3429               	retlw	41	;')'
  1572  0605  3400               	retlw	0
  1573  0606                     STR_48:	
  1574  0606  3461               	retlw	97	;'a'
  1575  0607  3463               	retlw	99	;'c'
  1576  0608  3471               	retlw	113	;'q'
  1577  0609  3475               	retlw	117	;'u'
  1578  060A  3469               	retlw	105	;'i'
  1579  060B  3472               	retlw	114	;'r'
  1580  060C  3465               	retlw	101	;'e'
  1581  060D  3428               	retlw	40	;'('
  1582  060E  3429               	retlw	41	;')'
  1583  060F  3400               	retlw	0
  1584  0610                     STR_65:	
  1585  0610  3441               	retlw	65	;'A'
  1586  0611  346E               	retlw	110	;'n'
  1587  0612  3461               	retlw	97	;'a'
  1588  0613  346C               	retlw	108	;'l'
  1589  0614  346F               	retlw	111	;'o'
  1590  0615  3467               	retlw	103	;'g'
  1591  0616  343A               	retlw	58	;':'
  1592  0617  3420               	retlw	32	;' '
  1593  0618  3400               	retlw	0
  1594  0619                     STR_67:	
  1595  0619  342C               	retlw	44	;','
  1596  061A  3420               	retlw	32	;' '
  1597  061B  3444               	retlw	68	;'D'
  1598  061C  3475               	retlw	117	;'u'
  1599  061D  3474               	retlw	116	;'t'
  1600  061E  3479               	retlw	121	;'y'
  1601  061F  343A               	retlw	58	;':'
  1602  0620  3420               	retlw	32	;' '
  1603  0621  3400               	retlw	0
  1604  0622                     STR_47:	
  1605  0622  3473               	retlw	115	;'s'
  1606  0623  3474               	retlw	116	;'t'
  1607  0624  3461               	retlw	97	;'a'
  1608  0625  3474               	retlw	116	;'t'
  1609  0626  3475               	retlw	117	;'u'
  1610  0627  3473               	retlw	115	;'s'
  1611  0628  3428               	retlw	40	;'('
  1612  0629  3429               	retlw	41	;')'
  1613  062A  3400               	retlw	0
  1614  062B                     STR_69:	
  1615  062B  342C               	retlw	44	;','
  1616  062C  3420               	retlw	32	;' '
  1617  062D  3450               	retlw	80	;'P'
  1618  062E  3452               	retlw	82	;'R'
  1619  062F  3432               	retlw	50	;'2'
  1620  0630  343A               	retlw	58	;':'
  1621  0631  3420               	retlw	32	;' '
  1622  0632  3400               	retlw	0
  1623  0633                     STR_49:	
  1624  0633  3468               	retlw	104	;'h'
  1625  0634  3465               	retlw	101	;'e'
  1626  0635  346C               	retlw	108	;'l'
  1627  0636  3470               	retlw	112	;'p'
  1628  0637  3428               	retlw	40	;'('
  1629  0638  3429               	retlw	41	;')'
  1630  0639  3400               	retlw	0
  1631  063A                     STR_46:	
  1632  063A  3473               	retlw	115	;'s'
  1633  063B  3474               	retlw	116	;'t'
  1634  063C  346F               	retlw	111	;'o'
  1635  063D  3470               	retlw	112	;'p'
  1636  063E  3428               	retlw	40	;'('
  1637  063F  3429               	retlw	41	;')'
  1638  0640  3400               	retlw	0
  1639  0641                     STR_36:	
  1640  0641  3473               	retlw	115	;'s'
  1641  0642  3474               	retlw	116	;'t'
  1642  0643  3465               	retlw	101	;'e'
  1643  0644  3470               	retlw	112	;'p'
  1644  0645  3428               	retlw	40	;'('
  1645  0646  3400               	retlw	0
  1646  0647                     STR_40:	
  1647  0647  3472               	retlw	114	;'r'
  1648  0648  3475               	retlw	117	;'u'
  1649  0649  346E               	retlw	110	;'n'
  1650  064A  3428               	retlw	40	;'('
  1651  064B  3400               	retlw	0
  1652  064C                     STR_43:	
  1653  064C  3473               	retlw	115	;'s'
  1654  064D  3479               	retlw	121	;'y'
  1655  064E  3473               	retlw	115	;'s'
  1656  064F  3428               	retlw	40	;'('
  1657  0650  3400               	retlw	0
  1658  0651                     STR_52:	
  1659  0651  3425               	retlw	37	;'%'
  1660  0652  3464               	retlw	100	;'d'
  1661  0653  3400               	retlw	0
  1662  0654                     STR_60:	
  1663  0654  3425               	retlw	37	;'%'
  1664  0655  3400               	retlw	0
  1665  0656                     STR_38:	
  1666  0656  342C               	retlw	44	;','
  1667  0657  3400               	retlw	0
  1668  0658                     STR_1:	
  1669  0658  343E               	retlw	62	;'>'
  1670  0659  3400               	retlw	0
  1671  04DB                     
  1672                           ; #config settings
  1673  0000                     
  1674                           	psect	nvBANK0
  1675  0059                     __pnvBANK0:	
  1676  0059                     _UQEnd:	
  1677  0059                     	ds	1
  1678  005A                     _UQFront:	
  1679  005A                     	ds	1
  1680  001E                     _ADRESH	set	30
  1681  001F                     _ADCON0bits	set	31
  1682  0007                     _PORTCbits	set	7
  1683  001D                     _CCP2CONbits	set	29
  1684  0017                     _CCP1CONbits	set	23
  1685  001B                     _CCPR2L	set	27
  1686  000B                     _INTCONbits	set	11
  1687  0012                     _T2CON	set	18
  1688  001D                     _CCP2CON	set	29
  1689  0017                     _CCP1CON	set	23
  1690  0015                     _CCPR1L	set	21
  1691  0001                     _TMR0	set	1
  1692  000B                     _INTCON	set	11
  1693  001F                     _ADCON0	set	31
  1694  0008                     _PORTD	set	8
  1695  0007                     _PORTC	set	7
  1696  0006                     _PORTB	set	6
  1697  0005                     _PORTA	set	5
  1698  001A                     _RCREG	set	26
  1699  0019                     _TXREG	set	25
  1700  000C                     _PIR1bits	set	12
  1701  0018                     _RCSTAbits	set	24
  1702  0065                     _RCIF	set	101
  1703  0031                     _RB1	set	49
  1704  005F                     _GIE	set	95
  1705  005E                     _PEIE	set	94
  1706  009E                     _ADRESL	set	158
  1707  0092                     _PR2	set	146
  1708  0081                     _OPTION_REG	set	129
  1709  009F                     _ADCON1	set	159
  1710  0088                     _TRISD	set	136
  1711  0087                     _TRISC	set	135
  1712  0086                     _TRISB	set	134
  1713  0085                     _TRISA	set	133
  1714  0098                     _TXSTAbits	set	152
  1715  0099                     _SPBRG	set	153
  1716  0465                     _RCIE	set	1125
  1717                           
  1718                           	psect	cinit
  1719  0015                     start_initialization:	
  1720  0015                     __initialization:	
  1721                           
  1722                           ; Initialize objects allocated to BANK0
  1723  0015  120A  118A  27FA  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1724  001A  00D4               	movwf	__pdataBANK0& (0+127)
  1725  001B  120A  118A  27FB  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
  1726  0020  00D5               	movwf	(__pdataBANK0+1)& (0+127)
  1727  0021  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
  1728  0026  00D6               	movwf	(__pdataBANK0+2)& (0+127)
  1729  0027  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
  1730  002C  00D7               	movwf	(__pdataBANK0+3)& (0+127)
  1731  002D  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
  1732  0032  00D8               	movwf	(__pdataBANK0+4)& (0+127)
  1733                           
  1734                           ; Clear objects allocated to BANK3
  1735  0033  1783               	bsf	3,7	;select IRP bank2
  1736  0034  30D6               	movlw	low __pbssBANK3
  1737  0035  0084               	movwf	4
  1738  0036  30EF               	movlw	low (__pbssBANK3+25)
  1739  0037  160A  158A  245F  120A  118A  	fcall	clear_ram0
  1740                           
  1741                           ; Clear objects allocated to BANK2
  1742  003C  3010               	movlw	low __pbssBANK2
  1743  003D  0084               	movwf	4
  1744  003E  3050               	movlw	low (__pbssBANK2+64)
  1745  003F  160A  158A  245F  120A  118A  	fcall	clear_ram0
  1746                           
  1747                           ; Clear objects allocated to BANK1
  1748  0044  1383               	bcf	3,7	;select IRP bank0
  1749  0045  30CE               	movlw	low __pbssBANK1
  1750  0046  0084               	movwf	4
  1751  0047  30EA               	movlw	low (__pbssBANK1+28)
  1752  0048  160A  158A  245F  120A  118A  	fcall	clear_ram0
  1753                           
  1754                           ; Clear objects allocated to BANK0
  1755  004D  304A               	movlw	low __pbssBANK0
  1756  004E  0084               	movwf	4
  1757  004F  3054               	movlw	low (__pbssBANK0+10)
  1758  0050  160A  158A  245F   	fcall	clear_ram0
  1759  0053                     end_of_initialization:	
  1760                           ;End of C runtime variable initialization code
  1761                           
  1762  0053                     __end_of__initialization:	
  1763  0053  0183               	clrf	3
  1764  0054  160A  158A  2E45   	ljmp	_main	;jump to C main() function
  1765                           
  1766                           	psect	bssBANK0
  1767  004A                     __pbssBANK0:	
  1768  004A                     USARTWriteInt@F1155:	
  1769  004A                     	ds	5
  1770  004F                     _max_counters:	
  1771  004F                     	ds	2
  1772  0051                     _count:	
  1773  0051                     	ds	2
  1774  0053                     _stepEnable:	
  1775  0053                     	ds	1
  1776                           
  1777                           	psect	dataBANK0
  1778  0054                     __pdataBANK0:	
  1779  0054                     _randx:	
  1780  0054                     	ds	4
  1781  0058                     _acquirement:	
  1782  0058                     	ds	1
  1783                           
  1784                           	psect	bssBANK1
  1785  00CE                     __pbssBANK1:	
  1786  00CE                     _pwm:	
  1787  00CE                     	ds	2
  1788  00D0                     _buffer:	
  1789  00D0                     	ds	1
  1790  00D1                     _content:	
  1791  00D1                     	ds	25
  1792                           
  1793                           	psect	bssBANK3
  1794  01D6                     __pbssBANK3:	
  1795  01D6                     _strBuffer:	
  1796  01D6                     	ds	25
  1797                           
  1798                           	psect	bssBANK2
  1799  0110                     __pbssBANK2:	
  1800  0110                     _URBuff:	
  1801  0110                     	ds	64
  1802                           
  1803                           	psect	clrtext
  1804  1C5F                     clear_ram0:	
  1805                           ;	Called with FSR containing the base address, and
  1806                           ;	W with the last address+1
  1807                           
  1808  1C5F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1809  1C60                     clrloop0:	
  1810  1C60  0180               	clrf	0	;clear RAM location pointed to by FSR
  1811  1C61  0A84               	incf	4,f	;increment pointer
  1812  1C62  0604               	xorwf	4,w	;XOR with final address
  1813  1C63  1903               	btfsc	3,2	;have we reached the end yet?
  1814  1C64  3400               	retlw	0	;all done for this memory range, return
  1815  1C65  0604               	xorwf	4,w	;XOR again to restore value
  1816  1C66  2C60               	goto	clrloop0	;do the next byte
  1817                           
  1818                           	psect	cstackBANK3
  1819  0190                     __pcstackBANK3:	
  1820  0190                     status@output:	
  1821                           
  1822                           ; 25 bytes @ 0x0
  1823  0190                     	ds	25
  1824  01A9                     status@aux:	
  1825                           
  1826                           ; 3 bytes @ 0x19
  1827  01A9                     	ds	3
  1828  01AC                     status@duty:	
  1829                           
  1830                           ; 2 bytes @ 0x1C
  1831  01AC                     	ds	2
  1832  01AE                     status@i:	
  1833                           
  1834                           ; 2 bytes @ 0x1E
  1835  01AE                     	ds	2
  1836  01B0                     choice@duty:	
  1837                           
  1838                           ; 10 bytes @ 0x20
  1839  01B0                     	ds	10
  1840  01BA                     choice@duty_555:	
  1841                           
  1842                           ; 10 bytes @ 0x2A
  1843  01BA                     	ds	10
  1844  01C4                     choice@duty_562:	
  1845                           
  1846                           ; 10 bytes @ 0x34
  1847  01C4                     	ds	10
  1848  01CE                     choice@thirdP:	
  1849                           
  1850                           ; 2 bytes @ 0x3E
  1851  01CE                     	ds	2
  1852  01D0                     choice@secondP_558:	
  1853                           
  1854                           ; 2 bytes @ 0x40
  1855  01D0                     	ds	2
  1856  01D2                     choice@secondP_565:	
  1857                           
  1858                           ; 2 bytes @ 0x42
  1859  01D2                     	ds	2
  1860  01D4                     choice@time_1:	
  1861                           
  1862                           ; 2 bytes @ 0x44
  1863  01D4                     	ds	2
  1864                           
  1865                           	psect	cstackBANK2
  1866  0150                     __pcstackBANK2:	
  1867  0150                     choice@time:	
  1868                           
  1869                           ; 10 bytes @ 0x0
  1870  0150                     	ds	10
  1871  015A                     choice@firstP:	
  1872                           
  1873                           ; 2 bytes @ 0xA
  1874  015A                     	ds	2
  1875  015C                     choice@firstP_556:	
  1876                           
  1877                           ; 2 bytes @ 0xC
  1878  015C                     	ds	2
  1879  015E                     choice@firstP_563:	
  1880                           
  1881                           ; 2 bytes @ 0xE
  1882  015E                     	ds	2
  1883  0160                     choice@duty_i:	
  1884                           
  1885                           ; 2 bytes @ 0x10
  1886  0160                     	ds	2
  1887  0162                     choice@secondP:	
  1888                           
  1889                           ; 2 bytes @ 0x12
  1890  0162                     	ds	2
  1891  0164                     choice@i_560:	
  1892                           
  1893                           ; 2 bytes @ 0x14
  1894  0164                     	ds	2
  1895  0166                     choice@i_567:	
  1896                           
  1897                           ; 2 bytes @ 0x16
  1898  0166                     	ds	2
  1899  0168                     choice@i:	
  1900                           
  1901                           ; 2 bytes @ 0x18
  1902  0168                     	ds	2
  1903                           
  1904                           	psect	cstackBANK1
  1905  00A0                     __pcstackBANK1:	
  1906  00A0                     ??___ftdiv:	
  1907  00A0                     ??___ftmul:	
  1908                           ; 1 bytes @ 0x0
  1909                           
  1910  00A0                     ?___awmod:	
  1911                           ; 1 bytes @ 0x0
  1912                           
  1913  00A0                     ?___lwmod:	
  1914                           ; 2 bytes @ 0x0
  1915                           
  1916  00A0                     ___awmod@divisor:	
  1917                           ; 2 bytes @ 0x0
  1918                           
  1919  00A0                     ___lwmod@divisor:	
  1920                           ; 2 bytes @ 0x0
  1921                           
  1922                           
  1923                           ; 2 bytes @ 0x0
  1924  00A0                     	ds	2
  1925  00A2                     ___awmod@dividend:	
  1926  00A2                     ___lwmod@dividend:	
  1927                           ; 2 bytes @ 0x2
  1928                           
  1929                           
  1930                           ; 2 bytes @ 0x2
  1931  00A2                     	ds	2
  1932  00A4                     ___awmod@counter:	
  1933  00A4                     ___ftdiv@cntr:	
  1934                           ; 1 bytes @ 0x4
  1935                           
  1936  00A4                     ___ftmul@exp:	
  1937                           ; 1 bytes @ 0x4
  1938                           
  1939  00A4                     ___lwmod@counter:	
  1940                           ; 1 bytes @ 0x4
  1941                           
  1942                           
  1943                           ; 1 bytes @ 0x4
  1944  00A4                     	ds	1
  1945  00A5                     ?_sprintf:	
  1946  00A5                     ___awmod@sign:	
  1947                           ; 2 bytes @ 0x5
  1948                           
  1949  00A5                     sprintf@f:	
  1950                           ; 1 bytes @ 0x5
  1951                           
  1952  00A5                     ___ftdiv@f3:	
  1953                           ; 2 bytes @ 0x5
  1954                           
  1955  00A5                     ___ftmul@f3_as_product:	
  1956                           ; 3 bytes @ 0x5
  1957                           
  1958                           
  1959                           ; 3 bytes @ 0x5
  1960  00A5                     	ds	3
  1961  00A8                     ___ftdiv@exp:	
  1962  00A8                     ___ftmul@cntr:	
  1963                           ; 1 bytes @ 0x8
  1964                           
  1965                           
  1966                           ; 1 bytes @ 0x8
  1967  00A8                     	ds	1
  1968  00A9                     ___ftdiv@sign:	
  1969  00A9                     ___ftmul@sign:	
  1970                           ; 1 bytes @ 0x9
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0x9
  1974  00A9                     	ds	1
  1975  00AA                     ?___fttol:	
  1976  00AA                     ___fttol@f1:	
  1977                           ; 4 bytes @ 0xA
  1978                           
  1979                           
  1980                           ; 3 bytes @ 0xA
  1981  00AA                     	ds	1
  1982  00AB                     ??_sprintf:	
  1983                           
  1984                           ; 1 bytes @ 0xB
  1985  00AB                     	ds	3
  1986  00AE                     ??___fttol:	
  1987  00AE                     sprintf@ap:	
  1988                           ; 1 bytes @ 0xE
  1989                           
  1990                           
  1991                           ; 1 bytes @ 0xE
  1992  00AE                     	ds	1
  1993  00AF                     sprintf@flag:	
  1994                           
  1995                           ; 1 bytes @ 0xF
  1996  00AF                     	ds	1
  1997  00B0                     sprintf@prec:	
  1998                           
  1999                           ; 1 bytes @ 0x10
  2000  00B0                     	ds	1
  2001  00B1                     sprintf@val:	
  2002                           
  2003                           ; 2 bytes @ 0x11
  2004  00B1                     	ds	1
  2005  00B2                     ___fttol@sign1:	
  2006                           
  2007                           ; 1 bytes @ 0x12
  2008  00B2                     	ds	1
  2009  00B3                     sprintf@sp:	
  2010  00B3                     ___fttol@lval:	
  2011                           ; 1 bytes @ 0x13
  2012                           
  2013                           
  2014                           ; 4 bytes @ 0x13
  2015  00B3                     	ds	1
  2016  00B4                     sprintf@c:	
  2017                           
  2018                           ; 1 bytes @ 0x14
  2019  00B4                     	ds	1
  2020  00B5                     acquire@valueAD:	
  2021  00B5                     adReadA0@valueAD:	
  2022                           ; 2 bytes @ 0x15
  2023                           
  2024                           
  2025                           ; 2 bytes @ 0x15
  2026  00B5                     	ds	2
  2027  00B7                     ___fttol@exp1:	
  2028                           
  2029                           ; 1 bytes @ 0x17
  2030  00B7                     	ds	1
  2031  00B8                     ?_set_pwm:	
  2032  00B8                     set_pwm@percent:	
  2033                           ; 1 bytes @ 0x18
  2034                           
  2035                           
  2036                           ; 2 bytes @ 0x18
  2037  00B8                     	ds	2
  2038  00BA                     ??_set_pwm:	
  2039                           
  2040                           ; 1 bytes @ 0x1A
  2041  00BA                     	ds	2
  2042  00BC                     ?_step:	
  2043  00BC                     ?_run:	
  2044                           ; 1 bytes @ 0x1C
  2045                           
  2046  00BC                     ?_sys:	
  2047                           ; 1 bytes @ 0x1C
  2048                           
  2049  00BC                     step@duty:	
  2050                           ; 1 bytes @ 0x1C
  2051                           
  2052  00BC                     run@duty:	
  2053                           ; 2 bytes @ 0x1C
  2054                           
  2055  00BC                     sys@duty:	
  2056                           ; 2 bytes @ 0x1C
  2057                           
  2058                           
  2059                           ; 2 bytes @ 0x1C
  2060  00BC                     	ds	2
  2061  00BE                     ??_sys:	
  2062  00BE                     step@time:	
  2063                           ; 1 bytes @ 0x1E
  2064                           
  2065                           
  2066                           ; 4 bytes @ 0x1E
  2067  00BE                     	ds	2
  2068  00C0                     sys@valueAD:	
  2069                           
  2070                           ; 2 bytes @ 0x20
  2071  00C0                     	ds	2
  2072  00C2                     sys@max_duty:	
  2073                           
  2074                           ; 2 bytes @ 0x22
  2075  00C2                     	ds	2
  2076  00C4                     ??_choice:	
  2077                           
  2078                           ; 1 bytes @ 0x24
  2079  00C4                     	ds	5
  2080  00C9                     ??_getData:	
  2081                           
  2082                           ; 1 bytes @ 0x29
  2083  00C9                     	ds	1
  2084  00CA                     getData@n:	
  2085                           
  2086                           ; 1 bytes @ 0x2A
  2087  00CA                     	ds	1
  2088  00CB                     getData@data:	
  2089                           
  2090                           ; 1 bytes @ 0x2B
  2091  00CB                     	ds	1
  2092  00CC                     getData@i:	
  2093                           
  2094                           ; 2 bytes @ 0x2C
  2095  00CC                     	ds	2
  2096                           
  2097                           	psect	cstackCOMMON
  2098  0070                     __pcstackCOMMON:	
  2099  0070                     ?_isdigit:	
  2100  0070                     ?_acquire:	
  2101                           ; 1 bit 
  2102                           
  2103  0070                     ?_stop:	
  2104                           ; 1 bytes @ 0x0
  2105                           
  2106  0070                     ?_help:	
  2107                           ; 1 bytes @ 0x0
  2108                           
  2109  0070                     ?_getData:	
  2110                           ; 1 bytes @ 0x0
  2111                           
  2112  0070                     ?_choice:	
  2113                           ; 1 bytes @ 0x0
  2114                           
  2115  0070                     ?_status:	
  2116                           ; 1 bytes @ 0x0
  2117                           
  2118  0070                     ?_adReadA0:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121  0070                     ?_USARTWriteChar:	
  2122                           ; 1 bytes @ 0x0
  2123                           
  2124  0070                     ?_USARTHandleRxInt:	
  2125                           ; 1 bytes @ 0x0
  2126                           
  2127  0070                     ??_USARTHandleRxInt:	
  2128                           ; 1 bytes @ 0x0
  2129                           
  2130  0070                     ?_USARTReadData:	
  2131                           ; 1 bytes @ 0x0
  2132                           
  2133  0070                     ?_USARTDataAvailable:	
  2134                           ; 1 bytes @ 0x0
  2135                           
  2136  0070                     ?_USARTGotoNewLine:	
  2137                           ; 1 bytes @ 0x0
  2138                           
  2139  0070                     ?_init:	
  2140                           ; 1 bytes @ 0x0
  2141                           
  2142  0070                     ?_ISR:	
  2143                           ; 1 bytes @ 0x0
  2144                           
  2145  0070                     ?_main:	
  2146                           ; 1 bytes @ 0x0
  2147                           
  2148  0070                     ?i1_USARTWriteChar:	
  2149                           ; 1 bytes @ 0x0
  2150                           
  2151  0070                     ??i1_USARTWriteChar:	
  2152                           ; 1 bytes @ 0x0
  2153                           
  2154  0070                     ?i1_USARTDataAvailable:	
  2155                           ; 1 bytes @ 0x0
  2156                           
  2157  0070                     ??i1_USARTDataAvailable:	
  2158                           ; 1 bytes @ 0x0
  2159                           
  2160  0070                     ?i1_USARTGotoNewLine:	
  2161                           ; 1 bytes @ 0x0
  2162                           
  2163  0070                     ?i1_acquire:	
  2164                           ; 1 bytes @ 0x0
  2165                           
  2166  0070                     ?i1_sampling:	
  2167                           ; 1 bytes @ 0x0
  2168                           
  2169  0070                     ?i1___lwdiv:	
  2170                           ; 2 bytes @ 0x0
  2171                           
  2172  0070                     i1USARTWriteChar@ch:	
  2173                           ; 2 bytes @ 0x0
  2174                           
  2175  0070                     i1___lwdiv@divisor:	
  2176                           ; 1 bytes @ 0x0
  2177                           
  2178                           
  2179                           ; 2 bytes @ 0x0
  2180  0070                     	ds	1
  2181  0071                     ?i1_USARTWriteString:	
  2182  0071                     ??i1_USARTGotoNewLine:	
  2183                           ; 1 bytes @ 0x1
  2184                           
  2185  0071                     i1USARTWriteString@str:	
  2186                           ; 1 bytes @ 0x1
  2187                           
  2188                           
  2189                           ; 2 bytes @ 0x1
  2190  0071                     	ds	1
  2191  0072                     ??i1_sampling:	
  2192  0072                     i1___lwdiv@dividend:	
  2193                           ; 1 bytes @ 0x2
  2194                           
  2195                           
  2196                           ; 2 bytes @ 0x2
  2197  0072                     	ds	1
  2198  0073                     ??i1_USARTWriteString:	
  2199                           
  2200                           ; 1 bytes @ 0x3
  2201  0073                     	ds	1
  2202  0074                     ??i1___lwdiv:	
  2203  0074                     USARTHandleRxInt@data:	
  2204                           ; 1 bytes @ 0x4
  2205                           
  2206                           
  2207                           ; 1 bytes @ 0x4
  2208  0074                     	ds	1
  2209  0075                     i1___lwdiv@quotient:	
  2210                           
  2211                           ; 2 bytes @ 0x5
  2212  0075                     	ds	2
  2213  0077                     i1___lwdiv@counter:	
  2214                           
  2215                           ; 1 bytes @ 0x7
  2216  0077                     	ds	1
  2217  0078                     ?i1___lwmod:	
  2218  0078                     i1___lwmod@divisor:	
  2219                           ; 2 bytes @ 0x8
  2220                           
  2221                           
  2222                           ; 2 bytes @ 0x8
  2223  0078                     	ds	2
  2224  007A                     i1___lwmod@dividend:	
  2225                           
  2226                           ; 2 bytes @ 0xA
  2227  007A                     	ds	2
  2228  007C                     ??i1___lwmod:	
  2229                           
  2230                           ; 1 bytes @ 0xC
  2231  007C                     	ds	1
  2232  007D                     i1___lwmod@counter:	
  2233                           
  2234                           ; 1 bytes @ 0xD
  2235  007D                     	ds	1
  2236  007E                     ??i1_acquire:	
  2237                           
  2238                           	psect	cstackBANK0
  2239  0020                     __pcstackBANK0:	
  2240                           ; 1 bytes @ 0xE
  2241                           
  2242  0020                     ?i1_sprintf:	
  2243  0020                     i1sprintf@f:	
  2244                           ; 2 bytes @ 0x0
  2245                           
  2246                           
  2247                           ; 2 bytes @ 0x0
  2248  0020                     	ds	4
  2249  0024                     ??i1_sprintf:	
  2250                           
  2251                           ; 1 bytes @ 0x4
  2252  0024                     	ds	3
  2253  0027                     i1sprintf@ap:	
  2254                           
  2255                           ; 1 bytes @ 0x7
  2256  0027                     	ds	1
  2257  0028                     i1sprintf@flag:	
  2258                           
  2259                           ; 1 bytes @ 0x8
  2260  0028                     	ds	1
  2261  0029                     i1sprintf@prec:	
  2262                           
  2263                           ; 1 bytes @ 0x9
  2264  0029                     	ds	1
  2265  002A                     i1sprintf@val:	
  2266                           
  2267                           ; 2 bytes @ 0xA
  2268  002A                     	ds	2
  2269  002C                     i1sprintf@sp:	
  2270                           
  2271                           ; 1 bytes @ 0xC
  2272  002C                     	ds	1
  2273  002D                     i1sprintf@c:	
  2274                           
  2275                           ; 1 bytes @ 0xD
  2276  002D                     	ds	1
  2277  002E                     i1acquire@valueAD:	
  2278                           
  2279                           ; 2 bytes @ 0xE
  2280  002E                     	ds	2
  2281  0030                     ??_ISR:	
  2282                           
  2283                           ; 1 bytes @ 0x10
  2284  0030                     	ds	5
  2285  0035                     ?_strcpy:	
  2286  0035                     ?_strcat:	
  2287                           ; 1 bytes @ 0x15
  2288                           
  2289  0035                     ??_isdigit:	
  2290                           ; 1 bytes @ 0x15
  2291                           
  2292  0035                     ?_USARTInit:	
  2293                           ; 1 bytes @ 0x15
  2294                           
  2295  0035                     ??_USARTWriteChar:	
  2296                           ; 1 bytes @ 0x15
  2297                           
  2298  0035                     ??_USARTReadData:	
  2299                           ; 1 bytes @ 0x15
  2300                           
  2301  0035                     ??_USARTDataAvailable:	
  2302                           ; 1 bytes @ 0x15
  2303                           
  2304  0035                     ??_init:	
  2305                           ; 1 bytes @ 0x15
  2306                           
  2307  0035                     ?_memcmp:	
  2308                           ; 1 bytes @ 0x15
  2309                           
  2310  0035                     ?_strlen:	
  2311                           ; 2 bytes @ 0x15
  2312                           
  2313  0035                     ?_strchr:	
  2314                           ; 2 bytes @ 0x15
  2315                           
  2316  0035                     ?_sampling:	
  2317                           ; 2 bytes @ 0x15
  2318                           
  2319  0035                     ?___wmul:	
  2320                           ; 2 bytes @ 0x15
  2321                           
  2322  0035                     ?___lwdiv:	
  2323                           ; 2 bytes @ 0x15
  2324                           
  2325  0035                     ?___ftpack:	
  2326                           ; 2 bytes @ 0x15
  2327                           
  2328  0035                     ?___lmul:	
  2329                           ; 3 bytes @ 0x15
  2330                           
  2331  0035                     USARTWriteChar@ch:	
  2332                           ; 4 bytes @ 0x15
  2333                           
  2334  0035                     _isdigit$852:	
  2335                           ; 1 bytes @ 0x15
  2336                           
  2337  0035                     USARTInit@baud_rate:	
  2338                           ; 1 bytes @ 0x15
  2339                           
  2340  0035                     ___wmul@multiplier:	
  2341                           ; 2 bytes @ 0x15
  2342                           
  2343  0035                     ___lwdiv@divisor:	
  2344                           ; 2 bytes @ 0x15
  2345                           
  2346  0035                     memcmp@s2:	
  2347                           ; 2 bytes @ 0x15
  2348                           
  2349  0035                     strcat@from:	
  2350                           ; 2 bytes @ 0x15
  2351                           
  2352  0035                     strcpy@from:	
  2353                           ; 2 bytes @ 0x15
  2354                           
  2355  0035                     strlen@s:	
  2356                           ; 2 bytes @ 0x15
  2357                           
  2358  0035                     strchr@ptr:	
  2359                           ; 2 bytes @ 0x15
  2360                           
  2361  0035                     ___ftpack@arg:	
  2362                           ; 2 bytes @ 0x15
  2363                           
  2364  0035                     ___lmul@multiplier:	
  2365                           ; 3 bytes @ 0x15
  2366                           
  2367                           
  2368                           ; 4 bytes @ 0x15
  2369  0035                     	ds	1
  2370  0036                     ?_USARTWriteString:	
  2371  0036                     ??_USARTGotoNewLine:	
  2372                           ; 1 bytes @ 0x16
  2373                           
  2374  0036                     USARTReadData@data:	
  2375                           ; 1 bytes @ 0x16
  2376                           
  2377  0036                     isdigit@c:	
  2378                           ; 1 bytes @ 0x16
  2379                           
  2380  0036                     USARTWriteString@str:	
  2381                           ; 1 bytes @ 0x16
  2382                           
  2383                           
  2384                           ; 2 bytes @ 0x16
  2385  0036                     	ds	1
  2386  0037                     ??_strlen:	
  2387  0037                     ??_strcpy:	
  2388                           ; 1 bytes @ 0x17
  2389                           
  2390  0037                     ??_strcat:	
  2391                           ; 1 bytes @ 0x17
  2392                           
  2393  0037                     ??_USARTInit:	
  2394                           ; 1 bytes @ 0x17
  2395                           
  2396  0037                     ??_sampling:	
  2397                           ; 1 bytes @ 0x17
  2398                           
  2399  0037                     ___wmul@multiplicand:	
  2400                           ; 1 bytes @ 0x17
  2401                           
  2402  0037                     ___lwdiv@dividend:	
  2403                           ; 2 bytes @ 0x17
  2404                           
  2405  0037                     memcmp@n:	
  2406                           ; 2 bytes @ 0x17
  2407                           
  2408  0037                     strchr@chr:	
  2409                           ; 2 bytes @ 0x17
  2410                           
  2411                           
  2412                           ; 2 bytes @ 0x17
  2413  0037                     	ds	1
  2414  0038                     ??_USARTWriteString:	
  2415  0038                     ?_USARTWriteLine:	
  2416                           ; 1 bytes @ 0x18
  2417                           
  2418  0038                     ___ftpack@exp:	
  2419                           ; 1 bytes @ 0x18
  2420                           
  2421  0038                     strcat@to:	
  2422                           ; 1 bytes @ 0x18
  2423                           
  2424  0038                     strcpy@to:	
  2425                           ; 1 bytes @ 0x18
  2426                           
  2427  0038                     USARTWriteLine@str:	
  2428                           ; 1 bytes @ 0x18
  2429                           
  2430                           
  2431                           ; 2 bytes @ 0x18
  2432  0038                     	ds	1
  2433  0039                     ??_memcmp:	
  2434  0039                     ??_strchr:	
  2435                           ; 1 bytes @ 0x19
  2436                           
  2437  0039                     ??___wmul:	
  2438                           ; 1 bytes @ 0x19
  2439                           
  2440  0039                     ??___lwdiv:	
  2441                           ; 1 bytes @ 0x19
  2442                           
  2443  0039                     ___ftpack@sign:	
  2444                           ; 1 bytes @ 0x19
  2445                           
  2446  0039                     strcat@cp:	
  2447                           ; 1 bytes @ 0x19
  2448                           
  2449  0039                     strcpy@cp:	
  2450                           ; 1 bytes @ 0x19
  2451                           
  2452  0039                     ___wmul@product:	
  2453                           ; 1 bytes @ 0x19
  2454                           
  2455  0039                     strlen@cp:	
  2456                           ; 2 bytes @ 0x19
  2457                           
  2458  0039                     ___lmul@multiplicand:	
  2459                           ; 2 bytes @ 0x19
  2460                           
  2461                           
  2462                           ; 4 bytes @ 0x19
  2463  0039                     	ds	1
  2464  003A                     ??_help:	
  2465  003A                     ??___ftpack:	
  2466                           ; 1 bytes @ 0x1A
  2467                           
  2468  003A                     ??_USARTWriteLine:	
  2469                           ; 1 bytes @ 0x1A
  2470                           
  2471  003A                     ___lwdiv@counter:	
  2472                           ; 1 bytes @ 0x1A
  2473                           
  2474                           
  2475                           ; 1 bytes @ 0x1A
  2476  003A                     	ds	1
  2477  003B                     ?_srand:	
  2478  003B                     ?_strcspn:	
  2479                           ; 1 bytes @ 0x1B
  2480                           
  2481  003B                     ?_atoi:	
  2482                           ; 2 bytes @ 0x1B
  2483                           
  2484  003B                     memcmp@s1:	
  2485                           ; 2 bytes @ 0x1B
  2486                           
  2487  003B                     ___lwdiv@quotient:	
  2488                           ; 1 bytes @ 0x1B
  2489                           
  2490  003B                     srand@x:	
  2491                           ; 2 bytes @ 0x1B
  2492                           
  2493  003B                     strcspn@s2:	
  2494                           ; 2 bytes @ 0x1B
  2495                           
  2496                           
  2497                           ; 2 bytes @ 0x1B
  2498  003B                     	ds	2
  2499  003D                     ??_strcspn:	
  2500  003D                     ??_atoi:	
  2501                           ; 1 bytes @ 0x1D
  2502                           
  2503  003D                     ??_srand:	
  2504                           ; 1 bytes @ 0x1D
  2505                           
  2506  003D                     ??___lmul:	
  2507                           ; 1 bytes @ 0x1D
  2508                           
  2509  003D                     ?___awtoft:	
  2510                           ; 1 bytes @ 0x1D
  2511                           
  2512  003D                     ___awtoft@c:	
  2513                           ; 3 bytes @ 0x1D
  2514                           
  2515                           
  2516                           ; 2 bytes @ 0x1D
  2517  003D                     	ds	1
  2518  003E                     ___lmul@product:	
  2519                           
  2520                           ; 4 bytes @ 0x1E
  2521  003E                     	ds	1
  2522  003F                     atoi@sign:	
  2523  003F                     strcspn@i:	
  2524                           ; 1 bytes @ 0x1F
  2525                           
  2526                           
  2527                           ; 2 bytes @ 0x1F
  2528  003F                     	ds	1
  2529  0040                     ??___awtoft:	
  2530  0040                     atoi@a:	
  2531                           ; 1 bytes @ 0x20
  2532                           
  2533                           
  2534                           ; 2 bytes @ 0x20
  2535  0040                     	ds	1
  2536  0041                     strcspn@s1:	
  2537                           
  2538                           ; 1 bytes @ 0x21
  2539  0041                     	ds	1
  2540  0042                     ?_rand:	
  2541  0042                     atoi@s:	
  2542                           ; 2 bytes @ 0x22
  2543                           
  2544  0042                     ___awtoft@sign:	
  2545                           ; 1 bytes @ 0x22
  2546                           
  2547                           
  2548                           ; 1 bytes @ 0x22
  2549  0042                     	ds	1
  2550  0043                     ?___ftdiv:	
  2551  0043                     ?___ftmul:	
  2552                           ; 3 bytes @ 0x23
  2553                           
  2554  0043                     ___ftdiv@f2:	
  2555                           ; 3 bytes @ 0x23
  2556                           
  2557  0043                     ___ftmul@f1:	
  2558                           ; 3 bytes @ 0x23
  2559                           
  2560                           
  2561                           ; 3 bytes @ 0x23
  2562  0043                     	ds	1
  2563  0044                     ??_rand:	
  2564                           
  2565                           ; 1 bytes @ 0x24
  2566  0044                     	ds	2
  2567  0046                     ___ftdiv@f1:	
  2568  0046                     ___ftmul@f2:	
  2569                           ; 3 bytes @ 0x26
  2570                           
  2571                           
  2572                           ; 3 bytes @ 0x26
  2573  0046                     	ds	3
  2574  0049                     ??_stop:	
  2575  0049                     ??___awmod:	
  2576                           ; 1 bytes @ 0x29
  2577                           
  2578  0049                     ??___lwmod:	
  2579                           ; 1 bytes @ 0x29
  2580                           
  2581                           
  2582                           ; 1 bytes @ 0x29
  2583  0049                     	ds	1
  2584  004A                     ??_acquire:	
  2585  004A                     ??_step:	
  2586                           ; 1 bytes @ 0x2A
  2587                           
  2588  004A                     ??_run:	
  2589                           ; 1 bytes @ 0x2A
  2590                           
  2591  004A                     ??_status:	
  2592                           ; 1 bytes @ 0x2A
  2593                           
  2594  004A                     ??_adReadA0:	
  2595                           ; 1 bytes @ 0x2A
  2596                           
  2597  004A                     ??_main:	
  2598                           ; 1 bytes @ 0x2A
  2599                           
  2600                           
  2601                           	psect	maintext
  2602  1E45                     __pmaintext:	
  2603                           ; 1 bytes @ 0x2A
  2604 ;;
  2605 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2606 ;;
  2607 ;; *************** function _main *****************
  2608 ;; Defined at:
  2609 ;;		line 128 in file "main.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : B00/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2623 ;;      Params:         0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels required when called:   11
  2629 ;; This function calls:
  2630 ;;		_USARTInit
  2631 ;;		_USARTWriteString
  2632 ;;		_getData
  2633 ;;		_help
  2634 ;;		_init
  2635 ;;		_stop
  2636 ;; This function is called by:
  2637 ;;		Startup code after reset
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           
  2642                           ;psect for function _main
  2643  1E45                     _main:	
  2644                           
  2645                           ;main.c: 130: USARTInit(19200);
  2646                           
  2647                           ;incstack = 0
  2648 ;; hardware stack exceeded
  2649                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2650  1E45  3000               	movlw	0
  2651  1E46  1283               	bcf	3,5	;RP0=0, select bank0
  2652  1E47  1303               	bcf	3,6	;RP1=0, select bank0
  2653  1E48  00B5               	movwf	USARTInit@baud_rate
  2654  1E49  304B               	movlw	75
  2655  1E4A  00B6               	movwf	USARTInit@baud_rate+1
  2656  1E4B  160A  118A  2176  160A  158A  	fcall	_USARTInit
  2657                           
  2658                           ;main.c: 132: init();
  2659  1E50  160A  158A  26DA  160A  158A  	fcall	_init
  2660                           
  2661                           ;main.c: 134: pwm=0;
  2662  1E55  1683               	bsf	3,5	;RP0=1, select bank1
  2663  1E56  1303               	bcf	3,6	;RP1=0, select bank1
  2664  1E57  01CE               	clrf	_pwm^(0+128)
  2665  1E58  01CF               	clrf	(_pwm+1)^(0+128)
  2666                           
  2667                           ;main.c: 136: buffer = 0;
  2668  1E59  01D0               	clrf	_buffer^(0+128)
  2669                           
  2670                           ;main.c: 138: stop();
  2671  1E5A  160A  158A  2472  160A  158A  	fcall	_stop
  2672                           
  2673                           ;main.c: 140: help();
  2674  1E5F  120A  158A  2232  160A  158A  	fcall	_help
  2675                           
  2676                           ;main.c: 141: USARTWriteString(">");
  2677  1E64  3058               	movlw	low (STR_1| (0+32768))
  2678  1E65  1283               	bcf	3,5	;RP0=0, select bank0
  2679  1E66  1303               	bcf	3,6	;RP1=0, select bank0
  2680  1E67  00B6               	movwf	USARTWriteString@str
  2681  1E68  3086               	movlw	high (STR_1| (0+32768))
  2682  1E69  00B7               	movwf	USARTWriteString@str+1
  2683  1E6A  160A  158A  25CE  160A  158A  	fcall	_USARTWriteString
  2684  1E6F                     l4651:	
  2685                           ;main.c: 143: while(1)
  2686                           
  2687                           
  2688                           ;main.c: 144: {
  2689                           ;main.c: 146: getData();
  2690  1E6F  160A  118A  22A8  160A  158A  	fcall	_getData
  2691  1E74  2E6F               	goto	l4651
  2692  1E75                     __end_of_main:	
  2693                           ;main.c: 147: }
  2694                           ;main.c: 148: return;
  2695                           
  2696                           
  2697                           	psect	text1
  2698  1EDA                     __ptext1:	
  2699 ;; *************** function _init *****************
  2700 ;; Defined at:
  2701 ;;		line 70 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      void 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2715 ;;      Params:         0       0       0       0       0
  2716 ;;      Locals:         0       0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0
  2718 ;;      Totals:         0       0       0       0       0
  2719 ;;Total ram usage:        0 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    4
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function _init
  2731  1EDA                     _init:	
  2732                           
  2733                           ;main.c: 72: TRISA = 0b00000001;
  2734                           
  2735                           ;incstack = 0
  2736                           ; Regs used in _init: [wreg+status,2]
  2737  1EDA  3001               	movlw	1
  2738  1EDB  1683               	bsf	3,5	;RP0=1, select bank1
  2739  1EDC  1303               	bcf	3,6	;RP1=0, select bank1
  2740  1EDD  0085               	movwf	5	;volatile
  2741                           
  2742                           ;main.c: 73: PORTA = 0b00000000;
  2743  1EDE  1283               	bcf	3,5	;RP0=0, select bank0
  2744  1EDF  1303               	bcf	3,6	;RP1=0, select bank0
  2745  1EE0  0185               	clrf	5	;volatile
  2746                           
  2747                           ;main.c: 74: TRISB = 0b00000001;
  2748  1EE1  3001               	movlw	1
  2749  1EE2  1683               	bsf	3,5	;RP0=1, select bank1
  2750  1EE3  1303               	bcf	3,6	;RP1=0, select bank1
  2751  1EE4  0086               	movwf	6	;volatile
  2752                           
  2753                           ;main.c: 75: PORTB = 0b00000000;
  2754  1EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2755  1EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2756  1EE7  0186               	clrf	6	;volatile
  2757                           
  2758                           ;main.c: 76: TRISC = 0b10000000;
  2759  1EE8  3080               	movlw	128
  2760  1EE9  1683               	bsf	3,5	;RP0=1, select bank1
  2761  1EEA  1303               	bcf	3,6	;RP1=0, select bank1
  2762  1EEB  0087               	movwf	7	;volatile
  2763                           
  2764                           ;main.c: 77: PORTC = 0b00000000;
  2765  1EEC  1283               	bcf	3,5	;RP0=0, select bank0
  2766  1EED  1303               	bcf	3,6	;RP1=0, select bank0
  2767  1EEE  0187               	clrf	7	;volatile
  2768                           
  2769                           ;main.c: 78: TRISD = 0b00000000;
  2770  1EEF  1683               	bsf	3,5	;RP0=1, select bank1
  2771  1EF0  1303               	bcf	3,6	;RP1=0, select bank1
  2772  1EF1  0188               	clrf	8	;volatile
  2773                           
  2774                           ;main.c: 79: PORTD = 0b00000000;
  2775  1EF2  1283               	bcf	3,5	;RP0=0, select bank0
  2776  1EF3  1303               	bcf	3,6	;RP1=0, select bank0
  2777  1EF4  0188               	clrf	8	;volatile
  2778                           
  2779                           ;main.c: 82: ADCON0 = 0b10000001;
  2780  1EF5  3081               	movlw	129
  2781  1EF6  009F               	movwf	31	;volatile
  2782                           
  2783                           ;main.c: 83: ADCON1 = 0b10001110;
  2784  1EF7  308E               	movlw	142
  2785  1EF8  1683               	bsf	3,5	;RP0=1, select bank1
  2786  1EF9  1303               	bcf	3,6	;RP1=0, select bank1
  2787  1EFA  009F               	movwf	31	;volatile
  2788                           
  2789                           ;main.c: 86: OPTION_REG = 0b10000111;
  2790  1EFB  3087               	movlw	135
  2791  1EFC  0081               	movwf	1	;volatile
  2792                           
  2793                           ;main.c: 87: INTCON = 0b10110000;
  2794  1EFD  30B0               	movlw	176
  2795  1EFE  008B               	movwf	11	;volatile
  2796                           
  2797                           ;main.c: 89: TMR0 = 236;
  2798  1EFF  30EC               	movlw	236
  2799  1F00  1283               	bcf	3,5	;RP0=0, select bank0
  2800  1F01  1303               	bcf	3,6	;RP1=0, select bank0
  2801  1F02  0081               	movwf	1	;volatile
  2802                           
  2803                           ;main.c: 92: CCPR1L = 0b00000000;
  2804  1F03  0195               	clrf	21	;volatile
  2805                           
  2806                           ;main.c: 93: CCP1CON = 0b00001100;
  2807  1F04  300C               	movlw	12
  2808  1F05  0097               	movwf	23	;volatile
  2809                           
  2810                           ;main.c: 94: CCP2CON = 0b00001100;
  2811  1F06  300C               	movlw	12
  2812  1F07  009D               	movwf	29	;volatile
  2813                           
  2814                           ;main.c: 95: PR2 = 255;
  2815  1F08  30FF               	movlw	255
  2816  1F09  1683               	bsf	3,5	;RP0=1, select bank1
  2817  1F0A  1303               	bcf	3,6	;RP1=0, select bank1
  2818  1F0B  0092               	movwf	18	;volatile
  2819                           
  2820                           ;main.c: 96: T2CON = 0b00000111;
  2821  1F0C  3007               	movlw	7
  2822  1F0D  1283               	bcf	3,5	;RP0=0, select bank0
  2823  1F0E  1303               	bcf	3,6	;RP1=0, select bank0
  2824  1F0F  0092               	movwf	18	;volatile
  2825  1F10  0008               	return
  2826  1F11                     __end_of_init:	
  2827                           
  2828                           	psect	text2
  2829  12A8                     __ptext2:	
  2830 ;; *************** function _getData *****************
  2831 ;; Defined at:
  2832 ;;		line 200 in file "main.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;  i               2   44[BANK1 ] int 
  2837 ;;  data            1   43[BANK1 ] unsigned char 
  2838 ;;  n               1   42[BANK1 ] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2848 ;;      Params:         0       0       0       0       0
  2849 ;;      Locals:         0       0       4       0       0
  2850 ;;      Temps:          0       0       1       0       0
  2851 ;;      Totals:         0       0       5       0       0
  2852 ;;Total ram usage:        5 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:   10
  2855 ;; This function calls:
  2856 ;;		_USARTDataAvailable
  2857 ;;		_USARTReadData
  2858 ;;		_USARTWriteChar
  2859 ;;		_choice
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _getData
  2867  12A8                     _getData:	
  2868                           
  2869                           ;main.c: 202: uint8_t n= USARTDataAvailable();
  2870                           
  2871                           ;incstack = 0
  2872 ;; hardware stack exceeded
  2873                           ; Regs used in _getData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2874  12A8  160A  158A  2564  160A  118A  	fcall	_USARTDataAvailable
  2875  12AD  1683               	bsf	3,5	;RP0=1, select bank1
  2876  12AE  1303               	bcf	3,6	;RP1=0, select bank1
  2877  12AF  00C9               	movwf	??_getData^(0+128)
  2878  12B0  0849               	movf	??_getData^(0+128),w
  2879  12B1  00CA               	movwf	getData@n^(0+128)
  2880                           
  2881                           ;main.c: 204: if(n!=0){
  2882  12B2  084A               	movf	getData@n^(0+128),w
  2883  12B3  1903               	btfsc	3,2
  2884  12B4  0008               	return
  2885                           
  2886                           ;main.c: 205: char data = USARTReadData();
  2887  12B5  160A  158A  251E  160A  118A  	fcall	_USARTReadData
  2888  12BA  1683               	bsf	3,5	;RP0=1, select bank1
  2889  12BB  1303               	bcf	3,6	;RP1=0, select bank1
  2890  12BC  00C9               	movwf	??_getData^(0+128)
  2891  12BD  0849               	movf	??_getData^(0+128),w
  2892  12BE  00CB               	movwf	getData@data^(0+128)
  2893                           
  2894                           ;main.c: 207: if(data == '\r'){
  2895  12BF  300D               	movlw	13
  2896  12C0  064B               	xorwf	getData@data^(0+128),w
  2897  12C1  1D03               	btfss	3,2
  2898  12C2  2AE6               	goto	l4527
  2899                           
  2900                           ;main.c: 208: choice();
  2901  12C3  120A  158A  23DE  160A  118A  	fcall	_choice
  2902                           
  2903                           ;main.c: 210: buffer = 0;
  2904  12C8  1683               	bsf	3,5	;RP0=1, select bank1
  2905  12C9  1303               	bcf	3,6	;RP1=0, select bank1
  2906  12CA  01D0               	clrf	_buffer^(0+128)
  2907                           
  2908                           ;main.c: 211: for(int i=0 ; i<25;i++){
  2909  12CB  01CC               	clrf	getData@i^(0+128)
  2910  12CC  01CD               	clrf	(getData@i+1)^(0+128)
  2911  12CD                     L1:	
  2912  12CD  084D               	movf	(getData@i+1)^(0+128),w
  2913  12CE  3A80               	xorlw	128
  2914  12CF  00FF               	movwf	127
  2915  12D0  3080               	movlw	128
  2916  12D1  027F               	subwf	127,w
  2917  12D2  1D03               	skipz
  2918  12D3  2AD6               	goto	u5605
  2919  12D4  3019               	movlw	25
  2920  12D5  024C               	subwf	getData@i^(0+128),w
  2921  12D6                     u5605:	
  2922  12D6  1803               	btfsc	3,0
  2923  12D7  0008               	return
  2924                           
  2925                           ;main.c: 212: content[i] = '\0';
  2926  12D8  1683               	bsf	3,5	;RP0=1, select bank1
  2927  12D9  1303               	bcf	3,6	;RP1=0, select bank1
  2928  12DA  084C               	movf	getData@i^(0+128),w
  2929  12DB  3ED1               	addlw	(low (_content| 0))& (0+255)
  2930  12DC  0084               	movwf	4
  2931  12DD  1383               	bcf	3,7	;select IRP bank1
  2932  12DE  0180               	clrf	0
  2933  12DF  3001               	movlw	1
  2934  12E0  07CC               	addwf	getData@i^(0+128),f
  2935  12E1  1803               	skipnc
  2936  12E2  0ACD               	incf	(getData@i+1)^(0+128),f
  2937  12E3  3000               	movlw	0
  2938  12E4  07CD               	addwf	(getData@i+1)^(0+128),f
  2939  12E5  2ACD               	goto	L1
  2940  12E6                     l4527:	
  2941                           ;main.c: 213: }
  2942                           ;main.c: 214: }
  2943                           
  2944                           
  2945                           ;main.c: 215: else{
  2946                           ;main.c: 217: content[buffer] = data;
  2947  12E6  1683               	bsf	3,5	;RP0=1, select bank1
  2948  12E7  1303               	bcf	3,6	;RP1=0, select bank1
  2949  12E8  084B               	movf	getData@data^(0+128),w
  2950  12E9  00C9               	movwf	??_getData^(0+128)
  2951  12EA  0850               	movf	_buffer^(0+128),w
  2952  12EB  3ED1               	addlw	(low (_content| 0))& (0+255)
  2953  12EC  0084               	movwf	4
  2954  12ED  0849               	movf	??_getData^(0+128),w
  2955  12EE  1383               	bcf	3,7	;select IRP bank1
  2956  12EF  0080               	movwf	0
  2957                           
  2958                           ;main.c: 219: USARTWriteChar(content[buffer]);
  2959  12F0  0850               	movf	_buffer^(0+128),w
  2960  12F1  3ED1               	addlw	(low (_content| 0))& (0+255)
  2961  12F2  0084               	movwf	4
  2962  12F3  0800               	movf	0,w
  2963  12F4  160A  158A  2457   	fcall	_USARTWriteChar
  2964                           
  2965                           ;main.c: 221: buffer++;
  2966  12F7  3001               	movlw	1
  2967  12F8  1683               	bsf	3,5	;RP0=1, select bank1
  2968  12F9  1303               	bcf	3,6	;RP1=0, select bank1
  2969  12FA  00C9               	movwf	??_getData^(0+128)
  2970  12FB  0849               	movf	??_getData^(0+128),w
  2971  12FC  07D0               	addwf	_buffer^(0+128),f
  2972  12FD  0008               	return
  2973  12FE                     __end_of_getData:	
  2974                           
  2975                           	psect	text3
  2976  0BDE                     __ptext3:	
  2977 ;; *************** function _choice *****************
  2978 ;; Defined at:
  2979 ;;		line 226 in file "main.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;		None
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  i               2   22[BANK2 ] int 
  2984 ;;  i               2   20[BANK2 ] int 
  2985 ;;  i               2   24[BANK2 ] int 
  2986 ;;  duty           10   52[BANK3 ] unsigned char [10]
  2987 ;;  firstP          2   14[BANK2 ] int 
  2988 ;;  secondP         2   66[BANK3 ] int 
  2989 ;;  duty           10   42[BANK3 ] unsigned char [10]
  2990 ;;  firstP          2   12[BANK2 ] int 
  2991 ;;  secondP         2   64[BANK3 ] int 
  2992 ;;  time           10    0[BANK2 ] unsigned char [10]
  2993 ;;  duty           10   32[BANK3 ] unsigned char [10]
  2994 ;;  secondP         2   18[BANK2 ] int 
  2995 ;;  duty_i          2   16[BANK2 ] int 
  2996 ;;  firstP          2   10[BANK2 ] int 
  2997 ;;  time_1          2   68[BANK3 ] int 
  2998 ;;  thirdP          2   62[BANK3 ] int 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3008 ;;      Params:         0       0       0       0       0
  3009 ;;      Locals:         0       0       0      38      26
  3010 ;;      Temps:          0       0       5       0       0
  3011 ;;      Totals:         0       0       5      38      26
  3012 ;;Total ram usage:       69 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    9
  3015 ;; This function calls:
  3016 ;;		_USARTGotoNewLine
  3017 ;;		_USARTWriteLine
  3018 ;;		_USARTWriteString
  3019 ;;		_acquire
  3020 ;;		_atoi
  3021 ;;		_help
  3022 ;;		_memcmp
  3023 ;;		_run
  3024 ;;		_status
  3025 ;;		_step
  3026 ;;		_stop
  3027 ;;		_strcspn
  3028 ;;		_strlen
  3029 ;;		_sys
  3030 ;; This function is called by:
  3031 ;;		_getData
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           
  3036                           ;psect for function _choice
  3037  0BDE                     _choice:	
  3038                           
  3039                           ;main.c: 227: if(memcmp(content, "step(", 5) == 0){
  3040                           
  3041                           ;incstack = 0
  3042 ;; hardware stack exceeded
  3043                           ; Regs used in _choice: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3044  0BDE  3041               	movlw	low (STR_36| (0+32768))
  3045  0BDF  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0BE0  1303               	bcf	3,6	;RP1=0, select bank0
  3047  0BE1  00B5               	movwf	memcmp@s2
  3048  0BE2  3086               	movlw	high (STR_36| (0+32768))
  3049  0BE3  00B6               	movwf	memcmp@s2+1
  3050  0BE4  3005               	movlw	5
  3051  0BE5  00B7               	movwf	memcmp@n
  3052  0BE6  3000               	movlw	0
  3053  0BE7  00B8               	movwf	memcmp@n+1
  3054  0BE8  30D1               	movlw	(low (_content| 0))& (0+255)
  3055  0BE9  160A  118A  2061  120A  158A  	fcall	_memcmp
  3056  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  3057  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  3058  0BF0  0835               	movf	?_memcmp,w
  3059  0BF1  0436               	iorwf	?_memcmp+1,w
  3060  0BF2  1D03               	btfss	3,2
  3061  0BF3  2D96               	goto	l4431
  3062                           
  3063                           ;main.c: 228: char duty[10];
  3064                           ;main.c: 229: char time[10];
  3065                           ;main.c: 230: int firstP = strcspn(content, "(");
  3066  0BF4  304A               	movlw	low ((STR_40+3)| (0+32768))
  3067  0BF5  00BB               	movwf	strcspn@s2
  3068  0BF6  3086               	movlw	high ((STR_40+3)| (0+32768))
  3069  0BF7  00BC               	movwf	strcspn@s2+1
  3070  0BF8  30D1               	movlw	(low (_content| 0))& (0+255)
  3071  0BF9  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3072  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0C00  083C               	movf	?_strcspn+1,w
  3075  0C01  1283               	bcf	3,5	;RP0=0, select bank2
  3076  0C02  1703               	bsf	3,6	;RP1=1, select bank2
  3077  0C03  00DB               	movwf	(choice@firstP+1)^(0+256)
  3078  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  3079  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  3080  0C06  083B               	movf	?_strcspn,w
  3081  0C07  1283               	bcf	3,5	;RP0=0, select bank2
  3082  0C08  1703               	bsf	3,6	;RP1=1, select bank2
  3083  0C09  00DA               	movwf	choice@firstP^(0+256)
  3084                           
  3085                           ;main.c: 231: int secondP = strcspn(content, ",");
  3086  0C0A  3056               	movlw	low (STR_38| (0+32768))
  3087  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0C0D  00BB               	movwf	strcspn@s2
  3090  0C0E  3086               	movlw	high (STR_38| (0+32768))
  3091  0C0F  00BC               	movwf	strcspn@s2+1
  3092  0C10  30D1               	movlw	(low (_content| 0))& (0+255)
  3093  0C11  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3094  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  3095  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  3096  0C18  083C               	movf	?_strcspn+1,w
  3097  0C19  1283               	bcf	3,5	;RP0=0, select bank2
  3098  0C1A  1703               	bsf	3,6	;RP1=1, select bank2
  3099  0C1B  00E3               	movwf	(choice@secondP+1)^(0+256)
  3100  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  3102  0C1E  083B               	movf	?_strcspn,w
  3103  0C1F  1283               	bcf	3,5	;RP0=0, select bank2
  3104  0C20  1703               	bsf	3,6	;RP1=1, select bank2
  3105  0C21  00E2               	movwf	choice@secondP^(0+256)
  3106                           
  3107                           ;main.c: 232: int thirdP = strcspn(content, ")");
  3108  0C22  300E               	movlw	low ((STR_48+8)| (0+32768))
  3109  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  3110  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  3111  0C25  00BB               	movwf	strcspn@s2
  3112  0C26  3086               	movlw	high ((STR_48+8)| (0+32768))
  3113  0C27  00BC               	movwf	strcspn@s2+1
  3114  0C28  30D1               	movlw	(low (_content| 0))& (0+255)
  3115  0C29  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3116  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  3117  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  3118  0C30  083C               	movf	?_strcspn+1,w
  3119  0C31  1683               	bsf	3,5	;RP0=1, select bank3
  3120  0C32  1703               	bsf	3,6	;RP1=1, select bank3
  3121  0C33  00CF               	movwf	(choice@thirdP+1)^(0+384)
  3122  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0C36  083B               	movf	?_strcspn,w
  3125  0C37  1683               	bsf	3,5	;RP0=1, select bank3
  3126  0C38  1703               	bsf	3,6	;RP1=1, select bank3
  3127  0C39  00CE               	movwf	choice@thirdP^(0+384)
  3128                           
  3129                           ;main.c: 233: for(int i = 0 ; i<strlen(content); i++){
  3130  0C3A  1283               	bcf	3,5	;RP0=0, select bank2
  3131  0C3B  1703               	bsf	3,6	;RP1=1, select bank2
  3132  0C3C  01E8               	clrf	choice@i^(0+256)
  3133  0C3D  01E9               	clrf	(choice@i+1)^(0+256)
  3134  0C3E                     l4421:	
  3135  0C3E  30D1               	movlw	(low (_content| 0))& (0+255)
  3136  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  3138  0C41  00B5               	movwf	strlen@s
  3139  0C42  3000               	movlw	0
  3140  0C43  00B6               	movwf	strlen@s+1
  3141  0C44  160A  158A  2587  120A  158A  	fcall	_strlen
  3142  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  3143  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  3144  0C4B  0836               	movf	?_strlen+1,w
  3145  0C4C  1283               	bcf	3,5	;RP0=0, select bank2
  3146  0C4D  1703               	bsf	3,6	;RP1=1, select bank2
  3147  0C4E  0269               	subwf	(choice@i+1)^(0+256),w
  3148  0C4F  1D03               	skipz
  3149  0C50  2C57               	goto	u5435
  3150  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  3151  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  3152  0C53  0835               	movf	?_strlen,w
  3153  0C54  1283               	bcf	3,5	;RP0=0, select bank2
  3154  0C55  1703               	bsf	3,6	;RP1=1, select bank2
  3155  0C56  0268               	subwf	choice@i^(0+256),w
  3156  0C57                     u5435:	
  3157  0C57  1803               	btfsc	3,0
  3158  0C58  2D3C               	goto	l4423
  3159                           
  3160                           ;main.c: 234: if(i < secondP - firstP - 1){
  3161  0C59  085A               	movf	choice@firstP^(0+256),w
  3162  0C5A  3E01               	addlw	1
  3163  0C5B  1683               	bsf	3,5	;RP0=1, select bank1
  3164  0C5C  1303               	bcf	3,6	;RP1=0, select bank1
  3165  0C5D  00C4               	movwf	??_choice^(0+128)
  3166  0C5E  1283               	bcf	3,5	;RP0=0, select bank2
  3167  0C5F  1703               	bsf	3,6	;RP1=1, select bank2
  3168  0C60  085B               	movf	(choice@firstP+1)^(0+256),w
  3169  0C61  1803               	skipnc
  3170  0C62  3E01               	addlw	1
  3171  0C63  3E00               	addlw	0
  3172  0C64  1683               	bsf	3,5	;RP0=1, select bank1
  3173  0C65  1303               	bcf	3,6	;RP1=0, select bank1
  3174  0C66  00C5               	movwf	(??_choice+1)^(0+128)
  3175  0C67  09C4               	comf	??_choice^(0+128),f
  3176  0C68  09C5               	comf	(??_choice^(0+128)+1),f
  3177  0C69  0AC4               	incf	??_choice^(0+128),f
  3178  0C6A  1903               	skipnz
  3179  0C6B  0AC5               	incf	(??_choice^(0+128)+1),f
  3180  0C6C  1283               	bcf	3,5	;RP0=0, select bank2
  3181  0C6D  1703               	bsf	3,6	;RP1=1, select bank2
  3182  0C6E  0862               	movf	choice@secondP^(0+256),w
  3183  0C6F  1683               	bsf	3,5	;RP0=1, select bank1
  3184  0C70  1303               	bcf	3,6	;RP1=0, select bank1
  3185  0C71  0744               	addwf	??_choice^(0+128),w
  3186  0C72  00C6               	movwf	(??_choice+2)^(0+128)
  3187  0C73  1283               	bcf	3,5	;RP0=0, select bank2
  3188  0C74  1703               	bsf	3,6	;RP1=1, select bank2
  3189  0C75  0863               	movf	(choice@secondP+1)^(0+256),w
  3190  0C76  1803               	skipnc
  3191  0C77  0A63               	incf	(choice@secondP+1)^(0+256),w
  3192  0C78  1683               	bsf	3,5	;RP0=1, select bank1
  3193  0C79  1303               	bcf	3,6	;RP1=0, select bank1
  3194  0C7A  0745               	addwf	(??_choice+1)^(0+128),w
  3195  0C7B  00C7               	movwf	(??_choice+3)^(0+128)
  3196  0C7C  1283               	bcf	3,5	;RP0=0, select bank2
  3197  0C7D  1703               	bsf	3,6	;RP1=1, select bank2
  3198  0C7E  0869               	movf	(choice@i+1)^(0+256),w
  3199  0C7F  3A80               	xorlw	128
  3200  0C80  1683               	bsf	3,5	;RP0=1, select bank1
  3201  0C81  1303               	bcf	3,6	;RP1=0, select bank1
  3202  0C82  00C8               	movwf	(??_choice+4)^(0+128)
  3203  0C83  0847               	movf	(??_choice+3)^(0+128),w
  3204  0C84  3A80               	xorlw	128
  3205  0C85  0248               	subwf	(??_choice+4)^(0+128),w
  3206  0C86  1D03               	skipz
  3207  0C87  2C8C               	goto	u5395
  3208  0C88  0846               	movf	(??_choice+2)^(0+128),w
  3209  0C89  1283               	bcf	3,5	;RP0=0, select bank2
  3210  0C8A  1703               	bsf	3,6	;RP1=1, select bank2
  3211  0C8B  0268               	subwf	choice@i^(0+256),w
  3212  0C8C                     u5395:	
  3213  0C8C  1803               	skipnc
  3214  0C8D  2CA5               	goto	l4407
  3215                           
  3216                           ;main.c: 235: duty[i] = content[firstP+i+1];
  3217  0C8E  1283               	bcf	3,5	;RP0=0, select bank2
  3218  0C8F  1703               	bsf	3,6	;RP1=1, select bank2
  3219  0C90  0868               	movf	choice@i^(0+256),w
  3220  0C91  075A               	addwf	choice@firstP^(0+256),w
  3221  0C92  3E01               	addlw	1
  3222  0C93  3ED1               	addlw	(low (_content| 0))& (0+255)
  3223  0C94  0084               	movwf	4
  3224  0C95  1383               	bcf	3,7	;select IRP bank1
  3225  0C96  0800               	movf	0,w
  3226  0C97  1683               	bsf	3,5	;RP0=1, select bank1
  3227  0C98  1303               	bcf	3,6	;RP1=0, select bank1
  3228  0C99  00C4               	movwf	??_choice^(0+128)
  3229  0C9A  1283               	bcf	3,5	;RP0=0, select bank2
  3230  0C9B  1703               	bsf	3,6	;RP1=1, select bank2
  3231  0C9C  0868               	movf	choice@i^(0+256),w
  3232  0C9D  3EB0               	addlw	(low (choice@duty| (0+256)))& (0+255)
  3233  0C9E  0084               	movwf	4
  3234  0C9F  1683               	bsf	3,5	;RP0=1, select bank1
  3235  0CA0  1303               	bcf	3,6	;RP1=0, select bank1
  3236  0CA1  0844               	movf	??_choice^(0+128),w
  3237  0CA2  1783               	bsf	3,7	;select IRP bank3
  3238  0CA3  0080               	movwf	0
  3239                           
  3240                           ;main.c: 236: }
  3241  0CA4  2CC5               	goto	l4411
  3242  0CA5                     l4407:	
  3243                           
  3244                           ;main.c: 237: else if (i<strlen(duty)){
  3245  0CA5  30B0               	movlw	(low (choice@duty| (0+256)))& (0+255)
  3246  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0CA8  00B5               	movwf	strlen@s
  3249  0CA9  3001               	movlw	1
  3250  0CAA  00B6               	movwf	strlen@s+1
  3251  0CAB  160A  158A  2587  120A  158A  	fcall	_strlen
  3252  0CB0  1283               	bcf	3,5	;RP0=0, select bank0
  3253  0CB1  1303               	bcf	3,6	;RP1=0, select bank0
  3254  0CB2  0836               	movf	?_strlen+1,w
  3255  0CB3  1283               	bcf	3,5	;RP0=0, select bank2
  3256  0CB4  1703               	bsf	3,6	;RP1=1, select bank2
  3257  0CB5  0269               	subwf	(choice@i+1)^(0+256),w
  3258  0CB6  1D03               	skipz
  3259  0CB7  2CBE               	goto	u5405
  3260  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0CBA  0835               	movf	?_strlen,w
  3263  0CBB  1283               	bcf	3,5	;RP0=0, select bank2
  3264  0CBC  1703               	bsf	3,6	;RP1=1, select bank2
  3265  0CBD  0268               	subwf	choice@i^(0+256),w
  3266  0CBE                     u5405:	
  3267  0CBE  1803               	skipnc
  3268  0CBF  2CC5               	goto	l4411
  3269                           
  3270                           ;main.c: 238: duty[i] = '\0';
  3271  0CC0  0868               	movf	choice@i^(0+256),w
  3272  0CC1  3EB0               	addlw	(low (choice@duty| (0+256)))& (0+255)
  3273  0CC2  0084               	movwf	4
  3274  0CC3  1783               	bsf	3,7	;select IRP bank3
  3275  0CC4  0180               	clrf	0
  3276  0CC5                     l4411:	
  3277                           
  3278                           ;main.c: 239: }
  3279                           ;main.c: 240: if(i < thirdP - secondP - 1){
  3280  0CC5  1283               	bcf	3,5	;RP0=0, select bank2
  3281  0CC6  1703               	bsf	3,6	;RP1=1, select bank2
  3282  0CC7  0862               	movf	choice@secondP^(0+256),w
  3283  0CC8  3E01               	addlw	1
  3284  0CC9  1683               	bsf	3,5	;RP0=1, select bank1
  3285  0CCA  1303               	bcf	3,6	;RP1=0, select bank1
  3286  0CCB  00C4               	movwf	??_choice^(0+128)
  3287  0CCC  1283               	bcf	3,5	;RP0=0, select bank2
  3288  0CCD  1703               	bsf	3,6	;RP1=1, select bank2
  3289  0CCE  0863               	movf	(choice@secondP+1)^(0+256),w
  3290  0CCF  1803               	skipnc
  3291  0CD0  3E01               	addlw	1
  3292  0CD1  3E00               	addlw	0
  3293  0CD2  1683               	bsf	3,5	;RP0=1, select bank1
  3294  0CD3  1303               	bcf	3,6	;RP1=0, select bank1
  3295  0CD4  00C5               	movwf	(??_choice+1)^(0+128)
  3296  0CD5  09C4               	comf	??_choice^(0+128),f
  3297  0CD6  09C5               	comf	(??_choice^(0+128)+1),f
  3298  0CD7  0AC4               	incf	??_choice^(0+128),f
  3299  0CD8  1903               	skipnz
  3300  0CD9  0AC5               	incf	(??_choice^(0+128)+1),f
  3301  0CDA  1683               	bsf	3,5	;RP0=1, select bank3
  3302  0CDB  1703               	bsf	3,6	;RP1=1, select bank3
  3303  0CDC  084E               	movf	choice@thirdP^(0+384),w
  3304  0CDD  1683               	bsf	3,5	;RP0=1, select bank1
  3305  0CDE  1303               	bcf	3,6	;RP1=0, select bank1
  3306  0CDF  0744               	addwf	??_choice^(0+128),w
  3307  0CE0  00C6               	movwf	(??_choice+2)^(0+128)
  3308  0CE1  1683               	bsf	3,5	;RP0=1, select bank3
  3309  0CE2  1703               	bsf	3,6	;RP1=1, select bank3
  3310  0CE3  084F               	movf	(choice@thirdP+1)^(0+384),w
  3311  0CE4  1803               	skipnc
  3312  0CE5  0A4F               	incf	(choice@thirdP+1)^(0+384),w
  3313  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  3314  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  3315  0CE8  0745               	addwf	(??_choice+1)^(0+128),w
  3316  0CE9  00C7               	movwf	(??_choice+3)^(0+128)
  3317  0CEA  1283               	bcf	3,5	;RP0=0, select bank2
  3318  0CEB  1703               	bsf	3,6	;RP1=1, select bank2
  3319  0CEC  0869               	movf	(choice@i+1)^(0+256),w
  3320  0CED  3A80               	xorlw	128
  3321  0CEE  1683               	bsf	3,5	;RP0=1, select bank1
  3322  0CEF  1303               	bcf	3,6	;RP1=0, select bank1
  3323  0CF0  00C8               	movwf	(??_choice+4)^(0+128)
  3324  0CF1  0847               	movf	(??_choice+3)^(0+128),w
  3325  0CF2  3A80               	xorlw	128
  3326  0CF3  0248               	subwf	(??_choice+4)^(0+128),w
  3327  0CF4  1D03               	skipz
  3328  0CF5  2CFA               	goto	u5415
  3329  0CF6  0846               	movf	(??_choice+2)^(0+128),w
  3330  0CF7  1283               	bcf	3,5	;RP0=0, select bank2
  3331  0CF8  1703               	bsf	3,6	;RP1=1, select bank2
  3332  0CF9  0268               	subwf	choice@i^(0+256),w
  3333  0CFA                     u5415:	
  3334  0CFA  1803               	skipnc
  3335  0CFB  2D13               	goto	l4415
  3336                           
  3337                           ;main.c: 241: time[i] = content[secondP+i+1];
  3338  0CFC  1283               	bcf	3,5	;RP0=0, select bank2
  3339  0CFD  1703               	bsf	3,6	;RP1=1, select bank2
  3340  0CFE  0868               	movf	choice@i^(0+256),w
  3341  0CFF  0762               	addwf	choice@secondP^(0+256),w
  3342  0D00  3E01               	addlw	1
  3343  0D01  3ED1               	addlw	(low (_content| 0))& (0+255)
  3344  0D02  0084               	movwf	4
  3345  0D03  1383               	bcf	3,7	;select IRP bank1
  3346  0D04  0800               	movf	0,w
  3347  0D05  1683               	bsf	3,5	;RP0=1, select bank1
  3348  0D06  1303               	bcf	3,6	;RP1=0, select bank1
  3349  0D07  00C4               	movwf	??_choice^(0+128)
  3350  0D08  1283               	bcf	3,5	;RP0=0, select bank2
  3351  0D09  1703               	bsf	3,6	;RP1=1, select bank2
  3352  0D0A  0868               	movf	choice@i^(0+256),w
  3353  0D0B  3E50               	addlw	(low (choice@time| (0+256)))& (0+255)
  3354  0D0C  0084               	movwf	4
  3355  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  3356  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  3357  0D0F  0844               	movf	??_choice^(0+128),w
  3358  0D10  1783               	bsf	3,7	;select IRP bank2
  3359  0D11  0080               	movwf	0
  3360                           
  3361                           ;main.c: 242: }
  3362  0D12  2D33               	goto	l4419
  3363  0D13                     l4415:	
  3364                           
  3365                           ;main.c: 243: else if (i<strlen(time)){
  3366  0D13  3050               	movlw	(low (choice@time| (0+256)))& (0+255)
  3367  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0D16  00B5               	movwf	strlen@s
  3370  0D17  3001               	movlw	1
  3371  0D18  00B6               	movwf	strlen@s+1
  3372  0D19  160A  158A  2587  120A  158A  	fcall	_strlen
  3373  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  3374  0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  3375  0D20  0836               	movf	?_strlen+1,w
  3376  0D21  1283               	bcf	3,5	;RP0=0, select bank2
  3377  0D22  1703               	bsf	3,6	;RP1=1, select bank2
  3378  0D23  0269               	subwf	(choice@i+1)^(0+256),w
  3379  0D24  1D03               	skipz
  3380  0D25  2D2C               	goto	u5425
  3381  0D26  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0D27  1303               	bcf	3,6	;RP1=0, select bank0
  3383  0D28  0835               	movf	?_strlen,w
  3384  0D29  1283               	bcf	3,5	;RP0=0, select bank2
  3385  0D2A  1703               	bsf	3,6	;RP1=1, select bank2
  3386  0D2B  0268               	subwf	choice@i^(0+256),w
  3387  0D2C                     u5425:	
  3388  0D2C  1803               	skipnc
  3389  0D2D  2D33               	goto	l4419
  3390                           
  3391                           ;main.c: 244: time[i] = '\0';
  3392  0D2E  0868               	movf	choice@i^(0+256),w
  3393  0D2F  3E50               	addlw	(low (choice@time| (0+256)))& (0+255)
  3394  0D30  0084               	movwf	4
  3395  0D31  1783               	bsf	3,7	;select IRP bank2
  3396  0D32  0180               	clrf	0
  3397  0D33                     l4419:	
  3398  0D33  3001               	movlw	1
  3399  0D34  1283               	bcf	3,5	;RP0=0, select bank2
  3400  0D35  1703               	bsf	3,6	;RP1=1, select bank2
  3401  0D36  07E8               	addwf	choice@i^(0+256),f
  3402  0D37  1803               	skipnc
  3403  0D38  0AE9               	incf	(choice@i+1)^(0+256),f
  3404  0D39  3000               	movlw	0
  3405  0D3A  07E9               	addwf	(choice@i+1)^(0+256),f
  3406  0D3B  2C3E               	goto	l4421
  3407  0D3C                     l4423:	
  3408                           
  3409                           ;main.c: 245: }
  3410                           ;main.c: 246: }
  3411                           ;main.c: 247: int duty_i = atoi(duty);
  3412  0D3C  30B0               	movlw	(low (choice@duty| (0+256)))& (0+255)
  3413  0D3D  160A  118A  236C  120A  158A  	fcall	_atoi
  3414  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  3415  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  3416  0D44  083C               	movf	?_atoi+1,w
  3417  0D45  1283               	bcf	3,5	;RP0=0, select bank2
  3418  0D46  1703               	bsf	3,6	;RP1=1, select bank2
  3419  0D47  00E1               	movwf	(choice@duty_i+1)^(0+256)
  3420  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0D4A  083B               	movf	?_atoi,w
  3423  0D4B  1283               	bcf	3,5	;RP0=0, select bank2
  3424  0D4C  1703               	bsf	3,6	;RP1=1, select bank2
  3425  0D4D  00E0               	movwf	choice@duty_i^(0+256)
  3426                           
  3427                           ;main.c: 248: int time_1 = atoi(time);
  3428  0D4E  3050               	movlw	(low (choice@time| (0+256)))& (0+255)
  3429  0D4F  160A  118A  236C  120A  158A  	fcall	_atoi
  3430  0D54  1283               	bcf	3,5	;RP0=0, select bank0
  3431  0D55  1303               	bcf	3,6	;RP1=0, select bank0
  3432  0D56  083C               	movf	?_atoi+1,w
  3433  0D57  1683               	bsf	3,5	;RP0=1, select bank3
  3434  0D58  1703               	bsf	3,6	;RP1=1, select bank3
  3435  0D59  00D5               	movwf	(choice@time_1+1)^(0+384)
  3436  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  3438  0D5C  083B               	movf	?_atoi,w
  3439  0D5D  1683               	bsf	3,5	;RP0=1, select bank3
  3440  0D5E  1703               	bsf	3,6	;RP1=1, select bank3
  3441  0D5F  00D4               	movwf	choice@time_1^(0+384)
  3442                           
  3443                           ;main.c: 249: if(*time == (0)){
  3444  0D60  1283               	bcf	3,5	;RP0=0, select bank2
  3445  0D61  1703               	bsf	3,6	;RP1=1, select bank2
  3446  0D62  0850               	movf	choice@time^(0+256),w
  3447  0D63  1D03               	btfss	3,2
  3448  0D64  2D75               	goto	l4429
  3449                           
  3450                           ;main.c: 250: time_1 = duty_i;
  3451  0D65  0861               	movf	(choice@duty_i+1)^(0+256),w
  3452  0D66  1683               	bsf	3,5	;RP0=1, select bank3
  3453  0D67  1703               	bsf	3,6	;RP1=1, select bank3
  3454  0D68  00D5               	movwf	(choice@time_1+1)^(0+384)
  3455  0D69  1283               	bcf	3,5	;RP0=0, select bank2
  3456  0D6A  1703               	bsf	3,6	;RP1=1, select bank2
  3457  0D6B  0860               	movf	choice@duty_i^(0+256),w
  3458  0D6C  1683               	bsf	3,5	;RP0=1, select bank3
  3459  0D6D  1703               	bsf	3,6	;RP1=1, select bank3
  3460  0D6E  00D4               	movwf	choice@time_1^(0+384)
  3461                           
  3462                           ;main.c: 251: duty_i = 100;
  3463  0D6F  3064               	movlw	100
  3464  0D70  1283               	bcf	3,5	;RP0=0, select bank2
  3465  0D71  1703               	bsf	3,6	;RP1=1, select bank2
  3466  0D72  00E0               	movwf	choice@duty_i^(0+256)
  3467  0D73  3000               	movlw	0
  3468  0D74  00E1               	movwf	(choice@duty_i^(0+256)+1)
  3469  0D75                     l4429:	
  3470                           
  3471                           ;main.c: 252: }
  3472                           ;main.c: 253: step(duty_i,time_1);
  3473  0D75  0861               	movf	(choice@duty_i+1)^(0+256),w
  3474  0D76  1683               	bsf	3,5	;RP0=1, select bank1
  3475  0D77  1303               	bcf	3,6	;RP1=0, select bank1
  3476  0D78  00BD               	movwf	(step@duty+1)^(0+128)
  3477  0D79  1283               	bcf	3,5	;RP0=0, select bank2
  3478  0D7A  1703               	bsf	3,6	;RP1=1, select bank2
  3479  0D7B  0860               	movf	choice@duty_i^(0+256),w
  3480  0D7C  1683               	bsf	3,5	;RP0=1, select bank1
  3481  0D7D  1303               	bcf	3,6	;RP1=0, select bank1
  3482  0D7E  00BC               	movwf	step@duty^(0+128)
  3483  0D7F  1683               	bsf	3,5	;RP0=1, select bank3
  3484  0D80  1703               	bsf	3,6	;RP1=1, select bank3
  3485  0D81  0854               	movf	choice@time_1^(0+384),w
  3486  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  3487  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  3488  0D84  00BE               	movwf	step@time^(0+128)
  3489  0D85  1683               	bsf	3,5	;RP0=1, select bank3
  3490  0D86  1703               	bsf	3,6	;RP1=1, select bank3
  3491  0D87  0855               	movf	(choice@time_1+1)^(0+384),w
  3492  0D88  1683               	bsf	3,5	;RP0=1, select bank1
  3493  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  3494  0D8A  00BF               	movwf	(step@time+1)^(0+128)
  3495  0D8B  3000               	movlw	0
  3496  0D8C  1BBF               	btfsc	(step@time+1)^(0+128),7
  3497  0D8D  30FF               	movlw	255
  3498  0D8E  00C0               	movwf	(step@time+2)^(0+128)
  3499  0D8F  00C1               	movwf	(step@time+3)^(0+128)
  3500  0D90  160A  118A  246B  120A  158A  	fcall	_step
  3501                           
  3502                           ;main.c: 254: }
  3503  0D95  2FF1               	goto	l4489
  3504  0D96                     l4431:	
  3505                           
  3506                           ;main.c: 255: else if(memcmp(content, "run(", 4) == 0){
  3507  0D96  3047               	movlw	low (STR_40| (0+32768))
  3508  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  3509  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  3510  0D99  00B5               	movwf	memcmp@s2
  3511  0D9A  3086               	movlw	high (STR_40| (0+32768))
  3512  0D9B  00B6               	movwf	memcmp@s2+1
  3513  0D9C  3004               	movlw	4
  3514  0D9D  00B7               	movwf	memcmp@n
  3515  0D9E  3000               	movlw	0
  3516  0D9F  00B8               	movwf	memcmp@n+1
  3517  0DA0  30D1               	movlw	(low (_content| 0))& (0+255)
  3518  0DA1  160A  118A  2061  120A  158A  	fcall	_memcmp
  3519  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0DA8  0835               	movf	?_memcmp,w
  3522  0DA9  0436               	iorwf	?_memcmp+1,w
  3523  0DAA  1D03               	btfss	3,2
  3524  0DAB  2E86               	goto	l4451
  3525                           
  3526                           ;main.c: 256: char duty[10];
  3527                           ;main.c: 257: int firstP = strcspn(content, "(");
  3528  0DAC  304A               	movlw	low ((STR_40+3)| (0+32768))
  3529  0DAD  00BB               	movwf	strcspn@s2
  3530  0DAE  3086               	movlw	high ((STR_40+3)| (0+32768))
  3531  0DAF  00BC               	movwf	strcspn@s2+1
  3532  0DB0  30D1               	movlw	(low (_content| 0))& (0+255)
  3533  0DB1  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3534  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  3535  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  3536  0DB8  083C               	movf	?_strcspn+1,w
  3537  0DB9  1283               	bcf	3,5	;RP0=0, select bank2
  3538  0DBA  1703               	bsf	3,6	;RP1=1, select bank2
  3539  0DBB  00DD               	movwf	(choice@firstP_556+1)^(0+256)
  3540  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  3541  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  3542  0DBE  083B               	movf	?_strcspn,w
  3543  0DBF  1283               	bcf	3,5	;RP0=0, select bank2
  3544  0DC0  1703               	bsf	3,6	;RP1=1, select bank2
  3545  0DC1  00DC               	movwf	choice@firstP_556^(0+256)
  3546                           
  3547                           ;main.c: 258: int secondP = strcspn(content, ")");
  3548  0DC2  300E               	movlw	low ((STR_48+8)| (0+32768))
  3549  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  3550  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  3551  0DC5  00BB               	movwf	strcspn@s2
  3552  0DC6  3086               	movlw	high ((STR_48+8)| (0+32768))
  3553  0DC7  00BC               	movwf	strcspn@s2+1
  3554  0DC8  30D1               	movlw	(low (_content| 0))& (0+255)
  3555  0DC9  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3556  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  3557  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  3558  0DD0  083C               	movf	?_strcspn+1,w
  3559  0DD1  1683               	bsf	3,5	;RP0=1, select bank3
  3560  0DD2  1703               	bsf	3,6	;RP1=1, select bank3
  3561  0DD3  00D1               	movwf	(choice@secondP_558+1)^(0+384)
  3562  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  3563  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  3564  0DD6  083B               	movf	?_strcspn,w
  3565  0DD7  1683               	bsf	3,5	;RP0=1, select bank3
  3566  0DD8  1703               	bsf	3,6	;RP1=1, select bank3
  3567  0DD9  00D0               	movwf	choice@secondP_558^(0+384)
  3568                           
  3569                           ;main.c: 260: for(int i = 0 ; i<strlen(content); i++){
  3570  0DDA  1283               	bcf	3,5	;RP0=0, select bank2
  3571  0DDB  1703               	bsf	3,6	;RP1=1, select bank2
  3572  0DDC  01E4               	clrf	choice@i_560^(0+256)
  3573  0DDD  01E5               	clrf	(choice@i_560+1)^(0+256)
  3574  0DDE                     l4447:	
  3575  0DDE  30D1               	movlw	(low (_content| 0))& (0+255)
  3576  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  3577  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  3578  0DE1  00B5               	movwf	strlen@s
  3579  0DE2  3000               	movlw	0
  3580  0DE3  00B6               	movwf	strlen@s+1
  3581  0DE4  160A  158A  2587  120A  158A  	fcall	_strlen
  3582  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0DEB  0836               	movf	?_strlen+1,w
  3585  0DEC  1283               	bcf	3,5	;RP0=0, select bank2
  3586  0DED  1703               	bsf	3,6	;RP1=1, select bank2
  3587  0DEE  0265               	subwf	(choice@i_560+1)^(0+256),w
  3588  0DEF  1D03               	skipz
  3589  0DF0  2DF7               	goto	u5485
  3590  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  3591  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  3592  0DF3  0835               	movf	?_strlen,w
  3593  0DF4  1283               	bcf	3,5	;RP0=0, select bank2
  3594  0DF5  1703               	bsf	3,6	;RP1=1, select bank2
  3595  0DF6  0264               	subwf	choice@i_560^(0+256),w
  3596  0DF7                     u5485:	
  3597  0DF7  1803               	btfsc	3,0
  3598  0DF8  2E6E               	goto	l4449
  3599                           
  3600                           ;main.c: 261: if(i < secondP - firstP - 1){
  3601  0DF9  085C               	movf	choice@firstP_556^(0+256),w
  3602  0DFA  3E01               	addlw	1
  3603  0DFB  1683               	bsf	3,5	;RP0=1, select bank1
  3604  0DFC  1303               	bcf	3,6	;RP1=0, select bank1
  3605  0DFD  00C4               	movwf	??_choice^(0+128)
  3606  0DFE  1283               	bcf	3,5	;RP0=0, select bank2
  3607  0DFF  1703               	bsf	3,6	;RP1=1, select bank2
  3608  0E00  085D               	movf	(choice@firstP_556+1)^(0+256),w
  3609  0E01  1803               	skipnc
  3610  0E02  3E01               	addlw	1
  3611  0E03  3E00               	addlw	0
  3612  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  3613  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  3614  0E06  00C5               	movwf	(??_choice+1)^(0+128)
  3615  0E07  09C4               	comf	??_choice^(0+128),f
  3616  0E08  09C5               	comf	(??_choice^(0+128)+1),f
  3617  0E09  0AC4               	incf	??_choice^(0+128),f
  3618  0E0A  1903               	skipnz
  3619  0E0B  0AC5               	incf	(??_choice^(0+128)+1),f
  3620  0E0C  1683               	bsf	3,5	;RP0=1, select bank3
  3621  0E0D  1703               	bsf	3,6	;RP1=1, select bank3
  3622  0E0E  0850               	movf	choice@secondP_558^(0+384),w
  3623  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  3624  0E10  1303               	bcf	3,6	;RP1=0, select bank1
  3625  0E11  0744               	addwf	??_choice^(0+128),w
  3626  0E12  00C6               	movwf	(??_choice+2)^(0+128)
  3627  0E13  1683               	bsf	3,5	;RP0=1, select bank3
  3628  0E14  1703               	bsf	3,6	;RP1=1, select bank3
  3629  0E15  0851               	movf	(choice@secondP_558+1)^(0+384),w
  3630  0E16  1803               	skipnc
  3631  0E17  0A51               	incf	(choice@secondP_558+1)^(0+384),w
  3632  0E18  1683               	bsf	3,5	;RP0=1, select bank1
  3633  0E19  1303               	bcf	3,6	;RP1=0, select bank1
  3634  0E1A  0745               	addwf	(??_choice+1)^(0+128),w
  3635  0E1B  00C7               	movwf	(??_choice+3)^(0+128)
  3636  0E1C  1283               	bcf	3,5	;RP0=0, select bank2
  3637  0E1D  1703               	bsf	3,6	;RP1=1, select bank2
  3638  0E1E  0865               	movf	(choice@i_560+1)^(0+256),w
  3639  0E1F  3A80               	xorlw	128
  3640  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  3641  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  3642  0E22  00C8               	movwf	(??_choice+4)^(0+128)
  3643  0E23  0847               	movf	(??_choice+3)^(0+128),w
  3644  0E24  3A80               	xorlw	128
  3645  0E25  0248               	subwf	(??_choice+4)^(0+128),w
  3646  0E26  1D03               	skipz
  3647  0E27  2E2C               	goto	u5465
  3648  0E28  0846               	movf	(??_choice+2)^(0+128),w
  3649  0E29  1283               	bcf	3,5	;RP0=0, select bank2
  3650  0E2A  1703               	bsf	3,6	;RP1=1, select bank2
  3651  0E2B  0264               	subwf	choice@i_560^(0+256),w
  3652  0E2C                     u5465:	
  3653  0E2C  1803               	skipnc
  3654  0E2D  2E45               	goto	l4441
  3655                           
  3656                           ;main.c: 262: duty[i] = content[firstP+i+1];
  3657  0E2E  1283               	bcf	3,5	;RP0=0, select bank2
  3658  0E2F  1703               	bsf	3,6	;RP1=1, select bank2
  3659  0E30  0864               	movf	choice@i_560^(0+256),w
  3660  0E31  075C               	addwf	choice@firstP_556^(0+256),w
  3661  0E32  3E01               	addlw	1
  3662  0E33  3ED1               	addlw	(low (_content| 0))& (0+255)
  3663  0E34  0084               	movwf	4
  3664  0E35  1383               	bcf	3,7	;select IRP bank1
  3665  0E36  0800               	movf	0,w
  3666  0E37  1683               	bsf	3,5	;RP0=1, select bank1
  3667  0E38  1303               	bcf	3,6	;RP1=0, select bank1
  3668  0E39  00C4               	movwf	??_choice^(0+128)
  3669  0E3A  1283               	bcf	3,5	;RP0=0, select bank2
  3670  0E3B  1703               	bsf	3,6	;RP1=1, select bank2
  3671  0E3C  0864               	movf	choice@i_560^(0+256),w
  3672  0E3D  3EBA               	addlw	(low (choice@duty_555| (0+256)))& (0+255)
  3673  0E3E  0084               	movwf	4
  3674  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
  3675  0E40  1303               	bcf	3,6	;RP1=0, select bank1
  3676  0E41  0844               	movf	??_choice^(0+128),w
  3677  0E42  1783               	bsf	3,7	;select IRP bank3
  3678  0E43  0080               	movwf	0
  3679                           
  3680                           ;main.c: 263: }
  3681  0E44  2E65               	goto	l4445
  3682  0E45                     l4441:	
  3683                           
  3684                           ;main.c: 264: else if (i<strlen(duty)){
  3685  0E45  30BA               	movlw	(low (choice@duty_555| (0+256)))& (0+255)
  3686  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  3687  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  3688  0E48  00B5               	movwf	strlen@s
  3689  0E49  3001               	movlw	1
  3690  0E4A  00B6               	movwf	strlen@s+1
  3691  0E4B  160A  158A  2587  120A  158A  	fcall	_strlen
  3692  0E50  1283               	bcf	3,5	;RP0=0, select bank0
  3693  0E51  1303               	bcf	3,6	;RP1=0, select bank0
  3694  0E52  0836               	movf	?_strlen+1,w
  3695  0E53  1283               	bcf	3,5	;RP0=0, select bank2
  3696  0E54  1703               	bsf	3,6	;RP1=1, select bank2
  3697  0E55  0265               	subwf	(choice@i_560+1)^(0+256),w
  3698  0E56  1D03               	skipz
  3699  0E57  2E5E               	goto	u5475
  3700  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  3701  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  3702  0E5A  0835               	movf	?_strlen,w
  3703  0E5B  1283               	bcf	3,5	;RP0=0, select bank2
  3704  0E5C  1703               	bsf	3,6	;RP1=1, select bank2
  3705  0E5D  0264               	subwf	choice@i_560^(0+256),w
  3706  0E5E                     u5475:	
  3707  0E5E  1803               	skipnc
  3708  0E5F  2E65               	goto	l4445
  3709                           
  3710                           ;main.c: 265: duty[i] = '\0';
  3711  0E60  0864               	movf	choice@i_560^(0+256),w
  3712  0E61  3EBA               	addlw	(low (choice@duty_555| (0+256)))& (0+255)
  3713  0E62  0084               	movwf	4
  3714  0E63  1783               	bsf	3,7	;select IRP bank3
  3715  0E64  0180               	clrf	0
  3716  0E65                     l4445:	
  3717  0E65  3001               	movlw	1
  3718  0E66  1283               	bcf	3,5	;RP0=0, select bank2
  3719  0E67  1703               	bsf	3,6	;RP1=1, select bank2
  3720  0E68  07E4               	addwf	choice@i_560^(0+256),f
  3721  0E69  1803               	skipnc
  3722  0E6A  0AE5               	incf	(choice@i_560+1)^(0+256),f
  3723  0E6B  3000               	movlw	0
  3724  0E6C  07E5               	addwf	(choice@i_560+1)^(0+256),f
  3725  0E6D  2DDE               	goto	l4447
  3726  0E6E                     l4449:	
  3727                           
  3728                           ;main.c: 266: }
  3729                           ;main.c: 267: }
  3730                           ;main.c: 268: run(atoi(duty));
  3731  0E6E  30BA               	movlw	(low (choice@duty_555| (0+256)))& (0+255)
  3732  0E6F  160A  118A  236C  120A  158A  	fcall	_atoi
  3733  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  3734  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  3735  0E76  083C               	movf	?_atoi+1,w
  3736  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  3737  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  3738  0E79  00BD               	movwf	(run@duty+1)^(0+128)
  3739  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  3740  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  3741  0E7C  083B               	movf	?_atoi,w
  3742  0E7D  1683               	bsf	3,5	;RP0=1, select bank1
  3743  0E7E  1303               	bcf	3,6	;RP1=0, select bank1
  3744  0E7F  00BC               	movwf	run@duty^(0+128)
  3745  0E80  160A  118A  20A5  120A  158A  	fcall	_run
  3746                           
  3747                           ;main.c: 269: }
  3748  0E85  2FF1               	goto	l4489
  3749  0E86                     l4451:	
  3750                           
  3751                           ;main.c: 270: else if(memcmp(content, "sys(", 4) == 0){
  3752  0E86  304C               	movlw	low (STR_43| (0+32768))
  3753  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  3754  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0E89  00B5               	movwf	memcmp@s2
  3756  0E8A  3086               	movlw	high (STR_43| (0+32768))
  3757  0E8B  00B6               	movwf	memcmp@s2+1
  3758  0E8C  3004               	movlw	4
  3759  0E8D  00B7               	movwf	memcmp@n
  3760  0E8E  3000               	movlw	0
  3761  0E8F  00B8               	movwf	memcmp@n+1
  3762  0E90  30D1               	movlw	(low (_content| 0))& (0+255)
  3763  0E91  160A  118A  2061  120A  158A  	fcall	_memcmp
  3764  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  3765  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  3766  0E98  0835               	movf	?_memcmp,w
  3767  0E99  0436               	iorwf	?_memcmp+1,w
  3768  0E9A  1D03               	btfss	3,2
  3769  0E9B  2F76               	goto	l4471
  3770                           
  3771                           ;main.c: 271: char duty[10];
  3772                           ;main.c: 272: int firstP = strcspn(content, "(");
  3773  0E9C  304A               	movlw	low ((STR_40+3)| (0+32768))
  3774  0E9D  00BB               	movwf	strcspn@s2
  3775  0E9E  3086               	movlw	high ((STR_40+3)| (0+32768))
  3776  0E9F  00BC               	movwf	strcspn@s2+1
  3777  0EA0  30D1               	movlw	(low (_content| 0))& (0+255)
  3778  0EA1  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3779  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  3780  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  3781  0EA8  083C               	movf	?_strcspn+1,w
  3782  0EA9  1283               	bcf	3,5	;RP0=0, select bank2
  3783  0EAA  1703               	bsf	3,6	;RP1=1, select bank2
  3784  0EAB  00DF               	movwf	(choice@firstP_563+1)^(0+256)
  3785  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  3786  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  3787  0EAE  083B               	movf	?_strcspn,w
  3788  0EAF  1283               	bcf	3,5	;RP0=0, select bank2
  3789  0EB0  1703               	bsf	3,6	;RP1=1, select bank2
  3790  0EB1  00DE               	movwf	choice@firstP_563^(0+256)
  3791                           
  3792                           ;main.c: 273: int secondP = strcspn(content, ")");
  3793  0EB2  300E               	movlw	low ((STR_48+8)| (0+32768))
  3794  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0EB5  00BB               	movwf	strcspn@s2
  3797  0EB6  3086               	movlw	high ((STR_48+8)| (0+32768))
  3798  0EB7  00BC               	movwf	strcspn@s2+1
  3799  0EB8  30D1               	movlw	(low (_content| 0))& (0+255)
  3800  0EB9  160A  158A  26A7  120A  158A  	fcall	_strcspn
  3801  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  3802  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  3803  0EC0  083C               	movf	?_strcspn+1,w
  3804  0EC1  1683               	bsf	3,5	;RP0=1, select bank3
  3805  0EC2  1703               	bsf	3,6	;RP1=1, select bank3
  3806  0EC3  00D3               	movwf	(choice@secondP_565+1)^(0+384)
  3807  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  3808  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  3809  0EC6  083B               	movf	?_strcspn,w
  3810  0EC7  1683               	bsf	3,5	;RP0=1, select bank3
  3811  0EC8  1703               	bsf	3,6	;RP1=1, select bank3
  3812  0EC9  00D2               	movwf	choice@secondP_565^(0+384)
  3813                           
  3814                           ;main.c: 275: for(int i = 0 ; i<strlen(content); i++){
  3815  0ECA  1283               	bcf	3,5	;RP0=0, select bank2
  3816  0ECB  1703               	bsf	3,6	;RP1=1, select bank2
  3817  0ECC  01E6               	clrf	choice@i_567^(0+256)
  3818  0ECD  01E7               	clrf	(choice@i_567+1)^(0+256)
  3819  0ECE                     l4467:	
  3820  0ECE  30D1               	movlw	(low (_content| 0))& (0+255)
  3821  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3822  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3823  0ED1  00B5               	movwf	strlen@s
  3824  0ED2  3000               	movlw	0
  3825  0ED3  00B6               	movwf	strlen@s+1
  3826  0ED4  160A  158A  2587  120A  158A  	fcall	_strlen
  3827  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  3828  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  3829  0EDB  0836               	movf	?_strlen+1,w
  3830  0EDC  1283               	bcf	3,5	;RP0=0, select bank2
  3831  0EDD  1703               	bsf	3,6	;RP1=1, select bank2
  3832  0EDE  0267               	subwf	(choice@i_567+1)^(0+256),w
  3833  0EDF  1D03               	skipz
  3834  0EE0  2EE7               	goto	u5525
  3835  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0EE3  0835               	movf	?_strlen,w
  3838  0EE4  1283               	bcf	3,5	;RP0=0, select bank2
  3839  0EE5  1703               	bsf	3,6	;RP1=1, select bank2
  3840  0EE6  0266               	subwf	choice@i_567^(0+256),w
  3841  0EE7                     u5525:	
  3842  0EE7  1803               	btfsc	3,0
  3843  0EE8  2F5E               	goto	l4469
  3844                           
  3845                           ;main.c: 276: if(i < secondP - firstP - 1){
  3846  0EE9  085E               	movf	choice@firstP_563^(0+256),w
  3847  0EEA  3E01               	addlw	1
  3848  0EEB  1683               	bsf	3,5	;RP0=1, select bank1
  3849  0EEC  1303               	bcf	3,6	;RP1=0, select bank1
  3850  0EED  00C4               	movwf	??_choice^(0+128)
  3851  0EEE  1283               	bcf	3,5	;RP0=0, select bank2
  3852  0EEF  1703               	bsf	3,6	;RP1=1, select bank2
  3853  0EF0  085F               	movf	(choice@firstP_563+1)^(0+256),w
  3854  0EF1  1803               	skipnc
  3855  0EF2  3E01               	addlw	1
  3856  0EF3  3E00               	addlw	0
  3857  0EF4  1683               	bsf	3,5	;RP0=1, select bank1
  3858  0EF5  1303               	bcf	3,6	;RP1=0, select bank1
  3859  0EF6  00C5               	movwf	(??_choice+1)^(0+128)
  3860  0EF7  09C4               	comf	??_choice^(0+128),f
  3861  0EF8  09C5               	comf	(??_choice^(0+128)+1),f
  3862  0EF9  0AC4               	incf	??_choice^(0+128),f
  3863  0EFA  1903               	skipnz
  3864  0EFB  0AC5               	incf	(??_choice^(0+128)+1),f
  3865  0EFC  1683               	bsf	3,5	;RP0=1, select bank3
  3866  0EFD  1703               	bsf	3,6	;RP1=1, select bank3
  3867  0EFE  0852               	movf	choice@secondP_565^(0+384),w
  3868  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  3869  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  3870  0F01  0744               	addwf	??_choice^(0+128),w
  3871  0F02  00C6               	movwf	(??_choice+2)^(0+128)
  3872  0F03  1683               	bsf	3,5	;RP0=1, select bank3
  3873  0F04  1703               	bsf	3,6	;RP1=1, select bank3
  3874  0F05  0853               	movf	(choice@secondP_565+1)^(0+384),w
  3875  0F06  1803               	skipnc
  3876  0F07  0A53               	incf	(choice@secondP_565+1)^(0+384),w
  3877  0F08  1683               	bsf	3,5	;RP0=1, select bank1
  3878  0F09  1303               	bcf	3,6	;RP1=0, select bank1
  3879  0F0A  0745               	addwf	(??_choice+1)^(0+128),w
  3880  0F0B  00C7               	movwf	(??_choice+3)^(0+128)
  3881  0F0C  1283               	bcf	3,5	;RP0=0, select bank2
  3882  0F0D  1703               	bsf	3,6	;RP1=1, select bank2
  3883  0F0E  0867               	movf	(choice@i_567+1)^(0+256),w
  3884  0F0F  3A80               	xorlw	128
  3885  0F10  1683               	bsf	3,5	;RP0=1, select bank1
  3886  0F11  1303               	bcf	3,6	;RP1=0, select bank1
  3887  0F12  00C8               	movwf	(??_choice+4)^(0+128)
  3888  0F13  0847               	movf	(??_choice+3)^(0+128),w
  3889  0F14  3A80               	xorlw	128
  3890  0F15  0248               	subwf	(??_choice+4)^(0+128),w
  3891  0F16  1D03               	skipz
  3892  0F17  2F1C               	goto	u5505
  3893  0F18  0846               	movf	(??_choice+2)^(0+128),w
  3894  0F19  1283               	bcf	3,5	;RP0=0, select bank2
  3895  0F1A  1703               	bsf	3,6	;RP1=1, select bank2
  3896  0F1B  0266               	subwf	choice@i_567^(0+256),w
  3897  0F1C                     u5505:	
  3898  0F1C  1803               	skipnc
  3899  0F1D  2F35               	goto	l4461
  3900                           
  3901                           ;main.c: 277: duty[i] = content[firstP+i+1];
  3902  0F1E  1283               	bcf	3,5	;RP0=0, select bank2
  3903  0F1F  1703               	bsf	3,6	;RP1=1, select bank2
  3904  0F20  0866               	movf	choice@i_567^(0+256),w
  3905  0F21  075E               	addwf	choice@firstP_563^(0+256),w
  3906  0F22  3E01               	addlw	1
  3907  0F23  3ED1               	addlw	(low (_content| 0))& (0+255)
  3908  0F24  0084               	movwf	4
  3909  0F25  1383               	bcf	3,7	;select IRP bank1
  3910  0F26  0800               	movf	0,w
  3911  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  3912  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  3913  0F29  00C4               	movwf	??_choice^(0+128)
  3914  0F2A  1283               	bcf	3,5	;RP0=0, select bank2
  3915  0F2B  1703               	bsf	3,6	;RP1=1, select bank2
  3916  0F2C  0866               	movf	choice@i_567^(0+256),w
  3917  0F2D  3EC4               	addlw	(low (choice@duty_562| (0+256)))& (0+255)
  3918  0F2E  0084               	movwf	4
  3919  0F2F  1683               	bsf	3,5	;RP0=1, select bank1
  3920  0F30  1303               	bcf	3,6	;RP1=0, select bank1
  3921  0F31  0844               	movf	??_choice^(0+128),w
  3922  0F32  1783               	bsf	3,7	;select IRP bank3
  3923  0F33  0080               	movwf	0
  3924                           
  3925                           ;main.c: 278: }
  3926  0F34  2F55               	goto	l4465
  3927  0F35                     l4461:	
  3928                           
  3929                           ;main.c: 279: else if (i<strlen(duty)){
  3930  0F35  30C4               	movlw	(low (choice@duty_562| (0+256)))& (0+255)
  3931  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  3933  0F38  00B5               	movwf	strlen@s
  3934  0F39  3001               	movlw	1
  3935  0F3A  00B6               	movwf	strlen@s+1
  3936  0F3B  160A  158A  2587  120A  158A  	fcall	_strlen
  3937  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  3938  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  3939  0F42  0836               	movf	?_strlen+1,w
  3940  0F43  1283               	bcf	3,5	;RP0=0, select bank2
  3941  0F44  1703               	bsf	3,6	;RP1=1, select bank2
  3942  0F45  0267               	subwf	(choice@i_567+1)^(0+256),w
  3943  0F46  1D03               	skipz
  3944  0F47  2F4E               	goto	u5515
  3945  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  3947  0F4A  0835               	movf	?_strlen,w
  3948  0F4B  1283               	bcf	3,5	;RP0=0, select bank2
  3949  0F4C  1703               	bsf	3,6	;RP1=1, select bank2
  3950  0F4D  0266               	subwf	choice@i_567^(0+256),w
  3951  0F4E                     u5515:	
  3952  0F4E  1803               	skipnc
  3953  0F4F  2F55               	goto	l4465
  3954                           
  3955                           ;main.c: 280: duty[i] = '\0';
  3956  0F50  0866               	movf	choice@i_567^(0+256),w
  3957  0F51  3EC4               	addlw	(low (choice@duty_562| (0+256)))& (0+255)
  3958  0F52  0084               	movwf	4
  3959  0F53  1783               	bsf	3,7	;select IRP bank3
  3960  0F54  0180               	clrf	0
  3961  0F55                     l4465:	
  3962  0F55  3001               	movlw	1
  3963  0F56  1283               	bcf	3,5	;RP0=0, select bank2
  3964  0F57  1703               	bsf	3,6	;RP1=1, select bank2
  3965  0F58  07E6               	addwf	choice@i_567^(0+256),f
  3966  0F59  1803               	skipnc
  3967  0F5A  0AE7               	incf	(choice@i_567+1)^(0+256),f
  3968  0F5B  3000               	movlw	0
  3969  0F5C  07E7               	addwf	(choice@i_567+1)^(0+256),f
  3970  0F5D  2ECE               	goto	l4467
  3971  0F5E                     l4469:	
  3972                           
  3973                           ;main.c: 281: }
  3974                           ;main.c: 282: }
  3975                           ;main.c: 283: sys(atoi(duty));
  3976  0F5E  30C4               	movlw	(low (choice@duty_562| (0+256)))& (0+255)
  3977  0F5F  160A  118A  236C  120A  158A  	fcall	_atoi
  3978  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  3979  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  3980  0F66  083C               	movf	?_atoi+1,w
  3981  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  3982  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  3983  0F69  00BD               	movwf	(sys@duty+1)^(0+128)
  3984  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3985  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3986  0F6C  083B               	movf	?_atoi,w
  3987  0F6D  1683               	bsf	3,5	;RP0=1, select bank1
  3988  0F6E  1303               	bcf	3,6	;RP1=0, select bank1
  3989  0F6F  00BC               	movwf	sys@duty^(0+128)
  3990  0F70  120A  158A  20F9  120A  158A  	fcall	_sys
  3991                           
  3992                           ;main.c: 284: }
  3993  0F75  2FF1               	goto	l4489
  3994  0F76                     l4471:	
  3995                           
  3996                           ;main.c: 285: else if(memcmp(content, "stop()", 6) == 0){
  3997  0F76  303A               	movlw	low (STR_46| (0+32768))
  3998  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  3999  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  4000  0F79  00B5               	movwf	memcmp@s2
  4001  0F7A  3086               	movlw	high (STR_46| (0+32768))
  4002  0F7B  00B6               	movwf	memcmp@s2+1
  4003  0F7C  3006               	movlw	6
  4004  0F7D  00B7               	movwf	memcmp@n
  4005  0F7E  3000               	movlw	0
  4006  0F7F  00B8               	movwf	memcmp@n+1
  4007  0F80  30D1               	movlw	(low (_content| 0))& (0+255)
  4008  0F81  160A  118A  2061  120A  158A  	fcall	_memcmp
  4009  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  4010  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  4011  0F88  0835               	movf	?_memcmp,w
  4012  0F89  0436               	iorwf	?_memcmp+1,w
  4013  0F8A  1D03               	btfss	3,2
  4014  0F8B  2F92               	goto	l4475
  4015                           
  4016                           ;main.c: 286: stop();
  4017  0F8C  160A  158A  2472  120A  158A  	fcall	_stop
  4018                           
  4019                           ;main.c: 287: }
  4020  0F91  2FF1               	goto	l4489
  4021  0F92                     l4475:	
  4022                           
  4023                           ;main.c: 288: else if(memcmp(content, "status()", 8) == 0){
  4024  0F92  3022               	movlw	low (STR_47| (0+32768))
  4025  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  4026  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  4027  0F95  00B5               	movwf	memcmp@s2
  4028  0F96  3086               	movlw	high (STR_47| (0+32768))
  4029  0F97  00B6               	movwf	memcmp@s2+1
  4030  0F98  3008               	movlw	8
  4031  0F99  00B7               	movwf	memcmp@n
  4032  0F9A  3000               	movlw	0
  4033  0F9B  00B8               	movwf	memcmp@n+1
  4034  0F9C  30D1               	movlw	(low (_content| 0))& (0+255)
  4035  0F9D  160A  118A  2061  120A  158A  	fcall	_memcmp
  4036  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0FA4  0835               	movf	?_memcmp,w
  4039  0FA5  0436               	iorwf	?_memcmp+1,w
  4040  0FA6  1D03               	btfss	3,2
  4041  0FA7  2FAE               	goto	l4479
  4042                           
  4043                           ;main.c: 289: status();
  4044  0FA8  120A  158A  200C  120A  158A  	fcall	_status
  4045                           
  4046                           ;main.c: 290: }
  4047  0FAD  2FF1               	goto	l4489
  4048  0FAE                     l4479:	
  4049                           
  4050                           ;main.c: 291: else if(memcmp(content, "acquire()", 8) == 0){
  4051  0FAE  3006               	movlw	low (STR_48| (0+32768))
  4052  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  4054  0FB1  00B5               	movwf	memcmp@s2
  4055  0FB2  3086               	movlw	high (STR_48| (0+32768))
  4056  0FB3  00B6               	movwf	memcmp@s2+1
  4057  0FB4  3008               	movlw	8
  4058  0FB5  00B7               	movwf	memcmp@n
  4059  0FB6  3000               	movlw	0
  4060  0FB7  00B8               	movwf	memcmp@n+1
  4061  0FB8  30D1               	movlw	(low (_content| 0))& (0+255)
  4062  0FB9  160A  118A  2061  120A  158A  	fcall	_memcmp
  4063  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0FC0  0835               	movf	?_memcmp,w
  4066  0FC1  0436               	iorwf	?_memcmp+1,w
  4067  0FC2  1D03               	btfss	3,2
  4068  0FC3  2FCA               	goto	l4483
  4069                           
  4070                           ;main.c: 292: acquire();
  4071  0FC4  120A  118A  27A0  120A  158A  	fcall	_acquire
  4072                           
  4073                           ;main.c: 293: }
  4074  0FC9  2FF1               	goto	l4489
  4075  0FCA                     l4483:	
  4076                           
  4077                           ;main.c: 294: else if(memcmp(content, "help()", 6) == 0){
  4078  0FCA  3033               	movlw	low (STR_49| (0+32768))
  4079  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  4080  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  4081  0FCD  00B5               	movwf	memcmp@s2
  4082  0FCE  3086               	movlw	high (STR_49| (0+32768))
  4083  0FCF  00B6               	movwf	memcmp@s2+1
  4084  0FD0  3006               	movlw	6
  4085  0FD1  00B7               	movwf	memcmp@n
  4086  0FD2  3000               	movlw	0
  4087  0FD3  00B8               	movwf	memcmp@n+1
  4088  0FD4  30D1               	movlw	(low (_content| 0))& (0+255)
  4089  0FD5  160A  118A  2061  120A  158A  	fcall	_memcmp
  4090  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  4091  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  4092  0FDC  0835               	movf	?_memcmp,w
  4093  0FDD  0436               	iorwf	?_memcmp+1,w
  4094  0FDE  1D03               	btfss	3,2
  4095  0FDF  2FE6               	goto	l4487
  4096                           
  4097                           ;main.c: 295: help();
  4098  0FE0  120A  158A  2232  120A  158A  	fcall	_help
  4099                           
  4100                           ;main.c: 296: }
  4101  0FE5  2FF1               	goto	l4489
  4102  0FE6                     l4487:	
  4103                           
  4104                           ;main.c: 297: else{
  4105                           ;main.c: 298: USARTWriteLine("You typed something wrong. ");
  4106  0FE6  304A               	movlw	low (STR_50| (0+32768))
  4107  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  4108  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  4109  0FE9  00B8               	movwf	USARTWriteLine@str
  4110  0FEA  3084               	movlw	high (STR_50| (0+32768))
  4111  0FEB  00B9               	movwf	USARTWriteLine@str+1
  4112  0FEC  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  4113  0FF1                     l4489:	
  4114                           
  4115                           ;main.c: 299: }
  4116                           ;main.c: 300: USARTGotoNewLine();
  4117  0FF1  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  4118                           
  4119                           ;main.c: 301: USARTWriteString(">");
  4120  0FF6  3058               	movlw	low (STR_1| (0+32768))
  4121  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  4122  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  4123  0FF9  00B6               	movwf	USARTWriteString@str
  4124  0FFA  3086               	movlw	high (STR_1| (0+32768))
  4125  0FFB  00B7               	movwf	USARTWriteString@str+1
  4126  0FFC  160A  158A  25CE   	fcall	_USARTWriteString
  4127  0FFF  0008               	return
  4128  1000                     __end_of_choice:	
  4129                           
  4130                           	psect	text4
  4131  08F9                     __ptext4:	
  4132 ;; *************** function _sys *****************
  4133 ;; Defined at:
  4134 ;;		line 414 in file "main.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  duty            2   28[BANK1 ] int 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  max_duty        2   34[BANK1 ] unsigned int 
  4139 ;;  valueAD         2   32[BANK1 ] unsigned int 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4149 ;;      Params:         0       0       2       0       0
  4150 ;;      Locals:         0       0       4       0       0
  4151 ;;      Temps:          0       0       2       0       0
  4152 ;;      Totals:         0       0       8       0       0
  4153 ;;Total ram usage:        8 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    7
  4156 ;; This function calls:
  4157 ;;		_USARTDataAvailable
  4158 ;;		_USARTGotoNewLine
  4159 ;;		_USARTWriteLine
  4160 ;;		_USARTWriteString
  4161 ;;		___awmod
  4162 ;;		___lwmod
  4163 ;;		___wmul
  4164 ;;		_rand
  4165 ;;		_sampling
  4166 ;;		_set_pwm
  4167 ;;		_sprintf
  4168 ;;		_srand
  4169 ;; This function is called by:
  4170 ;;		_choice
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           
  4175                           ;psect for function _sys
  4176  08F9                     _sys:	
  4177                           
  4178                           ;main.c: 415: acquirement = 1;
  4179                           
  4180                           ;incstack = 0
  4181 ;; hardware stack exceeded
  4182                           ; Regs used in _sys: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4183  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  4184  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  4185  08FB  01D8               	clrf	_acquirement
  4186  08FC  0AD8               	incf	_acquirement,f
  4187                           
  4188                           ;main.c: 416: unsigned int valueAD = sampling();
  4189  08FD  160A  158A  24A1  120A  158A  	fcall	_sampling
  4190  0902  1283               	bcf	3,5	;RP0=0, select bank0
  4191  0903  1303               	bcf	3,6	;RP1=0, select bank0
  4192  0904  0836               	movf	?_sampling+1,w
  4193  0905  1683               	bsf	3,5	;RP0=1, select bank1
  4194  0906  1303               	bcf	3,6	;RP1=0, select bank1
  4195  0907  00C1               	movwf	(sys@valueAD+1)^(0+128)
  4196  0908  1283               	bcf	3,5	;RP0=0, select bank0
  4197  0909  1303               	bcf	3,6	;RP1=0, select bank0
  4198  090A  0835               	movf	?_sampling,w
  4199  090B  1683               	bsf	3,5	;RP0=1, select bank1
  4200  090C  1303               	bcf	3,6	;RP1=0, select bank1
  4201  090D  00C0               	movwf	sys@valueAD^(0+128)
  4202                           
  4203                           ;main.c: 417: unsigned int max_duty = duty;
  4204  090E  083D               	movf	(sys@duty+1)^(0+128),w
  4205  090F  00C3               	movwf	(sys@max_duty+1)^(0+128)
  4206  0910  083C               	movf	sys@duty^(0+128),w
  4207  0911  00C2               	movwf	sys@max_duty^(0+128)
  4208                           
  4209                           ;main.c: 418: while(USARTDataAvailable() == 0 && acquirement){
  4210  0912  2A10               	goto	l4361
  4211  0913                     l4331:	
  4212                           
  4213                           ;main.c: 419: srand((unsigned) valueAD*TMR0 );
  4214  0913  1283               	bcf	3,5	;RP0=0, select bank0
  4215  0914  0801               	movf	1,w	;volatile
  4216  0915  1683               	bsf	3,5	;RP0=1, select bank1
  4217  0916  1303               	bcf	3,6	;RP1=0, select bank1
  4218  0917  00BE               	movwf	??_sys^(0+128)
  4219  0918  01BF               	clrf	(??_sys^(0+128)+1)
  4220  0919  083E               	movf	??_sys^(0+128),w
  4221  091A  1283               	bcf	3,5	;RP0=0, select bank0
  4222  091B  1303               	bcf	3,6	;RP1=0, select bank0
  4223  091C  00B5               	movwf	___wmul@multiplier
  4224  091D  1683               	bsf	3,5	;RP0=1, select bank1
  4225  091E  1303               	bcf	3,6	;RP1=0, select bank1
  4226  091F  083F               	movf	(??_sys+1)^(0+128),w
  4227  0920  1283               	bcf	3,5	;RP0=0, select bank0
  4228  0921  1303               	bcf	3,6	;RP1=0, select bank0
  4229  0922  00B6               	movwf	___wmul@multiplier+1
  4230  0923  1683               	bsf	3,5	;RP0=1, select bank1
  4231  0924  1303               	bcf	3,6	;RP1=0, select bank1
  4232  0925  0841               	movf	(sys@valueAD+1)^(0+128),w
  4233  0926  1283               	bcf	3,5	;RP0=0, select bank0
  4234  0927  1303               	bcf	3,6	;RP1=0, select bank0
  4235  0928  00B8               	movwf	___wmul@multiplicand+1
  4236  0929  1683               	bsf	3,5	;RP0=1, select bank1
  4237  092A  1303               	bcf	3,6	;RP1=0, select bank1
  4238  092B  0840               	movf	sys@valueAD^(0+128),w
  4239  092C  1283               	bcf	3,5	;RP0=0, select bank0
  4240  092D  1303               	bcf	3,6	;RP1=0, select bank0
  4241  092E  00B7               	movwf	___wmul@multiplicand
  4242  092F  160A  158A  2541  120A  158A  	fcall	___wmul
  4243  0934  1283               	bcf	3,5	;RP0=0, select bank0
  4244  0935  1303               	bcf	3,6	;RP1=0, select bank0
  4245  0936  0836               	movf	?___wmul+1,w
  4246  0937  00BC               	movwf	srand@x+1
  4247  0938  0835               	movf	?___wmul,w
  4248  0939  00BB               	movwf	srand@x
  4249  093A  160A  118A  2001  120A  158A  	fcall	_srand
  4250                           
  4251                           ;main.c: 420: duty = rand()% max_duty;
  4252  093F  1683               	bsf	3,5	;RP0=1, select bank1
  4253  0940  1303               	bcf	3,6	;RP1=0, select bank1
  4254  0941  0843               	movf	(sys@max_duty+1)^(0+128),w
  4255  0942  00A1               	movwf	(___lwmod@divisor+1)^(0+128)
  4256  0943  0842               	movf	sys@max_duty^(0+128),w
  4257  0944  00A0               	movwf	___lwmod@divisor^(0+128)
  4258  0945  160A  118A  212F  120A  158A  	fcall	_rand
  4259  094A  1283               	bcf	3,5	;RP0=0, select bank0
  4260  094B  1303               	bcf	3,6	;RP1=0, select bank0
  4261  094C  0843               	movf	?_rand+1,w
  4262  094D  1683               	bsf	3,5	;RP0=1, select bank1
  4263  094E  1303               	bcf	3,6	;RP1=0, select bank1
  4264  094F  00A3               	movwf	(___lwmod@dividend+1)^(0+128)
  4265  0950  1283               	bcf	3,5	;RP0=0, select bank0
  4266  0951  1303               	bcf	3,6	;RP1=0, select bank0
  4267  0952  0842               	movf	?_rand,w
  4268  0953  1683               	bsf	3,5	;RP0=1, select bank1
  4269  0954  1303               	bcf	3,6	;RP1=0, select bank1
  4270  0955  00A2               	movwf	___lwmod@dividend^(0+128)
  4271  0956  160A  158A  2711  120A  158A  	fcall	___lwmod
  4272  095B  1683               	bsf	3,5	;RP0=1, select bank1
  4273  095C  1303               	bcf	3,6	;RP1=0, select bank1
  4274  095D  0821               	movf	(?___lwmod+1)^(0+128),w
  4275  095E  00BD               	movwf	(sys@duty+1)^(0+128)
  4276  095F  0820               	movf	?___lwmod^(0+128),w
  4277  0960  00BC               	movwf	sys@duty^(0+128)
  4278                           
  4279                           ;main.c: 421: if(duty>max_duty){
  4280  0961  083D               	movf	(sys@duty+1)^(0+128),w
  4281  0962  0243               	subwf	(sys@max_duty+1)^(0+128),w
  4282  0963  1D03               	skipz
  4283  0964  2967               	goto	u5325
  4284  0965  083C               	movf	sys@duty^(0+128),w
  4285  0966  0242               	subwf	sys@max_duty^(0+128),w
  4286  0967                     u5325:	
  4287  0967  1803               	skipnc
  4288  0968  296D               	goto	l4337
  4289                           
  4290                           ;main.c: 422: duty=max_duty;
  4291  0969  0843               	movf	(sys@max_duty+1)^(0+128),w
  4292  096A  00BD               	movwf	(sys@duty+1)^(0+128)
  4293  096B  0842               	movf	sys@max_duty^(0+128),w
  4294  096C  00BC               	movwf	sys@duty^(0+128)
  4295  096D                     l4337:	
  4296                           
  4297                           ;main.c: 423: }
  4298                           ;main.c: 424: set_pwm(duty);
  4299  096D  083D               	movf	(sys@duty+1)^(0+128),w
  4300  096E  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  4301  096F  083C               	movf	sys@duty^(0+128),w
  4302  0970  00B8               	movwf	set_pwm@percent^(0+128)
  4303  0971  120A  118A  2057  120A  158A  	fcall	_set_pwm
  4304                           
  4305                           ;main.c: 425: PR2 = rand()%255;
  4306  0976  30FF               	movlw	255
  4307  0977  1683               	bsf	3,5	;RP0=1, select bank1
  4308  0978  1303               	bcf	3,6	;RP1=0, select bank1
  4309  0979  00A0               	movwf	___awmod@divisor^(0+128)
  4310  097A  3000               	movlw	0
  4311  097B  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  4312  097C  160A  118A  212F  120A  158A  	fcall	_rand
  4313  0981  1283               	bcf	3,5	;RP0=0, select bank0
  4314  0982  1303               	bcf	3,6	;RP1=0, select bank0
  4315  0983  0843               	movf	?_rand+1,w
  4316  0984  1683               	bsf	3,5	;RP0=1, select bank1
  4317  0985  1303               	bcf	3,6	;RP1=0, select bank1
  4318  0986  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  4319  0987  1283               	bcf	3,5	;RP0=0, select bank0
  4320  0988  1303               	bcf	3,6	;RP1=0, select bank0
  4321  0989  0842               	movf	?_rand,w
  4322  098A  1683               	bsf	3,5	;RP0=1, select bank1
  4323  098B  1303               	bcf	3,6	;RP1=0, select bank1
  4324  098C  00A2               	movwf	___awmod@dividend^(0+128)
  4325  098D  160A  118A  2257  120A  158A  	fcall	___awmod
  4326  0992  1683               	bsf	3,5	;RP0=1, select bank1
  4327  0993  1303               	bcf	3,6	;RP1=0, select bank1
  4328  0994  0820               	movf	?___awmod^(0+128),w
  4329  0995  0092               	movwf	18	;volatile
  4330                           
  4331                           ;main.c: 426: USARTWriteString("Analog: ");
  4332  0996  3010               	movlw	low (STR_65| (0+32768))
  4333  0997  1283               	bcf	3,5	;RP0=0, select bank0
  4334  0998  1303               	bcf	3,6	;RP1=0, select bank0
  4335  0999  00B6               	movwf	USARTWriteString@str
  4336  099A  3086               	movlw	high (STR_65| (0+32768))
  4337  099B  00B7               	movwf	USARTWriteString@str+1
  4338  099C  160A  158A  25CE  120A  158A  	fcall	_USARTWriteString
  4339                           
  4340                           ;main.c: 427: sprintf(strBuffer,"%d",valueAD);
  4341  09A1  3051               	movlw	low (STR_52| (0+32768))
  4342  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  4343  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  4344  09A4  00A5               	movwf	sprintf@f^(0+128)
  4345  09A5  3086               	movlw	high (STR_52| (0+32768))
  4346  09A6  00A6               	movwf	(sprintf@f^(0+128)+1)
  4347  09A7  0841               	movf	(sys@valueAD+1)^(0+128),w
  4348  09A8  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  4349  09A9  0840               	movf	sys@valueAD^(0+128),w
  4350  09AA  00A7               	movwf	(?_sprintf^(0+128)+2)
  4351  09AB  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4352  09AC  160A  118A  26EE  120A  158A  	fcall	_sprintf
  4353                           
  4354                           ;main.c: 428: USARTWriteString(strBuffer);
  4355  09B1  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4356  09B2  1283               	bcf	3,5	;RP0=0, select bank0
  4357  09B3  1303               	bcf	3,6	;RP1=0, select bank0
  4358  09B4  00B6               	movwf	USARTWriteString@str
  4359  09B5  3001               	movlw	1
  4360  09B6  00B7               	movwf	USARTWriteString@str+1
  4361  09B7  160A  158A  25CE  120A  158A  	fcall	_USARTWriteString
  4362                           
  4363                           ;main.c: 429: USARTWriteString(", Duty: ");
  4364  09BC  3019               	movlw	low (STR_67| (0+32768))
  4365  09BD  1283               	bcf	3,5	;RP0=0, select bank0
  4366  09BE  1303               	bcf	3,6	;RP1=0, select bank0
  4367  09BF  00B6               	movwf	USARTWriteString@str
  4368  09C0  3086               	movlw	high (STR_67| (0+32768))
  4369  09C1  00B7               	movwf	USARTWriteString@str+1
  4370  09C2  160A  158A  25CE  120A  158A  	fcall	_USARTWriteString
  4371                           
  4372                           ;main.c: 430: sprintf(strBuffer,"%d",duty);
  4373  09C7  3051               	movlw	low (STR_52| (0+32768))
  4374  09C8  1683               	bsf	3,5	;RP0=1, select bank1
  4375  09C9  1303               	bcf	3,6	;RP1=0, select bank1
  4376  09CA  00A5               	movwf	sprintf@f^(0+128)
  4377  09CB  3086               	movlw	high (STR_52| (0+32768))
  4378  09CC  00A6               	movwf	(sprintf@f^(0+128)+1)
  4379  09CD  083D               	movf	(sys@duty+1)^(0+128),w
  4380  09CE  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  4381  09CF  083C               	movf	sys@duty^(0+128),w
  4382  09D0  00A7               	movwf	(?_sprintf^(0+128)+2)
  4383  09D1  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4384  09D2  160A  118A  26EE  120A  158A  	fcall	_sprintf
  4385                           
  4386                           ;main.c: 431: USARTWriteString(strBuffer);
  4387  09D7  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4388  09D8  1283               	bcf	3,5	;RP0=0, select bank0
  4389  09D9  1303               	bcf	3,6	;RP1=0, select bank0
  4390  09DA  00B6               	movwf	USARTWriteString@str
  4391  09DB  3001               	movlw	1
  4392  09DC  00B7               	movwf	USARTWriteString@str+1
  4393  09DD  160A  158A  25CE  120A  158A  	fcall	_USARTWriteString
  4394                           
  4395                           ;main.c: 432: USARTWriteString(", PR2: ");
  4396  09E2  302B               	movlw	low (STR_69| (0+32768))
  4397  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  4398  09E4  1303               	bcf	3,6	;RP1=0, select bank0
  4399  09E5  00B6               	movwf	USARTWriteString@str
  4400  09E6  3086               	movlw	high (STR_69| (0+32768))
  4401  09E7  00B7               	movwf	USARTWriteString@str+1
  4402  09E8  160A  158A  25CE  120A  158A  	fcall	_USARTWriteString
  4403                           
  4404                           ;main.c: 433: sprintf(strBuffer,"%d",PR2);
  4405  09ED  3051               	movlw	low (STR_52| (0+32768))
  4406  09EE  1683               	bsf	3,5	;RP0=1, select bank1
  4407  09EF  1303               	bcf	3,6	;RP1=0, select bank1
  4408  09F0  00A5               	movwf	sprintf@f^(0+128)
  4409  09F1  3086               	movlw	high (STR_52| (0+32768))
  4410  09F2  00A6               	movwf	(sprintf@f^(0+128)+1)
  4411  09F3  0812               	movf	18,w	;volatile
  4412  09F4  00BE               	movwf	??_sys^(0+128)
  4413  09F5  01BF               	clrf	(??_sys^(0+128)+1)
  4414  09F6  083E               	movf	??_sys^(0+128),w
  4415  09F7  00A7               	movwf	(?_sprintf^(0+128)+2)
  4416  09F8  083F               	movf	(??_sys+1)^(0+128),w
  4417  09F9  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  4418  09FA  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4419  09FB  160A  118A  26EE  120A  158A  	fcall	_sprintf
  4420                           
  4421                           ;main.c: 434: USARTWriteString(strBuffer);
  4422  0A00  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4423  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  4424  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  4425  0A03  00B6               	movwf	USARTWriteString@str
  4426  0A04  3001               	movlw	1
  4427  0A05  00B7               	movwf	USARTWriteString@str+1
  4428  0A06  160A  158A  25CE  120A  158A  	fcall	_USARTWriteString
  4429                           
  4430                           ;main.c: 435: USARTGotoNewLine();
  4431  0A0B  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  4432  0A10                     l4361:	
  4433  0A10  160A  158A  2564  120A  158A  	fcall	_USARTDataAvailable
  4434  0A15  3A00               	xorlw	0
  4435  0A16  1D03               	skipz
  4436  0A17  2A1D               	goto	l4365
  4437  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  4438  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  4439  0A1A  0858               	movf	_acquirement,w
  4440  0A1B  1D03               	btfss	3,2
  4441  0A1C  2913               	goto	l4331
  4442  0A1D                     l4365:	
  4443                           
  4444                           ;main.c: 436: }
  4445                           ;main.c: 437: USARTWriteLine("If you want stop the system, type:");
  4446  0A1D  3005               	movlw	low ((STR_24+8)| (0+32768))
  4447  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  4448  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  4449  0A20  00B8               	movwf	USARTWriteLine@str
  4450  0A21  3084               	movlw	high ((STR_24+8)| (0+32768))
  4451  0A22  00B9               	movwf	USARTWriteLine@str+1
  4452  0A23  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  4453                           
  4454                           ;main.c: 438: USARTWriteLine("stop()");
  4455  0A28  303A               	movlw	low (STR_46| (0+32768))
  4456  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0A2B  00B8               	movwf	USARTWriteLine@str
  4459  0A2C  3086               	movlw	high (STR_46| (0+32768))
  4460  0A2D  00B9               	movwf	USARTWriteLine@str+1
  4461  0A2E  160A  118A  200A   	fcall	_USARTWriteLine
  4462  0A31  0008               	return
  4463  0A32                     __end_of_sys:	
  4464                           
  4465                           	psect	text5
  4466  1001                     __ptext5:	
  4467 ;; *************** function _srand *****************
  4468 ;; Defined at:
  4469 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  x               2   27[BANK0 ] unsigned int 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4483 ;;      Params:         0       2       0       0       0
  4484 ;;      Locals:         0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0
  4486 ;;      Totals:         0       2       0       0       0
  4487 ;;Total ram usage:        2 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    4
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_sys
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           
  4498                           ;psect for function _srand
  4499  1001                     _srand:	
  4500                           
  4501                           ;incstack = 0
  4502                           ; Regs used in _srand: [wreg]
  4503  1001  1283               	bcf	3,5	;RP0=0, select bank0
  4504  1002  1303               	bcf	3,6	;RP1=0, select bank0
  4505  1003  083B               	movf	srand@x,w
  4506  1004  00D4               	movwf	_randx
  4507  1005  083C               	movf	srand@x+1,w
  4508  1006  00D5               	movwf	_randx+1
  4509  1007  01D6               	clrf	_randx+2
  4510  1008  01D7               	clrf	_randx+3
  4511  1009  0008               	return
  4512  100A                     __end_of_srand:	
  4513                           
  4514                           	psect	text6
  4515  112F                     __ptext6:	
  4516 ;; *************** function _rand *****************
  4517 ;; Defined at:
  4518 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;		None
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;		None
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  2   34[BANK0 ] int 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, pclath, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4532 ;;      Params:         0       2       0       0       0
  4533 ;;      Locals:         0       0       0       0       0
  4534 ;;      Temps:          0       5       0       0       0
  4535 ;;      Totals:         0       7       0       0       0
  4536 ;;Total ram usage:        7 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    5
  4539 ;; This function calls:
  4540 ;;		___lmul
  4541 ;; This function is called by:
  4542 ;;		_sys
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _rand
  4548  112F                     _rand:	
  4549                           
  4550                           ;incstack = 0
  4551 ;; hardware stack exceeded
  4552                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4553  112F  1283               	bcf	3,5	;RP0=0, select bank0
  4554  1130  1303               	bcf	3,6	;RP1=0, select bank0
  4555  1131  0857               	movf	_randx+3,w
  4556  1132  00B8               	movwf	___lmul@multiplier+3
  4557  1133  0856               	movf	_randx+2,w
  4558  1134  00B7               	movwf	___lmul@multiplier+2
  4559  1135  0855               	movf	_randx+1,w
  4560  1136  00B6               	movwf	___lmul@multiplier+1
  4561  1137  0854               	movf	_randx,w
  4562  1138  00B5               	movwf	___lmul@multiplier
  4563  1139  3041               	movlw	65
  4564  113A  00BC               	movwf	___lmul@multiplicand+3
  4565  113B  30C6               	movlw	198
  4566  113C  00BB               	movwf	___lmul@multiplicand+2
  4567  113D  304E               	movlw	78
  4568  113E  00BA               	movwf	___lmul@multiplicand+1
  4569  113F  306D               	movlw	109
  4570  1140  00B9               	movwf	___lmul@multiplicand
  4571  1141  160A  118A  2020  160A  118A  	fcall	___lmul
  4572  1146  1283               	bcf	3,5	;RP0=0, select bank0
  4573  1147  1303               	bcf	3,6	;RP1=0, select bank0
  4574  1148  0838               	movf	?___lmul+3,w
  4575  1149  00D7               	movwf	_randx+3
  4576  114A  0837               	movf	?___lmul+2,w
  4577  114B  00D6               	movwf	_randx+2
  4578  114C  0836               	movf	?___lmul+1,w
  4579  114D  00D5               	movwf	_randx+1
  4580  114E  0835               	movf	?___lmul,w
  4581  114F  00D4               	movwf	_randx
  4582  1150  3039               	movlw	57
  4583  1151  07D4               	addwf	_randx,f
  4584  1152  3030               	movlw	48
  4585  1153  1803               	skipnc
  4586  1154  3031               	movlw	49
  4587  1155  07D5               	addwf	_randx+1,f
  4588  1156  3000               	movlw	0
  4589  1157  1803               	skipnc
  4590  1158  3001               	movlw	1
  4591  1159  07D6               	addwf	_randx+2,f
  4592  115A  3000               	movlw	0
  4593  115B  1803               	skipnc
  4594  115C  3001               	movlw	1
  4595  115D  07D7               	addwf	_randx+3,f
  4596  115E  0854               	movf	_randx,w
  4597  115F  00C4               	movwf	??_rand
  4598  1160  0855               	movf	_randx+1,w
  4599  1161  00C5               	movwf	??_rand+1
  4600  1162  0856               	movf	_randx+2,w
  4601  1163  00C6               	movwf	??_rand+2
  4602  1164  0857               	movf	_randx+3,w
  4603  1165  00C7               	movwf	??_rand+3
  4604  1166  3010               	movlw	16
  4605  1167  00C8               	movwf	??_rand+4
  4606  1168                     u4915:	
  4607  1168  0D47               	rlf	??_rand+3,w
  4608  1169  0CC7               	rrf	??_rand+3,f
  4609  116A  0CC6               	rrf	??_rand+2,f
  4610  116B  0CC5               	rrf	??_rand+1,f
  4611  116C  0CC4               	rrf	??_rand,f
  4612  116D  0BC8               	decfsz	??_rand+4,f
  4613  116E  2968               	goto	u4915
  4614  116F  30FF               	movlw	255
  4615  1170  0544               	andwf	??_rand,w
  4616  1171  00C2               	movwf	?_rand
  4617  1172  307F               	movlw	127
  4618  1173  0545               	andwf	??_rand+1,w
  4619  1174  00C3               	movwf	?_rand+1
  4620  1175  0008               	return
  4621  1176                     __end_of_rand:	
  4622                           
  4623                           	psect	text7
  4624  1020                     __ptext7:	
  4625 ;; *************** function ___lmul *****************
  4626 ;; Defined at:
  4627 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  multiplier      4   21[BANK0 ] unsigned long 
  4630 ;;  multiplicand    4   25[BANK0 ] unsigned long 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  product         4   30[BANK0 ] unsigned long 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  4   21[BANK0 ] unsigned long 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4642 ;;      Params:         0       8       0       0       0
  4643 ;;      Locals:         0       4       0       0       0
  4644 ;;      Temps:          0       1       0       0       0
  4645 ;;      Totals:         0      13       0       0       0
  4646 ;;Total ram usage:       13 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    4
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_rand
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function ___lmul
  4658  1020                     ___lmul:	
  4659                           
  4660                           ;incstack = 0
  4661 ;; hardware stack exceeded
  4662                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4663  1020  3000               	movlw	0
  4664  1021  1283               	bcf	3,5	;RP0=0, select bank0
  4665  1022  1303               	bcf	3,6	;RP1=0, select bank0
  4666  1023  00C1               	movwf	___lmul@product+3
  4667  1024  3000               	movlw	0
  4668  1025  00C0               	movwf	___lmul@product+2
  4669  1026  3000               	movlw	0
  4670  1027  00BF               	movwf	___lmul@product+1
  4671  1028  3000               	movlw	0
  4672  1029  00BE               	movwf	___lmul@product
  4673  102A                     l3953:	
  4674  102A  1C35               	btfss	___lmul@multiplier,0
  4675  102B  2840               	goto	l3957
  4676  102C  0839               	movf	___lmul@multiplicand,w
  4677  102D  07BE               	addwf	___lmul@product,f
  4678  102E  083A               	movf	___lmul@multiplicand+1,w
  4679  102F  1103               	clrz
  4680  1030  1803               	skipnc
  4681  1031  3E01               	addlw	1
  4682  1032  1D03               	btfss	3,2
  4683  1033  07BF               	addwf	___lmul@product+1,f
  4684  1034  083B               	movf	___lmul@multiplicand+2,w
  4685  1035  1103               	clrz
  4686  1036  1803               	skipnc
  4687  1037  3E01               	addlw	1
  4688  1038  1D03               	btfss	3,2
  4689  1039  07C0               	addwf	___lmul@product+2,f
  4690  103A  083C               	movf	___lmul@multiplicand+3,w
  4691  103B  1103               	clrz
  4692  103C  1803               	skipnc
  4693  103D  3E01               	addlw	1
  4694  103E  1D03               	btfss	3,2
  4695  103F  07C1               	addwf	___lmul@product+3,f
  4696  1040                     l3957:	
  4697  1040  3001               	movlw	1
  4698  1041  00BD               	movwf	??___lmul
  4699  1042                     u4815:	
  4700  1042  1003               	clrc
  4701  1043  0DB9               	rlf	___lmul@multiplicand,f
  4702  1044  0DBA               	rlf	___lmul@multiplicand+1,f
  4703  1045  0DBB               	rlf	___lmul@multiplicand+2,f
  4704  1046  0DBC               	rlf	___lmul@multiplicand+3,f
  4705  1047  0BBD               	decfsz	??___lmul,f
  4706  1048  2842               	goto	u4815
  4707  1049  3001               	movlw	1
  4708  104A                     u4825:	
  4709  104A  1003               	clrc
  4710  104B  0CB8               	rrf	___lmul@multiplier+3,f
  4711  104C  0CB7               	rrf	___lmul@multiplier+2,f
  4712  104D  0CB6               	rrf	___lmul@multiplier+1,f
  4713  104E  0CB5               	rrf	___lmul@multiplier,f
  4714  104F  3EFF               	addlw	-1
  4715  1050  1D03               	skipz
  4716  1051  284A               	goto	u4825
  4717  1052  0838               	movf	___lmul@multiplier+3,w
  4718  1053  0437               	iorwf	___lmul@multiplier+2,w
  4719  1054  0436               	iorwf	___lmul@multiplier+1,w
  4720  1055  0435               	iorwf	___lmul@multiplier,w
  4721  1056  1D03               	skipz
  4722  1057  282A               	goto	l3953
  4723  1058  0841               	movf	___lmul@product+3,w
  4724  1059  00B8               	movwf	?___lmul+3
  4725  105A  0840               	movf	___lmul@product+2,w
  4726  105B  00B7               	movwf	?___lmul+2
  4727  105C  083F               	movf	___lmul@product+1,w
  4728  105D  00B6               	movwf	?___lmul+1
  4729  105E  083E               	movf	___lmul@product,w
  4730  105F  00B5               	movwf	?___lmul
  4731  1060  0008               	return
  4732  1061                     __end_of___lmul:	
  4733                           
  4734                           	psect	text8
  4735  1257                     __ptext8:	
  4736 ;; *************** function ___awmod *****************
  4737 ;; Defined at:
  4738 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  divisor         2    0[BANK1 ] int 
  4741 ;;  dividend        2    2[BANK1 ] int 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  sign            1    5[BANK1 ] unsigned char 
  4744 ;;  counter         1    4[BANK1 ] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  2    0[BANK1 ] int 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4754 ;;      Params:         0       0       4       0       0
  4755 ;;      Locals:         0       0       2       0       0
  4756 ;;      Temps:          0       1       0       0       0
  4757 ;;      Totals:         0       1       6       0       0
  4758 ;;Total ram usage:        7 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    4
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_sys
  4765 ;;		_USARTWriteInt
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           
  4770                           ;psect for function ___awmod
  4771  1257                     ___awmod:	
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4775  1257  1683               	bsf	3,5	;RP0=1, select bank1
  4776  1258  1303               	bcf	3,6	;RP1=0, select bank1
  4777  1259  01A5               	clrf	___awmod@sign^(0+128)
  4778  125A  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  4779  125B  2A63               	goto	l4063
  4780  125C  09A2               	comf	___awmod@dividend^(0+128),f
  4781  125D  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4782  125E  0AA2               	incf	___awmod@dividend^(0+128),f
  4783  125F  1903               	skipnz
  4784  1260  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4785  1261  01A5               	clrf	___awmod@sign^(0+128)
  4786  1262  0AA5               	incf	___awmod@sign^(0+128),f
  4787  1263                     l4063:	
  4788  1263  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  4789  1264  2A6A               	goto	l4067
  4790  1265  09A0               	comf	___awmod@divisor^(0+128),f
  4791  1266  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  4792  1267  0AA0               	incf	___awmod@divisor^(0+128),f
  4793  1268  1903               	skipnz
  4794  1269  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  4795  126A                     l4067:	
  4796  126A  0820               	movf	___awmod@divisor^(0+128),w
  4797  126B  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  4798  126C  1903               	btfsc	3,2
  4799  126D  2A9B               	goto	l4085
  4800  126E  01A4               	clrf	___awmod@counter^(0+128)
  4801  126F  0AA4               	incf	___awmod@counter^(0+128),f
  4802  1270                     l4075:	
  4803  1270  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  4804  1271  2A82               	goto	l4077
  4805  1272  3001               	movlw	1
  4806  1273                     u5015:	
  4807  1273  1003               	clrc
  4808  1274  0DA0               	rlf	___awmod@divisor^(0+128),f
  4809  1275  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  4810  1276  3EFF               	addlw	-1
  4811  1277  1D03               	skipz
  4812  1278  2A73               	goto	u5015
  4813  1279  3001               	movlw	1
  4814  127A  1283               	bcf	3,5	;RP0=0, select bank0
  4815  127B  1303               	bcf	3,6	;RP1=0, select bank0
  4816  127C  00C9               	movwf	??___awmod
  4817  127D  0849               	movf	??___awmod,w
  4818  127E  1683               	bsf	3,5	;RP0=1, select bank1
  4819  127F  1303               	bcf	3,6	;RP1=0, select bank1
  4820  1280  07A4               	addwf	___awmod@counter^(0+128),f
  4821  1281  2A70               	goto	l4075
  4822  1282                     l4077:	
  4823  1282  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4824  1283  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  4825  1284  1D03               	skipz
  4826  1285  2A88               	goto	u5035
  4827  1286  0820               	movf	___awmod@divisor^(0+128),w
  4828  1287  0222               	subwf	___awmod@dividend^(0+128),w
  4829  1288                     u5035:	
  4830  1288  1C03               	skipc
  4831  1289  2A90               	goto	l4081
  4832  128A  0820               	movf	___awmod@divisor^(0+128),w
  4833  128B  02A2               	subwf	___awmod@dividend^(0+128),f
  4834  128C  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4835  128D  1C03               	skipc
  4836  128E  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  4837  128F  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  4838  1290                     l4081:	
  4839  1290  3001               	movlw	1
  4840  1291                     u5045:	
  4841  1291  1003               	clrc
  4842  1292  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  4843  1293  0CA0               	rrf	___awmod@divisor^(0+128),f
  4844  1294  3EFF               	addlw	-1
  4845  1295  1D03               	skipz
  4846  1296  2A91               	goto	u5045
  4847  1297  3001               	movlw	1
  4848  1298  02A4               	subwf	___awmod@counter^(0+128),f
  4849  1299  1D03               	btfss	3,2
  4850  129A  2A82               	goto	l4077
  4851  129B                     l4085:	
  4852  129B  0825               	movf	___awmod@sign^(0+128),w
  4853  129C  1903               	btfsc	3,2
  4854  129D  2AA3               	goto	l4089
  4855  129E  09A2               	comf	___awmod@dividend^(0+128),f
  4856  129F  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4857  12A0  0AA2               	incf	___awmod@dividend^(0+128),f
  4858  12A1  1903               	skipnz
  4859  12A2  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4860  12A3                     l4089:	
  4861  12A3  0823               	movf	(___awmod@dividend+1)^(0+128),w
  4862  12A4  00A1               	movwf	(?___awmod+1)^(0+128)
  4863  12A5  0822               	movf	___awmod@dividend^(0+128),w
  4864  12A6  00A0               	movwf	?___awmod^(0+128)
  4865  12A7  0008               	return
  4866  12A8                     __end_of___awmod:	
  4867                           
  4868                           	psect	text9
  4869  1D87                     __ptext9:	
  4870 ;; *************** function _strlen *****************
  4871 ;; Defined at:
  4872 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  s               2   21[BANK0 ] PTR const unsigned char 
  4875 ;;		 -> choice@duty_562(10), choice@duty_555(10), choice@time(10), choice@duty(10), 
  4876 ;;		 -> content(25), 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
  4879 ;;		 -> choice@duty_562(10), choice@duty_555(10), choice@time(10), choice@duty(10), 
  4880 ;;		 -> content(25), 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  2   21[BANK0 ] unsigned int 
  4883 ;; Registers used:
  4884 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4890 ;;      Params:         0       2       0       0       0
  4891 ;;      Locals:         0       2       0       0       0
  4892 ;;      Temps:          0       2       0       0       0
  4893 ;;      Totals:         0       6       0       0       0
  4894 ;;Total ram usage:        6 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    4
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_choice
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           
  4905                           ;psect for function _strlen
  4906  1D87                     _strlen:	
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  4910  1D87  1283               	bcf	3,5	;RP0=0, select bank0
  4911  1D88  1303               	bcf	3,6	;RP1=0, select bank0
  4912  1D89  0835               	movf	strlen@s,w
  4913  1D8A  00B9               	movwf	strlen@cp
  4914  1D8B  0836               	movf	strlen@s+1,w
  4915  1D8C  00BA               	movwf	strlen@cp+1
  4916  1D8D                     l4237:	
  4917  1D8D  0839               	movf	strlen@cp,w
  4918  1D8E  0084               	movwf	4
  4919  1D8F  1783               	bsf	3,7
  4920  1D90  1C3A               	btfss	strlen@cp+1,0
  4921  1D91  1383               	bcf	3,7
  4922  1D92  0800               	movf	0,w
  4923  1D93  1903               	btfsc	3,2
  4924  1D94  2D9A               	goto	l4239
  4925  1D95  3001               	movlw	1
  4926  1D96  07B9               	addwf	strlen@cp,f
  4927  1D97  1803               	skipnc
  4928  1D98  0ABA               	incf	strlen@cp+1,f
  4929  1D99  2D8D               	goto	l4237
  4930  1D9A                     l4239:	
  4931  1D9A  0935               	comf	strlen@s,w
  4932  1D9B  00B7               	movwf	??_strlen
  4933  1D9C  0936               	comf	strlen@s+1,w
  4934  1D9D  00B8               	movwf	??_strlen+1
  4935  1D9E  0AB7               	incf	??_strlen,f
  4936  1D9F  1903               	skipnz
  4937  1DA0  0AB8               	incf	??_strlen+1,f
  4938  1DA1  0839               	movf	strlen@cp,w
  4939  1DA2  0737               	addwf	??_strlen,w
  4940  1DA3  00B5               	movwf	?_strlen
  4941  1DA4  083A               	movf	strlen@cp+1,w
  4942  1DA5  1803               	skipnc
  4943  1DA6  0A3A               	incf	strlen@cp+1,w
  4944  1DA7  0738               	addwf	??_strlen+1,w
  4945  1DA8  00B6               	movwf	?_strlen+1
  4946  1DA9  0008               	return
  4947  1DAA                     __end_of_strlen:	
  4948                           
  4949                           	psect	text10
  4950  1EA7                     __ptext10:	
  4951 ;; *************** function _strcspn *****************
  4952 ;; Defined at:
  4953 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  s1              1    wreg     PTR const unsigned char 
  4956 ;;		 -> content(25), 
  4957 ;;  s2              2   27[BANK0 ] PTR const unsigned char 
  4958 ;;		 -> STR_45(2), STR_44(2), STR_42(2), STR_41(2), 
  4959 ;;		 -> STR_39(2), STR_38(2), STR_37(2), 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  s1              1   33[BANK0 ] PTR const unsigned char 
  4962 ;;		 -> content(25), 
  4963 ;;  i               2   31[BANK0 ] unsigned int 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  2   27[BANK0 ] unsigned int 
  4966 ;; Registers used:
  4967 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4973 ;;      Params:         0       2       0       0       0
  4974 ;;      Locals:         0       3       0       0       0
  4975 ;;      Temps:          0       2       0       0       0
  4976 ;;      Totals:         0       7       0       0       0
  4977 ;;Total ram usage:        7 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    5
  4980 ;; This function calls:
  4981 ;;		_strchr
  4982 ;; This function is called by:
  4983 ;;		_choice
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           
  4988                           ;psect for function _strcspn
  4989  1EA7                     _strcspn:	
  4990                           
  4991                           ;incstack = 0
  4992                           ; Regs used in _strcspn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4993                           ;strcspn@s1 stored from wreg
  4994  1EA7  1283               	bcf	3,5	;RP0=0, select bank0
  4995  1EA8  1303               	bcf	3,6	;RP1=0, select bank0
  4996  1EA9  00C1               	movwf	strcspn@s1
  4997  1EAA  01BF               	clrf	strcspn@i
  4998  1EAB  01C0               	clrf	strcspn@i+1
  4999  1EAC  2EB7               	goto	l4227
  5000  1EAD                     l4225:	
  5001  1EAD  3001               	movlw	1
  5002  1EAE  00BD               	movwf	??_strcspn
  5003  1EAF  083D               	movf	??_strcspn,w
  5004  1EB0  07C1               	addwf	strcspn@s1,f
  5005  1EB1  3001               	movlw	1
  5006  1EB2  07BF               	addwf	strcspn@i,f
  5007  1EB3  1803               	skipnc
  5008  1EB4  0AC0               	incf	strcspn@i+1,f
  5009  1EB5  3000               	movlw	0
  5010  1EB6  07C0               	addwf	strcspn@i+1,f
  5011  1EB7                     l4227:	
  5012  1EB7  0841               	movf	strcspn@s1,w
  5013  1EB8  0084               	movwf	4
  5014  1EB9  1383               	bcf	3,7	;select IRP bank0
  5015  1EBA  0800               	movf	0,w
  5016  1EBB  1903               	btfsc	3,2
  5017  1EBC  2ED5               	goto	l4231
  5018  1EBD  083B               	movf	strcspn@s2,w
  5019  1EBE  00B5               	movwf	strchr@ptr
  5020  1EBF  083C               	movf	strcspn@s2+1,w
  5021  1EC0  00B6               	movwf	strchr@ptr+1
  5022  1EC1  0841               	movf	strcspn@s1,w
  5023  1EC2  0084               	movwf	4
  5024  1EC3  0800               	movf	0,w
  5025  1EC4  00BD               	movwf	??_strcspn
  5026  1EC5  01BE               	clrf	??_strcspn+1
  5027  1EC6  083D               	movf	??_strcspn,w
  5028  1EC7  00B7               	movwf	strchr@chr
  5029  1EC8  083E               	movf	??_strcspn+1,w
  5030  1EC9  00B8               	movwf	strchr@chr+1
  5031  1ECA  160A  158A  25AA  160A  158A  	fcall	_strchr
  5032  1ECF  1283               	bcf	3,5	;RP0=0, select bank0
  5033  1ED0  1303               	bcf	3,6	;RP1=0, select bank0
  5034  1ED1  0835               	movf	?_strchr,w
  5035  1ED2  0436               	iorwf	?_strchr+1,w
  5036  1ED3  1903               	btfsc	3,2
  5037  1ED4  2EAD               	goto	l4225
  5038  1ED5                     l4231:	
  5039  1ED5  0840               	movf	strcspn@i+1,w
  5040  1ED6  00BC               	movwf	?_strcspn+1
  5041  1ED7  083F               	movf	strcspn@i,w
  5042  1ED8  00BB               	movwf	?_strcspn
  5043  1ED9  0008               	return
  5044  1EDA                     __end_of_strcspn:	
  5045                           
  5046                           	psect	text11
  5047  1DAA                     __ptext11:	
  5048 ;; *************** function _strchr *****************
  5049 ;; Defined at:
  5050 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  ptr             2   21[BANK0 ] PTR const unsigned char 
  5053 ;;		 -> STR_45(2), STR_44(2), STR_42(2), STR_41(2), 
  5054 ;;		 -> STR_39(2), STR_38(2), STR_37(2), 
  5055 ;;  chr             2   23[BANK0 ] int 
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;		None
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  2   21[BANK0 ] PTR unsigned char 
  5060 ;; Registers used:
  5061 ;;		wreg, fsr0l, fsr0h, status,2, btemp+1, pclath
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5067 ;;      Params:         0       4       0       0       0
  5068 ;;      Locals:         0       0       0       0       0
  5069 ;;      Temps:          0       2       0       0       0
  5070 ;;      Totals:         0       6       0       0       0
  5071 ;;Total ram usage:        6 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    4
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_strcspn
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _strchr
  5083  1DAA                     _strchr:	
  5084  1DAA                     l902:	
  5085                           ;incstack = 0
  5086 ;; using string table level
  5087                           ; Regs used in _strchr: [wreg-fsr0h+status,2+btemp+1+pclath]
  5088                           
  5089  1DAA  1283               	bcf	3,5	;RP0=0, select bank0
  5090  1DAB  1303               	bcf	3,6	;RP1=0, select bank0
  5091  1DAC  0836               	movf	strchr@ptr+1,w
  5092  1DAD  00FF               	movwf	127
  5093  1DAE  0835               	movf	strchr@ptr,w
  5094  1DAF  0084               	movwf	4
  5095  1DB0  120A  118A  2100  160A  158A  	fcall	stringtab
  5096  1DB5  0637               	xorwf	strchr@chr,w
  5097  1DB6  1903               	btfsc	3,2
  5098  1DB7  0008               	return
  5099  1DB8  0836               	movf	strchr@ptr+1,w
  5100  1DB9  00BA               	movwf	??_strchr+1
  5101  1DBA  0835               	movf	strchr@ptr,w
  5102  1DBB  00B9               	movwf	??_strchr
  5103  1DBC  0AB5               	incf	strchr@ptr,f
  5104  1DBD  1903               	skipnz
  5105  1DBE  0AB6               	incf	strchr@ptr+1,f
  5106  1DBF  083A               	movf	??_strchr+1,w
  5107  1DC0  00FF               	movwf	127
  5108  1DC1  0839               	movf	??_strchr,w
  5109  1DC2  0084               	movwf	4
  5110  1DC3  120A  118A  2100  160A  158A  	fcall	stringtab
  5111  1DC8  3A00               	xorlw	0
  5112  1DC9  1D03               	skipz
  5113  1DCA  2DAA               	goto	l902
  5114  1DCB  01B5               	clrf	?_strchr
  5115  1DCC  01B6               	clrf	?_strchr+1
  5116  1DCD  0008               	return
  5117  1DCE                     __end_of_strchr:	
  5118                           
  5119                           	psect	text12
  5120  146B                     __ptext12:	
  5121 ;; *************** function _step *****************
  5122 ;; Defined at:
  5123 ;;		line 314 in file "main.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  duty            2   28[BANK1 ] int 
  5126 ;;  time            4   30[BANK1 ] unsigned long 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5138 ;;      Params:         0       0       6       0       0
  5139 ;;      Locals:         0       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0
  5141 ;;      Totals:         0       0       6       0       0
  5142 ;;Total ram usage:        6 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    8
  5145 ;; This function calls:
  5146 ;;		_USARTWriteLine
  5147 ;;		_acquire
  5148 ;;		_set_pwm
  5149 ;;		_sprintf
  5150 ;;		_stop
  5151 ;; This function is called by:
  5152 ;;		_choice
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           
  5157                           ;psect for function _step
  5158  146B                     _step:	
  5159                           
  5160                           ;main.c: 316: if(duty>100){
  5161                           
  5162                           ;incstack = 0
  5163 ;; hardware stack exceeded
  5164                           ; Regs used in _step: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5165  146B  1683               	bsf	3,5	;RP0=1, select bank1
  5166  146C  1303               	bcf	3,6	;RP1=0, select bank1
  5167  146D  083D               	movf	(step@duty+1)^(0+128),w
  5168  146E  3A80               	xorlw	128
  5169  146F  00FF               	movwf	127
  5170  1470  3080               	movlw	128
  5171  1471  027F               	subwf	127,w
  5172  1472  1D03               	skipz
  5173  1473  2C76               	goto	u5285
  5174  1474  3065               	movlw	101
  5175  1475  023C               	subwf	step@duty^(0+128),w
  5176  1476                     u5285:	
  5177  1476  1C03               	skipc
  5178  1477  2C7C               	goto	l4281
  5179                           
  5180                           ;main.c: 317: duty=0;
  5181  1478  1683               	bsf	3,5	;RP0=1, select bank1
  5182  1479  1303               	bcf	3,6	;RP1=0, select bank1
  5183  147A  01BC               	clrf	step@duty^(0+128)
  5184  147B  01BD               	clrf	(step@duty+1)^(0+128)
  5185  147C                     l4281:	
  5186                           
  5187                           ;main.c: 318: }
  5188                           ;main.c: 319: set_pwm(duty);
  5189  147C  1683               	bsf	3,5	;RP0=1, select bank1
  5190  147D  1303               	bcf	3,6	;RP1=0, select bank1
  5191  147E  083D               	movf	(step@duty+1)^(0+128),w
  5192  147F  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  5193  1480  083C               	movf	step@duty^(0+128),w
  5194  1481  00B8               	movwf	set_pwm@percent^(0+128)
  5195  1482  120A  118A  2057  160A  118A  	fcall	_set_pwm
  5196                           
  5197                           ;main.c: 321: sprintf(strBuffer,"%d",duty);
  5198  1487  3051               	movlw	low (STR_52| (0+32768))
  5199  1488  1683               	bsf	3,5	;RP0=1, select bank1
  5200  1489  1303               	bcf	3,6	;RP1=0, select bank1
  5201  148A  00A5               	movwf	sprintf@f^(0+128)
  5202  148B  3086               	movlw	high (STR_52| (0+32768))
  5203  148C  00A6               	movwf	(sprintf@f^(0+128)+1)
  5204  148D  083D               	movf	(step@duty+1)^(0+128),w
  5205  148E  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5206  148F  083C               	movf	step@duty^(0+128),w
  5207  1490  00A7               	movwf	(?_sprintf^(0+128)+2)
  5208  1491  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5209  1492  160A  118A  26EE  160A  118A  	fcall	_sprintf
  5210                           
  5211                           ;main.c: 322: USARTWriteLine(strBuffer);
  5212  1497  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5213  1498  1283               	bcf	3,5	;RP0=0, select bank0
  5214  1499  1303               	bcf	3,6	;RP1=0, select bank0
  5215  149A  00B8               	movwf	USARTWriteLine@str
  5216  149B  3001               	movlw	1
  5217  149C  00B9               	movwf	USARTWriteLine@str+1
  5218  149D  160A  118A  200A  160A  118A  	fcall	_USARTWriteLine
  5219                           
  5220                           ;main.c: 323: sprintf(strBuffer,"%d",time);
  5221  14A2  3051               	movlw	low (STR_52| (0+32768))
  5222  14A3  1683               	bsf	3,5	;RP0=1, select bank1
  5223  14A4  1303               	bcf	3,6	;RP1=0, select bank1
  5224  14A5  00A5               	movwf	sprintf@f^(0+128)
  5225  14A6  3086               	movlw	high (STR_52| (0+32768))
  5226  14A7  00A6               	movwf	(sprintf@f^(0+128)+1)
  5227  14A8  0841               	movf	(step@time+3)^(0+128),w
  5228  14A9  00AA               	movwf	((?_sprintf+3)^(0+128)+2)
  5229  14AA  0840               	movf	(step@time+2)^(0+128),w
  5230  14AB  00A9               	movwf	((?_sprintf+2)^(0+128)+2)
  5231  14AC  083F               	movf	(step@time+1)^(0+128),w
  5232  14AD  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5233  14AE  083E               	movf	step@time^(0+128),w
  5234  14AF  00A7               	movwf	(?_sprintf^(0+128)+2)
  5235  14B0  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5236  14B1  160A  118A  26EE  160A  118A  	fcall	_sprintf
  5237                           
  5238                           ;main.c: 324: USARTWriteLine(strBuffer);
  5239  14B6  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5240  14B7  1283               	bcf	3,5	;RP0=0, select bank0
  5241  14B8  1303               	bcf	3,6	;RP1=0, select bank0
  5242  14B9  00B8               	movwf	USARTWriteLine@str
  5243  14BA  3001               	movlw	1
  5244  14BB  00B9               	movwf	USARTWriteLine@str+1
  5245  14BC  160A  118A  200A  160A  118A  	fcall	_USARTWriteLine
  5246                           
  5247                           ;main.c: 326: if(time == 0){
  5248  14C1  1683               	bsf	3,5	;RP0=1, select bank1
  5249  14C2  1303               	bcf	3,6	;RP1=0, select bank1
  5250  14C3  0841               	movf	(step@time+3)^(0+128),w
  5251  14C4  0440               	iorwf	(step@time+2)^(0+128),w
  5252  14C5  043F               	iorwf	(step@time+1)^(0+128),w
  5253  14C6  043E               	iorwf	step@time^(0+128),w
  5254  14C7  1D03               	skipz
  5255  14C8  2CD2               	goto	l323
  5256                           
  5257                           ;main.c: 328: acquire();
  5258  14C9  120A  118A  27A0  160A  118A  	fcall	_acquire
  5259                           
  5260                           ;main.c: 329: stop();
  5261  14CE  160A  158A  2472   	fcall	_stop
  5262                           
  5263                           ;main.c: 330: }
  5264  14D1  0008               	return
  5265  14D2                     l323:	
  5266                           
  5267                           ;main.c: 331: else{
  5268                           ;main.c: 332: stepEnable = 1;
  5269  14D2  1283               	bcf	3,5	;RP0=0, select bank0
  5270  14D3  1303               	bcf	3,6	;RP1=0, select bank0
  5271  14D4  01D3               	clrf	_stepEnable
  5272  14D5  0AD3               	incf	_stepEnable,f
  5273                           
  5274                           ;main.c: 333: count = 0;
  5275  14D6  01D1               	clrf	_count
  5276  14D7  01D2               	clrf	_count+1
  5277                           
  5278                           ;main.c: 334: max_counters = time;
  5279  14D8  1683               	bsf	3,5	;RP0=1, select bank1
  5280  14D9  1303               	bcf	3,6	;RP1=0, select bank1
  5281  14DA  083F               	movf	(step@time+1)^(0+128),w
  5282  14DB  1283               	bcf	3,5	;RP0=0, select bank0
  5283  14DC  1303               	bcf	3,6	;RP1=0, select bank0
  5284  14DD  00D0               	movwf	_max_counters+1
  5285  14DE  1683               	bsf	3,5	;RP0=1, select bank1
  5286  14DF  1303               	bcf	3,6	;RP1=0, select bank1
  5287  14E0  083E               	movf	step@time^(0+128),w
  5288  14E1  1283               	bcf	3,5	;RP0=0, select bank0
  5289  14E2  1303               	bcf	3,6	;RP1=0, select bank0
  5290  14E3  00CF               	movwf	_max_counters
  5291                           
  5292                           ;main.c: 336: acquire();
  5293  14E4  120A  118A  27A0  160A  118A  	fcall	_acquire
  5294                           
  5295                           ;main.c: 337: USARTWriteLine("If you want stop the system, type:");
  5296  14E9  3005               	movlw	low ((STR_24+8)| (0+32768))
  5297  14EA  1283               	bcf	3,5	;RP0=0, select bank0
  5298  14EB  1303               	bcf	3,6	;RP1=0, select bank0
  5299  14EC  00B8               	movwf	USARTWriteLine@str
  5300  14ED  3084               	movlw	high ((STR_24+8)| (0+32768))
  5301  14EE  00B9               	movwf	USARTWriteLine@str+1
  5302  14EF  160A  118A  200A  160A  118A  	fcall	_USARTWriteLine
  5303                           
  5304                           ;main.c: 338: USARTWriteLine("stop()");
  5305  14F4  303A               	movlw	low (STR_46| (0+32768))
  5306  14F5  1283               	bcf	3,5	;RP0=0, select bank0
  5307  14F6  1303               	bcf	3,6	;RP1=0, select bank0
  5308  14F7  00B8               	movwf	USARTWriteLine@str
  5309  14F8  3086               	movlw	high (STR_46| (0+32768))
  5310  14F9  00B9               	movwf	USARTWriteLine@str+1
  5311  14FA  160A  118A  200A   	fcall	_USARTWriteLine
  5312  14FD  0008               	return
  5313  14FE                     __end_of_step:	
  5314                           
  5315                           	psect	text13
  5316  1C72                     __ptext13:	
  5317 ;; *************** function _stop *****************
  5318 ;; Defined at:
  5319 ;;		line 376 in file "main.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;		None
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      void 
  5326 ;; Registers used:
  5327 ;;		wreg, status,2, status,0, pclath, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5333 ;;      Params:         0       0       0       0       0
  5334 ;;      Locals:         0       0       0       0       0
  5335 ;;      Temps:          0       0       0       0       0
  5336 ;;      Totals:         0       0       0       0       0
  5337 ;;Total ram usage:        0 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    7
  5340 ;; This function calls:
  5341 ;;		_set_pwm
  5342 ;; This function is called by:
  5343 ;;		_main
  5344 ;;		_choice
  5345 ;;		_step
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           
  5350                           ;psect for function _stop
  5351  1C72                     _stop:	
  5352                           
  5353                           ;main.c: 377: set_pwm(0);
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5357  1C72  3000               	movlw	0
  5358  1C73  1683               	bsf	3,5	;RP0=1, select bank1
  5359  1C74  1303               	bcf	3,6	;RP1=0, select bank1
  5360  1C75  00B8               	movwf	set_pwm@percent^(0+128)
  5361  1C76  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  5362  1C77  120A  118A  2057   	fcall	_set_pwm
  5363                           
  5364                           ;main.c: 378: stepEnable = 0;
  5365  1C7A  1283               	bcf	3,5	;RP0=0, select bank0
  5366  1C7B  1303               	bcf	3,6	;RP1=0, select bank0
  5367  1C7C  01D3               	clrf	_stepEnable
  5368                           
  5369                           ;main.c: 379: acquirement = 0;
  5370  1C7D  01D8               	clrf	_acquirement
  5371                           
  5372                           ;main.c: 380: PORTCbits.RC0 = 1;
  5373  1C7E  1407               	bsf	7,0	;volatile
  5374  1C7F  0008               	return
  5375  1C80                     __end_of_stop:	
  5376                           
  5377                           	psect	text14
  5378  080C                     __ptext14:	
  5379 ;; *************** function _status *****************
  5380 ;; Defined at:
  5381 ;;		line 360 in file "main.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  i               2   30[BANK3 ] int 
  5386 ;;  output         25    0[BANK3 ] unsigned char [25]
  5387 ;;  aux             3   25[BANK3 ] float 
  5388 ;;  duty            2   28[BANK3 ] int 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5398 ;;      Params:         0       0       0       0       0
  5399 ;;      Locals:         0       0       0      32       0
  5400 ;;      Temps:          0       0       0       0       0
  5401 ;;      Totals:         0       0       0      32       0
  5402 ;;Total ram usage:       32 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    7
  5405 ;; This function calls:
  5406 ;;		_USARTGotoNewLine
  5407 ;;		_USARTWriteLine
  5408 ;;		___awtoft
  5409 ;;		___ftdiv
  5410 ;;		___ftmul
  5411 ;;		___fttol
  5412 ;;		_adReadA0
  5413 ;;		_sprintf
  5414 ;;		_strcat
  5415 ;;		_strcpy
  5416 ;; This function is called by:
  5417 ;;		_choice
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _status
  5423  080C                     _status:	
  5424                           
  5425                           ;main.c: 361: char output[25];
  5426                           ;main.c: 362: for(int i=0 ; i<25;i++){
  5427                           
  5428                           ;incstack = 0
  5429 ;; hardware stack exceeded
  5430                           ; Regs used in _status: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5431  080C  1683               	bsf	3,5	;RP0=1, select bank3
  5432  080D  1703               	bsf	3,6	;RP1=1, select bank3
  5433  080E  01AE               	clrf	status@i^(0+384)
  5434  080F  01AF               	clrf	(status@i+1)^(0+384)
  5435  0810  082F               	movf	(status@i+1)^(0+384),w
  5436  0811  3A80               	xorlw	128
  5437  0812  00FF               	movwf	127
  5438  0813  3080               	movlw	128
  5439  0814  027F               	subwf	127,w
  5440  0815  1D03               	skipz
  5441  0816  2819               	goto	u5355
  5442  0817  3019               	movlw	25
  5443  0818  022E               	subwf	status@i^(0+384),w
  5444  0819                     u5355:	
  5445  0819  1803               	btfsc	3,0
  5446  081A  2833               	goto	l4379
  5447  081B                     l4373:	
  5448                           
  5449                           ;main.c: 363: output[i] = '\0';
  5450  081B  1683               	bsf	3,5	;RP0=1, select bank3
  5451  081C  1703               	bsf	3,6	;RP1=1, select bank3
  5452  081D  082E               	movf	status@i^(0+384),w
  5453  081E  3E90               	addlw	(low (status@output| (0+256)))& (0+255)
  5454  081F  0084               	movwf	4
  5455  0820  1783               	bsf	3,7	;select IRP bank3
  5456  0821  0180               	clrf	0
  5457  0822  3001               	movlw	1
  5458  0823  07AE               	addwf	status@i^(0+384),f
  5459  0824  1803               	skipnc
  5460  0825  0AAF               	incf	(status@i+1)^(0+384),f
  5461  0826  3000               	movlw	0
  5462  0827  07AF               	addwf	(status@i+1)^(0+384),f
  5463  0828  082F               	movf	(status@i+1)^(0+384),w
  5464  0829  3A80               	xorlw	128
  5465  082A  00FF               	movwf	127
  5466  082B  3080               	movlw	128
  5467  082C  027F               	subwf	127,w
  5468  082D  1D03               	skipz
  5469  082E  2831               	goto	u5365
  5470  082F  3019               	movlw	25
  5471  0830  022E               	subwf	status@i^(0+384),w
  5472  0831                     u5365:	
  5473  0831  1C03               	skipc
  5474  0832  281B               	goto	l4373
  5475  0833                     l4379:	
  5476                           
  5477                           ;main.c: 364: }
  5478                           ;main.c: 365: float aux = (float)(pwm)/1023;
  5479  0833  30C0               	movlw	192
  5480  0834  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0835  1303               	bcf	3,6	;RP1=0, select bank0
  5482  0836  00C3               	movwf	___ftdiv@f2
  5483  0837  307F               	movlw	127
  5484  0838  00C4               	movwf	___ftdiv@f2+1
  5485  0839  3044               	movlw	68
  5486  083A  00C5               	movwf	___ftdiv@f2+2
  5487  083B  1683               	bsf	3,5	;RP0=1, select bank1
  5488  083C  1303               	bcf	3,6	;RP1=0, select bank1
  5489  083D  084F               	movf	(_pwm+1)^(0+128),w
  5490  083E  1283               	bcf	3,5	;RP0=0, select bank0
  5491  083F  1303               	bcf	3,6	;RP1=0, select bank0
  5492  0840  00BE               	movwf	___awtoft@c+1
  5493  0841  1683               	bsf	3,5	;RP0=1, select bank1
  5494  0842  1303               	bcf	3,6	;RP1=0, select bank1
  5495  0843  084E               	movf	_pwm^(0+128),w
  5496  0844  1283               	bcf	3,5	;RP0=0, select bank0
  5497  0845  1303               	bcf	3,6	;RP1=0, select bank0
  5498  0846  00BD               	movwf	___awtoft@c
  5499  0847  160A  158A  25F3  120A  158A  	fcall	___awtoft
  5500  084C  1283               	bcf	3,5	;RP0=0, select bank0
  5501  084D  1303               	bcf	3,6	;RP1=0, select bank0
  5502  084E  083D               	movf	?___awtoft,w
  5503  084F  00C6               	movwf	___ftdiv@f1
  5504  0850  083E               	movf	?___awtoft+1,w
  5505  0851  00C7               	movwf	___ftdiv@f1+1
  5506  0852  083F               	movf	?___awtoft+2,w
  5507  0853  00C8               	movwf	___ftdiv@f1+2
  5508  0854  160A  118A  25E6  120A  158A  	fcall	___ftdiv
  5509  0859  1283               	bcf	3,5	;RP0=0, select bank0
  5510  085A  1303               	bcf	3,6	;RP1=0, select bank0
  5511  085B  0843               	movf	?___ftdiv,w
  5512  085C  1683               	bsf	3,5	;RP0=1, select bank3
  5513  085D  1703               	bsf	3,6	;RP1=1, select bank3
  5514  085E  00A9               	movwf	status@aux^(0+384)
  5515  085F  1283               	bcf	3,5	;RP0=0, select bank0
  5516  0860  1303               	bcf	3,6	;RP1=0, select bank0
  5517  0861  0844               	movf	?___ftdiv+1,w
  5518  0862  1683               	bsf	3,5	;RP0=1, select bank3
  5519  0863  1703               	bsf	3,6	;RP1=1, select bank3
  5520  0864  00AA               	movwf	(status@aux+1)^(0+384)
  5521  0865  1283               	bcf	3,5	;RP0=0, select bank0
  5522  0866  1303               	bcf	3,6	;RP1=0, select bank0
  5523  0867  0845               	movf	?___ftdiv+2,w
  5524  0868  1683               	bsf	3,5	;RP0=1, select bank3
  5525  0869  1703               	bsf	3,6	;RP1=1, select bank3
  5526  086A  00AB               	movwf	(status@aux+2)^(0+384)
  5527                           
  5528                           ;main.c: 366: int duty = (int) (aux*100);
  5529  086B  0829               	movf	status@aux^(0+384),w
  5530  086C  1283               	bcf	3,5	;RP0=0, select bank0
  5531  086D  1303               	bcf	3,6	;RP1=0, select bank0
  5532  086E  00C6               	movwf	___ftmul@f2
  5533  086F  1683               	bsf	3,5	;RP0=1, select bank3
  5534  0870  1703               	bsf	3,6	;RP1=1, select bank3
  5535  0871  082A               	movf	(status@aux+1)^(0+384),w
  5536  0872  1283               	bcf	3,5	;RP0=0, select bank0
  5537  0873  1303               	bcf	3,6	;RP1=0, select bank0
  5538  0874  00C7               	movwf	___ftmul@f2+1
  5539  0875  1683               	bsf	3,5	;RP0=1, select bank3
  5540  0876  1703               	bsf	3,6	;RP1=1, select bank3
  5541  0877  082B               	movf	(status@aux+2)^(0+384),w
  5542  0878  1283               	bcf	3,5	;RP0=0, select bank0
  5543  0879  1303               	bcf	3,6	;RP1=0, select bank0
  5544  087A  00C8               	movwf	___ftmul@f2+2
  5545  087B  3000               	movlw	0
  5546  087C  00C3               	movwf	___ftmul@f1
  5547  087D  30C8               	movlw	200
  5548  087E  00C4               	movwf	___ftmul@f1+1
  5549  087F  3042               	movlw	66
  5550  0880  00C5               	movwf	___ftmul@f1+2
  5551  0881  120A  118A  265A  120A  158A  	fcall	___ftmul
  5552  0886  1283               	bcf	3,5	;RP0=0, select bank0
  5553  0887  1303               	bcf	3,6	;RP1=0, select bank0
  5554  0888  0843               	movf	?___ftmul,w
  5555  0889  1683               	bsf	3,5	;RP0=1, select bank1
  5556  088A  1303               	bcf	3,6	;RP1=0, select bank1
  5557  088B  00AA               	movwf	___fttol@f1^(0+128)
  5558  088C  1283               	bcf	3,5	;RP0=0, select bank0
  5559  088D  1303               	bcf	3,6	;RP1=0, select bank0
  5560  088E  0844               	movf	?___ftmul+1,w
  5561  088F  1683               	bsf	3,5	;RP0=1, select bank1
  5562  0890  1303               	bcf	3,6	;RP1=0, select bank1
  5563  0891  00AB               	movwf	(___fttol@f1+1)^(0+128)
  5564  0892  1283               	bcf	3,5	;RP0=0, select bank0
  5565  0893  1303               	bcf	3,6	;RP1=0, select bank0
  5566  0894  0845               	movf	?___ftmul+2,w
  5567  0895  1683               	bsf	3,5	;RP0=1, select bank1
  5568  0896  1303               	bcf	3,6	;RP1=0, select bank1
  5569  0897  00AC               	movwf	(___fttol@f1+2)^(0+128)
  5570  0898  160A  118A  23DD  120A  158A  	fcall	___fttol
  5571  089D  1683               	bsf	3,5	;RP0=1, select bank1
  5572  089E  1303               	bcf	3,6	;RP1=0, select bank1
  5573  089F  082B               	movf	(?___fttol+1)^(0+128),w
  5574  08A0  1683               	bsf	3,5	;RP0=1, select bank3
  5575  08A1  1703               	bsf	3,6	;RP1=1, select bank3
  5576  08A2  00AD               	movwf	(status@duty+1)^(0+384)
  5577  08A3  1683               	bsf	3,5	;RP0=1, select bank1
  5578  08A4  1303               	bcf	3,6	;RP1=0, select bank1
  5579  08A5  082A               	movf	?___fttol^(0+128),w
  5580  08A6  1683               	bsf	3,5	;RP0=1, select bank3
  5581  08A7  1703               	bsf	3,6	;RP1=1, select bank3
  5582  08A8  00AC               	movwf	status@duty^(0+384)
  5583                           
  5584                           ;main.c: 367: strcpy(output, "The duty-cycle of PWM is: ");
  5585  08A9  3082               	movlw	low (STR_58| (0+32768))
  5586  08AA  1283               	bcf	3,5	;RP0=0, select bank0
  5587  08AB  1303               	bcf	3,6	;RP1=0, select bank0
  5588  08AC  00B5               	movwf	strcpy@from
  5589  08AD  3084               	movlw	high (STR_58| (0+32768))
  5590  08AE  00B6               	movwf	strcpy@from+1
  5591  08AF  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5592  08B0  160A  158A  24B6  120A  158A  	fcall	_strcpy
  5593                           
  5594                           ;main.c: 368: sprintf(strBuffer,"%d",duty);
  5595  08B5  3051               	movlw	low (STR_52| (0+32768))
  5596  08B6  1683               	bsf	3,5	;RP0=1, select bank1
  5597  08B7  1303               	bcf	3,6	;RP1=0, select bank1
  5598  08B8  00A5               	movwf	sprintf@f^(0+128)
  5599  08B9  3086               	movlw	high (STR_52| (0+32768))
  5600  08BA  00A6               	movwf	(sprintf@f^(0+128)+1)
  5601  08BB  1683               	bsf	3,5	;RP0=1, select bank3
  5602  08BC  1703               	bsf	3,6	;RP1=1, select bank3
  5603  08BD  082D               	movf	(status@duty+1)^(0+384),w
  5604  08BE  1683               	bsf	3,5	;RP0=1, select bank1
  5605  08BF  1303               	bcf	3,6	;RP1=0, select bank1
  5606  08C0  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5607  08C1  1683               	bsf	3,5	;RP0=1, select bank3
  5608  08C2  1703               	bsf	3,6	;RP1=1, select bank3
  5609  08C3  082C               	movf	status@duty^(0+384),w
  5610  08C4  1683               	bsf	3,5	;RP0=1, select bank1
  5611  08C5  1303               	bcf	3,6	;RP1=0, select bank1
  5612  08C6  00A7               	movwf	(?_sprintf^(0+128)+2)
  5613  08C7  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5614  08C8  160A  118A  26EE  120A  158A  	fcall	_sprintf
  5615                           
  5616                           ;main.c: 369: strcat(output, strBuffer);
  5617  08CD  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5618  08CE  1283               	bcf	3,5	;RP0=0, select bank0
  5619  08CF  1303               	bcf	3,6	;RP1=0, select bank0
  5620  08D0  00B5               	movwf	strcat@from
  5621  08D1  3001               	movlw	1
  5622  08D2  00B6               	movwf	strcat@from+1
  5623  08D3  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5624  08D4  160A  158A  2618  120A  158A  	fcall	_strcat
  5625                           
  5626                           ;main.c: 370: strcat(output, "%");
  5627  08D9  3054               	movlw	low (STR_60| (0+32768))
  5628  08DA  1283               	bcf	3,5	;RP0=0, select bank0
  5629  08DB  1303               	bcf	3,6	;RP1=0, select bank0
  5630  08DC  00B5               	movwf	strcat@from
  5631  08DD  3086               	movlw	high (STR_60| (0+32768))
  5632  08DE  00B6               	movwf	strcat@from+1
  5633  08DF  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5634  08E0  160A  158A  2618  120A  158A  	fcall	_strcat
  5635                           
  5636                           ;main.c: 371: USARTWriteLine(output);
  5637  08E5  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5638  08E6  1283               	bcf	3,5	;RP0=0, select bank0
  5639  08E7  1303               	bcf	3,6	;RP1=0, select bank0
  5640  08E8  00B8               	movwf	USARTWriteLine@str
  5641  08E9  3001               	movlw	1
  5642  08EA  00B9               	movwf	USARTWriteLine@str+1
  5643  08EB  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  5644                           
  5645                           ;main.c: 372: USARTGotoNewLine();
  5646  08F0  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  5647                           
  5648                           ;main.c: 373: adReadA0();
  5649  08F5  160A  158A  2785   	fcall	_adReadA0
  5650  08F8  0008               	return
  5651  08F9                     __end_of_status:	
  5652                           
  5653                           	psect	text15
  5654  1CB6                     __ptext15:	
  5655 ;; *************** function _strcpy *****************
  5656 ;; Defined at:
  5657 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  to              1    wreg     PTR unsigned char 
  5660 ;;		 -> status@output(25), 
  5661 ;;  from            2   21[BANK0 ] PTR const unsigned char 
  5662 ;;		 -> STR_58(27), 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  to              1   24[BANK0 ] PTR unsigned char 
  5665 ;;		 -> status@output(25), 
  5666 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  5667 ;;		 -> status@output(25), 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      PTR unsigned char 
  5670 ;; Registers used:
  5671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5677 ;;      Params:         0       2       0       0       0
  5678 ;;      Locals:         0       2       0       0       0
  5679 ;;      Temps:          0       1       0       0       0
  5680 ;;      Totals:         0       5       0       0       0
  5681 ;;Total ram usage:        5 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    4
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_status
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           
  5692                           ;psect for function _strcpy
  5693  1CB6                     _strcpy:	
  5694                           
  5695                           ;incstack = 0
  5696 ;; using string table level
  5697                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5698                           ;strcpy@to stored from wreg
  5699  1CB6  1283               	bcf	3,5	;RP0=0, select bank0
  5700  1CB7  1303               	bcf	3,6	;RP1=0, select bank0
  5701  1CB8  00B8               	movwf	strcpy@to
  5702  1CB9  0838               	movf	strcpy@to,w
  5703  1CBA  00B7               	movwf	??_strcpy
  5704  1CBB  0837               	movf	??_strcpy,w
  5705  1CBC  00B9               	movwf	strcpy@cp
  5706  1CBD                     l3999:	
  5707  1CBD  0836               	movf	strcpy@from+1,w
  5708  1CBE  00FF               	movwf	127
  5709  1CBF  0835               	movf	strcpy@from,w
  5710  1CC0  0084               	movwf	4
  5711  1CC1  120A  118A  2100  160A  158A  	fcall	stringtab
  5712  1CC6  00B7               	movwf	??_strcpy
  5713  1CC7  0839               	movf	strcpy@cp,w
  5714  1CC8  0084               	movwf	4
  5715  1CC9  0837               	movf	??_strcpy,w
  5716  1CCA  1783               	bsf	3,7	;select IRP bank2
  5717  1CCB  0080               	movwf	0
  5718  1CCC  0800               	movf	0,w
  5719  1CCD  1903               	btfsc	3,2
  5720  1CCE  0008               	return
  5721  1CCF  3001               	movlw	1
  5722  1CD0  00B7               	movwf	??_strcpy
  5723  1CD1  0837               	movf	??_strcpy,w
  5724  1CD2  07B9               	addwf	strcpy@cp,f
  5725  1CD3  3001               	movlw	1
  5726  1CD4  07B5               	addwf	strcpy@from,f
  5727  1CD5  1803               	skipnc
  5728  1CD6  0AB6               	incf	strcpy@from+1,f
  5729  1CD7  2CBD               	goto	l3999
  5730  1CD8                     __end_of_strcpy:	
  5731                           ;	Return value of _strcpy is never used
  5732                           
  5733                           
  5734                           	psect	text16
  5735  1E18                     __ptext16:	
  5736 ;; *************** function _strcat *****************
  5737 ;; Defined at:
  5738 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  to              1    wreg     PTR unsigned char 
  5741 ;;		 -> status@output(25), 
  5742 ;;  from            2   21[BANK0 ] PTR const unsigned char 
  5743 ;;		 -> STR_60(2), strBuffer(25), 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  to              1   24[BANK0 ] PTR unsigned char 
  5746 ;;		 -> status@output(25), 
  5747 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  5748 ;;		 -> status@output(25), 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      PTR unsigned char 
  5751 ;; Registers used:
  5752 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5758 ;;      Params:         0       2       0       0       0
  5759 ;;      Locals:         0       2       0       0       0
  5760 ;;      Temps:          0       1       0       0       0
  5761 ;;      Totals:         0       5       0       0       0
  5762 ;;Total ram usage:        5 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    4
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_status
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _strcat
  5774  1E18                     _strcat:	
  5775                           
  5776                           ;incstack = 0
  5777 ;; using string table level
  5778                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5779                           ;strcat@to stored from wreg
  5780  1E18  1283               	bcf	3,5	;RP0=0, select bank0
  5781  1E19  1303               	bcf	3,6	;RP1=0, select bank0
  5782  1E1A  00B8               	movwf	strcat@to
  5783  1E1B  0838               	movf	strcat@to,w
  5784  1E1C  00B7               	movwf	??_strcat
  5785  1E1D  0837               	movf	??_strcat,w
  5786  1E1E  00B9               	movwf	strcat@cp
  5787  1E1F                     l4005:	
  5788  1E1F  0839               	movf	strcat@cp,w
  5789  1E20  0084               	movwf	4
  5790  1E21  1783               	bsf	3,7	;select IRP bank2
  5791  1E22  0800               	movf	0,w
  5792  1E23  1903               	btfsc	3,2
  5793  1E24  2E32               	goto	l4011
  5794  1E25  3001               	movlw	1
  5795  1E26  00B7               	movwf	??_strcat
  5796  1E27  0837               	movf	??_strcat,w
  5797  1E28  07B9               	addwf	strcat@cp,f
  5798  1E29  2E1F               	goto	l4005
  5799  1E2A                     l4007:	
  5800  1E2A  3001               	movlw	1
  5801  1E2B  00B7               	movwf	??_strcat
  5802  1E2C  0837               	movf	??_strcat,w
  5803  1E2D  07B9               	addwf	strcat@cp,f
  5804  1E2E  3001               	movlw	1
  5805  1E2F  07B5               	addwf	strcat@from,f
  5806  1E30  1803               	skipnc
  5807  1E31  0AB6               	incf	strcat@from+1,f
  5808  1E32                     l4011:	
  5809  1E32  0836               	movf	strcat@from+1,w
  5810  1E33  00FF               	movwf	127
  5811  1E34  0835               	movf	strcat@from,w
  5812  1E35  0084               	movwf	4
  5813  1E36  120A  118A  2100  160A  158A  	fcall	stringtab
  5814  1E3B  00B7               	movwf	??_strcat
  5815  1E3C  0839               	movf	strcat@cp,w
  5816  1E3D  0084               	movwf	4
  5817  1E3E  0837               	movf	??_strcat,w
  5818  1E3F  1783               	bsf	3,7	;select IRP bank2
  5819  1E40  0080               	movwf	0
  5820  1E41  0800               	movf	0,w
  5821  1E42  1903               	btfsc	3,2
  5822  1E43  0008               	return
  5823  1E44  2E2A               	goto	l4007
  5824  1E45                     __end_of_strcat:	
  5825                           ;	Return value of _strcat is never used
  5826                           
  5827                           
  5828                           	psect	text17
  5829  1F85                     __ptext17:	
  5830 ;; *************** function _adReadA0 *****************
  5831 ;; Defined at:
  5832 ;;		line 405 in file "main.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;		None
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;  valueAD         2   21[BANK1 ] unsigned int 
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  1    wreg      void 
  5839 ;; Registers used:
  5840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5846 ;;      Params:         0       0       0       0       0
  5847 ;;      Locals:         0       0       2       0       0
  5848 ;;      Temps:          0       0       0       0       0
  5849 ;;      Totals:         0       0       2       0       0
  5850 ;;Total ram usage:        2 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; Hardware stack levels required when called:    6
  5853 ;; This function calls:
  5854 ;;		_USARTWriteString
  5855 ;;		_sampling
  5856 ;;		_sprintf
  5857 ;; This function is called by:
  5858 ;;		_status
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _adReadA0
  5864  1F85                     _adReadA0:	
  5865                           
  5866                           ;main.c: 406: unsigned int valueAD = sampling();
  5867                           
  5868                           ;incstack = 0
  5869 ;; hardware stack exceeded
  5870                           ; Regs used in _adReadA0: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5871  1F85  160A  158A  24A1  160A  158A  	fcall	_sampling
  5872  1F8A  1283               	bcf	3,5	;RP0=0, select bank0
  5873  1F8B  1303               	bcf	3,6	;RP1=0, select bank0
  5874  1F8C  0836               	movf	?_sampling+1,w
  5875  1F8D  1683               	bsf	3,5	;RP0=1, select bank1
  5876  1F8E  1303               	bcf	3,6	;RP1=0, select bank1
  5877  1F8F  00B6               	movwf	(adReadA0@valueAD+1)^(0+128)
  5878  1F90  1283               	bcf	3,5	;RP0=0, select bank0
  5879  1F91  1303               	bcf	3,6	;RP1=0, select bank0
  5880  1F92  0835               	movf	?_sampling,w
  5881  1F93  1683               	bsf	3,5	;RP0=1, select bank1
  5882  1F94  1303               	bcf	3,6	;RP1=0, select bank1
  5883  1F95  00B5               	movwf	adReadA0@valueAD^(0+128)
  5884                           
  5885                           ;main.c: 407: if(valueAD<=1023 && valueAD >= 0){
  5886  1F96  3004               	movlw	4
  5887  1F97  0236               	subwf	(adReadA0@valueAD+1)^(0+128),w
  5888  1F98  3000               	movlw	0
  5889  1F99  1903               	skipnz
  5890  1F9A  0235               	subwf	adReadA0@valueAD^(0+128),w
  5891  1F9B  1803               	skipnc
  5892  1F9C  0008               	return
  5893                           
  5894                           ;main.c: 408: USARTWriteString("The analog value is: ");
  5895  1F9D  309D               	movlw	low (STR_61| (0+32768))
  5896  1F9E  1283               	bcf	3,5	;RP0=0, select bank0
  5897  1F9F  1303               	bcf	3,6	;RP1=0, select bank0
  5898  1FA0  00B6               	movwf	USARTWriteString@str
  5899  1FA1  3084               	movlw	high (STR_61| (0+32768))
  5900  1FA2  00B7               	movwf	USARTWriteString@str+1
  5901  1FA3  160A  158A  25CE  160A  158A  	fcall	_USARTWriteString
  5902                           
  5903                           ;main.c: 409: sprintf(strBuffer,"%d",valueAD);
  5904  1FA8  3051               	movlw	low (STR_52| (0+32768))
  5905  1FA9  1683               	bsf	3,5	;RP0=1, select bank1
  5906  1FAA  1303               	bcf	3,6	;RP1=0, select bank1
  5907  1FAB  00A5               	movwf	sprintf@f^(0+128)
  5908  1FAC  3086               	movlw	high (STR_52| (0+32768))
  5909  1FAD  00A6               	movwf	(sprintf@f^(0+128)+1)
  5910  1FAE  0836               	movf	(adReadA0@valueAD+1)^(0+128),w
  5911  1FAF  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  5912  1FB0  0835               	movf	adReadA0@valueAD^(0+128),w
  5913  1FB1  00A7               	movwf	(?_sprintf^(0+128)+2)
  5914  1FB2  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5915  1FB3  160A  118A  26EE  160A  158A  	fcall	_sprintf
  5916                           
  5917                           ;main.c: 410: USARTWriteString(strBuffer);
  5918  1FB8  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5919  1FB9  1283               	bcf	3,5	;RP0=0, select bank0
  5920  1FBA  1303               	bcf	3,6	;RP1=0, select bank0
  5921  1FBB  00B6               	movwf	USARTWriteString@str
  5922  1FBC  3001               	movlw	1
  5923  1FBD  00B7               	movwf	USARTWriteString@str+1
  5924  1FBE  160A  158A  25CE   	fcall	_USARTWriteString
  5925  1FC1  0008               	return
  5926  1FC2                     __end_of_adReadA0:	
  5927                           
  5928                           	psect	text18
  5929  15E6                     __ptext18:	
  5930 ;; *************** function ___ftdiv *****************
  5931 ;; Defined at:
  5932 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  f2              3   35[BANK0 ] float 
  5935 ;;  f1              3   38[BANK0 ] float 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  f3              3    5[BANK1 ] float 
  5938 ;;  sign            1    9[BANK1 ] unsigned char 
  5939 ;;  exp             1    8[BANK1 ] unsigned char 
  5940 ;;  cntr            1    4[BANK1 ] unsigned char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  3   35[BANK0 ] float 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, pclath, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5950 ;;      Params:         0       6       0       0       0
  5951 ;;      Locals:         0       0       6       0       0
  5952 ;;      Temps:          0       0       4       0       0
  5953 ;;      Totals:         0       6      10       0       0
  5954 ;;Total ram usage:       16 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    5
  5957 ;; This function calls:
  5958 ;;		___ftpack
  5959 ;; This function is called by:
  5960 ;;		_status
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           
  5965                           ;psect for function ___ftdiv
  5966  15E6                     ___ftdiv:	
  5967                           
  5968                           ;incstack = 0
  5969 ;; hardware stack exceeded
  5970                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5971  15E6  1283               	bcf	3,5	;RP0=0, select bank0
  5972  15E7  1303               	bcf	3,6	;RP1=0, select bank0
  5973  15E8  0846               	movf	___ftdiv@f1,w
  5974  15E9  1683               	bsf	3,5	;RP0=1, select bank1
  5975  15EA  1303               	bcf	3,6	;RP1=0, select bank1
  5976  15EB  00A0               	movwf	??___ftdiv^(0+128)
  5977  15EC  1283               	bcf	3,5	;RP0=0, select bank0
  5978  15ED  1303               	bcf	3,6	;RP1=0, select bank0
  5979  15EE  0847               	movf	___ftdiv@f1+1,w
  5980  15EF  1683               	bsf	3,5	;RP0=1, select bank1
  5981  15F0  1303               	bcf	3,6	;RP1=0, select bank1
  5982  15F1  00A1               	movwf	(??___ftdiv^(0+128)+1)
  5983  15F2  1283               	bcf	3,5	;RP0=0, select bank0
  5984  15F3  1303               	bcf	3,6	;RP1=0, select bank0
  5985  15F4  0848               	movf	___ftdiv@f1+2,w
  5986  15F5  1683               	bsf	3,5	;RP0=1, select bank1
  5987  15F6  1303               	bcf	3,6	;RP1=0, select bank1
  5988  15F7  00A2               	movwf	(??___ftdiv^(0+128)+2)
  5989  15F8  1003               	clrc
  5990  15F9  0D21               	rlf	(??___ftdiv^(0+128)+1),w
  5991  15FA  0D22               	rlf	(??___ftdiv^(0+128)+2),w
  5992  15FB  00A3               	movwf	(??___ftdiv+3)^(0+128)
  5993  15FC  0823               	movf	(??___ftdiv+3)^(0+128),w
  5994  15FD  00A8               	movwf	___ftdiv@exp^(0+128)
  5995  15FE  0828               	movf	___ftdiv@exp^(0+128),w
  5996  15FF  1D03               	btfss	3,2
  5997  1600  2E0A               	goto	l4099
  5998  1601  3000               	movlw	0
  5999  1602  1283               	bcf	3,5	;RP0=0, select bank0
  6000  1603  1303               	bcf	3,6	;RP1=0, select bank0
  6001  1604  00C3               	movwf	?___ftdiv
  6002  1605  3000               	movlw	0
  6003  1606  00C4               	movwf	?___ftdiv+1
  6004  1607  3000               	movlw	0
  6005  1608  00C5               	movwf	?___ftdiv+2
  6006  1609  0008               	return
  6007  160A                     l4099:	
  6008  160A  1283               	bcf	3,5	;RP0=0, select bank0
  6009  160B  0843               	movf	___ftdiv@f2,w
  6010  160C  1683               	bsf	3,5	;RP0=1, select bank1
  6011  160D  1303               	bcf	3,6	;RP1=0, select bank1
  6012  160E  00A0               	movwf	??___ftdiv^(0+128)
  6013  160F  1283               	bcf	3,5	;RP0=0, select bank0
  6014  1610  1303               	bcf	3,6	;RP1=0, select bank0
  6015  1611  0844               	movf	___ftdiv@f2+1,w
  6016  1612  1683               	bsf	3,5	;RP0=1, select bank1
  6017  1613  1303               	bcf	3,6	;RP1=0, select bank1
  6018  1614  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6019  1615  1283               	bcf	3,5	;RP0=0, select bank0
  6020  1616  1303               	bcf	3,6	;RP1=0, select bank0
  6021  1617  0845               	movf	___ftdiv@f2+2,w
  6022  1618  1683               	bsf	3,5	;RP0=1, select bank1
  6023  1619  1303               	bcf	3,6	;RP1=0, select bank1
  6024  161A  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6025  161B  1003               	clrc
  6026  161C  0D21               	rlf	(??___ftdiv^(0+128)+1),w
  6027  161D  0D22               	rlf	(??___ftdiv^(0+128)+2),w
  6028  161E  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6029  161F  0823               	movf	(??___ftdiv+3)^(0+128),w
  6030  1620  00A9               	movwf	___ftdiv@sign^(0+128)
  6031  1621  0829               	movf	___ftdiv@sign^(0+128),w
  6032  1622  1D03               	btfss	3,2
  6033  1623  2E2D               	goto	l4105
  6034  1624  3000               	movlw	0
  6035  1625  1283               	bcf	3,5	;RP0=0, select bank0
  6036  1626  1303               	bcf	3,6	;RP1=0, select bank0
  6037  1627  00C3               	movwf	?___ftdiv
  6038  1628  3000               	movlw	0
  6039  1629  00C4               	movwf	?___ftdiv+1
  6040  162A  3000               	movlw	0
  6041  162B  00C5               	movwf	?___ftdiv+2
  6042  162C  0008               	return
  6043  162D                     l4105:	
  6044  162D  3000               	movlw	0
  6045  162E  1683               	bsf	3,5	;RP0=1, select bank1
  6046  162F  1303               	bcf	3,6	;RP1=0, select bank1
  6047  1630  00A5               	movwf	___ftdiv@f3^(0+128)
  6048  1631  3000               	movlw	0
  6049  1632  00A6               	movwf	(___ftdiv@f3+1)^(0+128)
  6050  1633  3000               	movlw	0
  6051  1634  00A7               	movwf	(___ftdiv@f3+2)^(0+128)
  6052  1635  3089               	movlw	137
  6053  1636  0729               	addwf	___ftdiv@sign^(0+128),w
  6054  1637  00A0               	movwf	??___ftdiv^(0+128)
  6055  1638  0820               	movf	??___ftdiv^(0+128),w
  6056  1639  02A8               	subwf	___ftdiv@exp^(0+128),f
  6057  163A  1283               	bcf	3,5	;RP0=0, select bank0
  6058  163B  1303               	bcf	3,6	;RP1=0, select bank0
  6059  163C  0846               	movf	___ftdiv@f1,w
  6060  163D  1683               	bsf	3,5	;RP0=1, select bank1
  6061  163E  1303               	bcf	3,6	;RP1=0, select bank1
  6062  163F  00A0               	movwf	??___ftdiv^(0+128)
  6063  1640  1283               	bcf	3,5	;RP0=0, select bank0
  6064  1641  1303               	bcf	3,6	;RP1=0, select bank0
  6065  1642  0847               	movf	___ftdiv@f1+1,w
  6066  1643  1683               	bsf	3,5	;RP0=1, select bank1
  6067  1644  1303               	bcf	3,6	;RP1=0, select bank1
  6068  1645  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6069  1646  1283               	bcf	3,5	;RP0=0, select bank0
  6070  1647  1303               	bcf	3,6	;RP1=0, select bank0
  6071  1648  0848               	movf	___ftdiv@f1+2,w
  6072  1649  1683               	bsf	3,5	;RP0=1, select bank1
  6073  164A  1303               	bcf	3,6	;RP1=0, select bank1
  6074  164B  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6075  164C  3010               	movlw	16
  6076  164D                     u5095:	
  6077  164D  1003               	clrc
  6078  164E  0CA2               	rrf	(??___ftdiv^(0+128)+2),f
  6079  164F  0CA1               	rrf	(??___ftdiv^(0+128)+1),f
  6080  1650  0CA0               	rrf	??___ftdiv^(0+128),f
  6081  1651  3EFF               	addlw	-1
  6082  1652  1D03               	skipz
  6083  1653  2E4D               	goto	u5095
  6084  1654  0820               	movf	??___ftdiv^(0+128),w
  6085  1655  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6086  1656  0823               	movf	(??___ftdiv+3)^(0+128),w
  6087  1657  00A9               	movwf	___ftdiv@sign^(0+128)
  6088  1658  1283               	bcf	3,5	;RP0=0, select bank0
  6089  1659  1303               	bcf	3,6	;RP1=0, select bank0
  6090  165A  0843               	movf	___ftdiv@f2,w
  6091  165B  1683               	bsf	3,5	;RP0=1, select bank1
  6092  165C  1303               	bcf	3,6	;RP1=0, select bank1
  6093  165D  00A0               	movwf	??___ftdiv^(0+128)
  6094  165E  1283               	bcf	3,5	;RP0=0, select bank0
  6095  165F  1303               	bcf	3,6	;RP1=0, select bank0
  6096  1660  0844               	movf	___ftdiv@f2+1,w
  6097  1661  1683               	bsf	3,5	;RP0=1, select bank1
  6098  1662  1303               	bcf	3,6	;RP1=0, select bank1
  6099  1663  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6100  1664  1283               	bcf	3,5	;RP0=0, select bank0
  6101  1665  1303               	bcf	3,6	;RP1=0, select bank0
  6102  1666  0845               	movf	___ftdiv@f2+2,w
  6103  1667  1683               	bsf	3,5	;RP0=1, select bank1
  6104  1668  1303               	bcf	3,6	;RP1=0, select bank1
  6105  1669  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6106  166A  3010               	movlw	16
  6107  166B                     u5105:	
  6108  166B  1003               	clrc
  6109  166C  0CA2               	rrf	(??___ftdiv^(0+128)+2),f
  6110  166D  0CA1               	rrf	(??___ftdiv^(0+128)+1),f
  6111  166E  0CA0               	rrf	??___ftdiv^(0+128),f
  6112  166F  3EFF               	addlw	-1
  6113  1670  1D03               	skipz
  6114  1671  2E6B               	goto	u5105
  6115  1672  0820               	movf	??___ftdiv^(0+128),w
  6116  1673  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6117  1674  0823               	movf	(??___ftdiv+3)^(0+128),w
  6118  1675  06A9               	xorwf	___ftdiv@sign^(0+128),f
  6119  1676  3080               	movlw	128
  6120  1677  00A0               	movwf	??___ftdiv^(0+128)
  6121  1678  0820               	movf	??___ftdiv^(0+128),w
  6122  1679  05A9               	andwf	___ftdiv@sign^(0+128),f
  6123  167A  1283               	bcf	3,5	;RP0=0, select bank0
  6124  167B  1303               	bcf	3,6	;RP1=0, select bank0
  6125  167C  17C7               	bsf	___ftdiv@f1+1,7
  6126  167D  30FF               	movlw	255
  6127  167E  05C6               	andwf	___ftdiv@f1,f
  6128  167F  30FF               	movlw	255
  6129  1680  05C7               	andwf	___ftdiv@f1+1,f
  6130  1681  3000               	movlw	0
  6131  1682  05C8               	andwf	___ftdiv@f1+2,f
  6132  1683  17C4               	bsf	___ftdiv@f2+1,7
  6133  1684  30FF               	movlw	255
  6134  1685  05C3               	andwf	___ftdiv@f2,f
  6135  1686  30FF               	movlw	255
  6136  1687  05C4               	andwf	___ftdiv@f2+1,f
  6137  1688  3000               	movlw	0
  6138  1689  05C5               	andwf	___ftdiv@f2+2,f
  6139  168A  3018               	movlw	24
  6140  168B  1683               	bsf	3,5	;RP0=1, select bank1
  6141  168C  1303               	bcf	3,6	;RP1=0, select bank1
  6142  168D  00A0               	movwf	??___ftdiv^(0+128)
  6143  168E  0820               	movf	??___ftdiv^(0+128),w
  6144  168F  00A4               	movwf	___ftdiv@cntr^(0+128)
  6145  1690                     l4119:	
  6146  1690  3001               	movlw	1
  6147  1691                     u5115:	
  6148  1691  1003               	clrc
  6149  1692  0DA5               	rlf	___ftdiv@f3^(0+128),f
  6150  1693  0DA6               	rlf	(___ftdiv@f3+1)^(0+128),f
  6151  1694  0DA7               	rlf	(___ftdiv@f3+2)^(0+128),f
  6152  1695  3EFF               	addlw	-1
  6153  1696  1D03               	skipz
  6154  1697  2E91               	goto	u5115
  6155  1698  1283               	bcf	3,5	;RP0=0, select bank0
  6156  1699  1303               	bcf	3,6	;RP1=0, select bank0
  6157  169A  0845               	movf	___ftdiv@f2+2,w
  6158  169B  0248               	subwf	___ftdiv@f1+2,w
  6159  169C  1D03               	skipz
  6160  169D  2EA4               	goto	u5125
  6161  169E  0844               	movf	___ftdiv@f2+1,w
  6162  169F  0247               	subwf	___ftdiv@f1+1,w
  6163  16A0  1D03               	skipz
  6164  16A1  2EA4               	goto	u5125
  6165  16A2  0843               	movf	___ftdiv@f2,w
  6166  16A3  0246               	subwf	___ftdiv@f1,w
  6167  16A4                     u5125:	
  6168  16A4  1C03               	skipc
  6169  16A5  2EB3               	goto	l4127
  6170  16A6  0843               	movf	___ftdiv@f2,w
  6171  16A7  02C6               	subwf	___ftdiv@f1,f
  6172  16A8  0844               	movf	___ftdiv@f2+1,w
  6173  16A9  1C03               	skipc
  6174  16AA  0F44               	incfsz	___ftdiv@f2+1,w
  6175  16AB  02C7               	subwf	___ftdiv@f1+1,f
  6176  16AC  0845               	movf	___ftdiv@f2+2,w
  6177  16AD  1C03               	skipc
  6178  16AE  0A45               	incf	___ftdiv@f2+2,w
  6179  16AF  02C8               	subwf	___ftdiv@f1+2,f
  6180  16B0  1683               	bsf	3,5	;RP0=1, select bank1
  6181  16B1  1303               	bcf	3,6	;RP1=0, select bank1
  6182  16B2  1425               	bsf	___ftdiv@f3^(0+128),0
  6183  16B3                     l4127:	
  6184  16B3  3001               	movlw	1
  6185  16B4                     u5135:	
  6186  16B4  1003               	clrc
  6187  16B5  1283               	bcf	3,5	;RP0=0, select bank0
  6188  16B6  0DC6               	rlf	___ftdiv@f1,f
  6189  16B7  0DC7               	rlf	___ftdiv@f1+1,f
  6190  16B8  0DC8               	rlf	___ftdiv@f1+2,f
  6191  16B9  3EFF               	addlw	-1
  6192  16BA  1D03               	skipz
  6193  16BB  2EB4               	goto	u5135
  6194  16BC  3001               	movlw	1
  6195  16BD  1683               	bsf	3,5	;RP0=1, select bank1
  6196  16BE  1303               	bcf	3,6	;RP1=0, select bank1
  6197  16BF  02A4               	subwf	___ftdiv@cntr^(0+128),f
  6198  16C0  1D03               	btfss	3,2
  6199  16C1  2E90               	goto	l4119
  6200  16C2  0825               	movf	___ftdiv@f3^(0+128),w
  6201  16C3  1283               	bcf	3,5	;RP0=0, select bank0
  6202  16C4  1303               	bcf	3,6	;RP1=0, select bank0
  6203  16C5  00B5               	movwf	___ftpack@arg
  6204  16C6  1683               	bsf	3,5	;RP0=1, select bank1
  6205  16C7  1303               	bcf	3,6	;RP1=0, select bank1
  6206  16C8  0826               	movf	(___ftdiv@f3+1)^(0+128),w
  6207  16C9  1283               	bcf	3,5	;RP0=0, select bank0
  6208  16CA  1303               	bcf	3,6	;RP1=0, select bank0
  6209  16CB  00B6               	movwf	___ftpack@arg+1
  6210  16CC  1683               	bsf	3,5	;RP0=1, select bank1
  6211  16CD  1303               	bcf	3,6	;RP1=0, select bank1
  6212  16CE  0827               	movf	(___ftdiv@f3+2)^(0+128),w
  6213  16CF  1283               	bcf	3,5	;RP0=0, select bank0
  6214  16D0  1303               	bcf	3,6	;RP1=0, select bank0
  6215  16D1  00B7               	movwf	___ftpack@arg+2
  6216  16D2  1683               	bsf	3,5	;RP0=1, select bank1
  6217  16D3  1303               	bcf	3,6	;RP1=0, select bank1
  6218  16D4  0828               	movf	___ftdiv@exp^(0+128),w
  6219  16D5  00A0               	movwf	??___ftdiv^(0+128)
  6220  16D6  0820               	movf	??___ftdiv^(0+128),w
  6221  16D7  1283               	bcf	3,5	;RP0=0, select bank0
  6222  16D8  1303               	bcf	3,6	;RP1=0, select bank0
  6223  16D9  00B8               	movwf	___ftpack@exp
  6224  16DA  1683               	bsf	3,5	;RP0=1, select bank1
  6225  16DB  1303               	bcf	3,6	;RP1=0, select bank1
  6226  16DC  0829               	movf	___ftdiv@sign^(0+128),w
  6227  16DD  00A1               	movwf	(??___ftdiv+1)^(0+128)
  6228  16DE  0821               	movf	(??___ftdiv+1)^(0+128),w
  6229  16DF  1283               	bcf	3,5	;RP0=0, select bank0
  6230  16E0  1303               	bcf	3,6	;RP1=0, select bank0
  6231  16E1  00B9               	movwf	___ftpack@sign
  6232  16E2  160A  118A  22FE   	fcall	___ftpack
  6233  16E5  1283               	bcf	3,5	;RP0=0, select bank0
  6234  16E6  1303               	bcf	3,6	;RP1=0, select bank0
  6235  16E7  0835               	movf	?___ftpack,w
  6236  16E8  00C3               	movwf	?___ftdiv
  6237  16E9  0836               	movf	?___ftpack+1,w
  6238  16EA  00C4               	movwf	?___ftdiv+1
  6239  16EB  0837               	movf	?___ftpack+2,w
  6240  16EC  00C5               	movwf	?___ftdiv+2
  6241  16ED  0008               	return
  6242  16EE                     __end_of___ftdiv:	
  6243                           
  6244                           	psect	text19
  6245  10A5                     __ptext19:	
  6246 ;; *************** function _run *****************
  6247 ;; Defined at:
  6248 ;;		line 343 in file "main.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  duty            2   28[BANK1 ] int 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      void 
  6255 ;; Registers used:
  6256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6262 ;;      Params:         0       0       2       0       0
  6263 ;;      Locals:         0       0       0       0       0
  6264 ;;      Temps:          0       0       0       0       0
  6265 ;;      Totals:         0       0       2       0       0
  6266 ;;Total ram usage:        2 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    7
  6269 ;; This function calls:
  6270 ;;		_USARTWriteLine
  6271 ;;		_acquire
  6272 ;;		_set_pwm
  6273 ;; This function is called by:
  6274 ;;		_choice
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           
  6279                           ;psect for function _run
  6280  10A5                     _run:	
  6281                           
  6282                           ;main.c: 345: if(duty>100){
  6283                           
  6284                           ;incstack = 0
  6285 ;; hardware stack exceeded
  6286                           ; Regs used in _run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6287  10A5  1683               	bsf	3,5	;RP0=1, select bank1
  6288  10A6  1303               	bcf	3,6	;RP1=0, select bank1
  6289  10A7  083D               	movf	(run@duty+1)^(0+128),w
  6290  10A8  3A80               	xorlw	128
  6291  10A9  00FF               	movwf	127
  6292  10AA  3080               	movlw	128
  6293  10AB  027F               	subwf	127,w
  6294  10AC  1D03               	skipz
  6295  10AD  28B0               	goto	u5305
  6296  10AE  3065               	movlw	101
  6297  10AF  023C               	subwf	run@duty^(0+128),w
  6298  10B0                     u5305:	
  6299  10B0  1C03               	skipc
  6300  10B1  28B7               	goto	l4311
  6301                           
  6302                           ;main.c: 346: duty=0;
  6303  10B2  1683               	bsf	3,5	;RP0=1, select bank1
  6304  10B3  1303               	bcf	3,6	;RP1=0, select bank1
  6305  10B4  01BC               	clrf	run@duty^(0+128)
  6306  10B5  01BD               	clrf	(run@duty+1)^(0+128)
  6307                           
  6308                           ;main.c: 347: }
  6309  10B6  28C1               	goto	l4315
  6310  10B7                     l4311:	
  6311                           
  6312                           ;main.c: 348: else if(duty == 0){
  6313  10B7  1683               	bsf	3,5	;RP0=1, select bank1
  6314  10B8  1303               	bcf	3,6	;RP1=0, select bank1
  6315  10B9  083C               	movf	run@duty^(0+128),w
  6316  10BA  043D               	iorwf	(run@duty+1)^(0+128),w
  6317  10BB  1D03               	btfss	3,2
  6318  10BC  28C1               	goto	l4315
  6319                           
  6320                           ;main.c: 350: duty = 100;
  6321  10BD  3064               	movlw	100
  6322  10BE  00BC               	movwf	run@duty^(0+128)
  6323  10BF  3000               	movlw	0
  6324  10C0  00BD               	movwf	(run@duty^(0+128)+1)
  6325  10C1                     l4315:	
  6326                           
  6327                           ;main.c: 351: }
  6328                           ;main.c: 352: PORTCbits.RC0 = 1;
  6329  10C1  1283               	bcf	3,5	;RP0=0, select bank0
  6330  10C2  1303               	bcf	3,6	;RP1=0, select bank0
  6331  10C3  1407               	bsf	7,0	;volatile
  6332                           
  6333                           ;main.c: 353: set_pwm(duty);
  6334  10C4  1683               	bsf	3,5	;RP0=1, select bank1
  6335  10C5  1303               	bcf	3,6	;RP1=0, select bank1
  6336  10C6  083D               	movf	(run@duty+1)^(0+128),w
  6337  10C7  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  6338  10C8  083C               	movf	run@duty^(0+128),w
  6339  10C9  00B8               	movwf	set_pwm@percent^(0+128)
  6340  10CA  120A  118A  2057  160A  118A  	fcall	_set_pwm
  6341                           
  6342                           ;main.c: 355: acquire();
  6343  10CF  120A  118A  27A0  160A  118A  	fcall	_acquire
  6344                           
  6345                           ;main.c: 356: USARTWriteLine("If you want stop the system, type:");
  6346  10D4  3005               	movlw	low ((STR_24+8)| (0+32768))
  6347  10D5  1283               	bcf	3,5	;RP0=0, select bank0
  6348  10D6  1303               	bcf	3,6	;RP1=0, select bank0
  6349  10D7  00B8               	movwf	USARTWriteLine@str
  6350  10D8  3084               	movlw	high ((STR_24+8)| (0+32768))
  6351  10D9  00B9               	movwf	USARTWriteLine@str+1
  6352  10DA  160A  118A  200A  160A  118A  	fcall	_USARTWriteLine
  6353                           
  6354                           ;main.c: 357: USARTWriteLine("stop()");
  6355  10DF  303A               	movlw	low (STR_46| (0+32768))
  6356  10E0  1283               	bcf	3,5	;RP0=0, select bank0
  6357  10E1  1303               	bcf	3,6	;RP1=0, select bank0
  6358  10E2  00B8               	movwf	USARTWriteLine@str
  6359  10E3  3086               	movlw	high (STR_46| (0+32768))
  6360  10E4  00B9               	movwf	USARTWriteLine@str+1
  6361  10E5  160A  118A  200A   	fcall	_USARTWriteLine
  6362  10E8  0008               	return
  6363  10E9                     __end_of_run:	
  6364                           
  6365                           	psect	text20
  6366  0057                     __ptext20:	
  6367 ;; *************** function _set_pwm *****************
  6368 ;; Defined at:
  6369 ;;		line 304 in file "main.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;  percent         2   24[BANK1 ] int 
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;		None
  6374 ;; Return value:  Size  Location     Type
  6375 ;;                  1    wreg      void 
  6376 ;; Registers used:
  6377 ;;		wreg, status,2, status,0, pclath, cstack
  6378 ;; Tracked objects:
  6379 ;;		On entry : 0/0
  6380 ;;		On exit  : 0/0
  6381 ;;		Unchanged: 0/0
  6382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6383 ;;      Params:         0       0       2       0       0
  6384 ;;      Locals:         0       0       0       0       0
  6385 ;;      Temps:          0       0       2       0       0
  6386 ;;      Totals:         0       0       4       0       0
  6387 ;;Total ram usage:        4 bytes
  6388 ;; Hardware stack levels used:    1
  6389 ;; Hardware stack levels required when called:    6
  6390 ;; This function calls:
  6391 ;;		___awtoft
  6392 ;;		___ftmul
  6393 ;;		___fttol
  6394 ;; This function is called by:
  6395 ;;		_step
  6396 ;;		_run
  6397 ;;		_stop
  6398 ;;		_sys
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           
  6403                           ;psect for function _set_pwm
  6404  0057                     _set_pwm:	
  6405                           
  6406                           ;main.c: 305: pwm = (percent*10.23);
  6407                           
  6408                           ;incstack = 0
  6409                           ; Regs used in _set_pwm: [wreg+status,2+status,0+pclath+cstack]
  6410  0057  1683               	bsf	3,5	;RP0=1, select bank1
  6411  0058  1303               	bcf	3,6	;RP1=0, select bank1
  6412  0059  0839               	movf	(set_pwm@percent+1)^(0+128),w
  6413  005A  1283               	bcf	3,5	;RP0=0, select bank0
  6414  005B  1303               	bcf	3,6	;RP1=0, select bank0
  6415  005C  00BE               	movwf	___awtoft@c+1
  6416  005D  1683               	bsf	3,5	;RP0=1, select bank1
  6417  005E  1303               	bcf	3,6	;RP1=0, select bank1
  6418  005F  0838               	movf	set_pwm@percent^(0+128),w
  6419  0060  1283               	bcf	3,5	;RP0=0, select bank0
  6420  0061  1303               	bcf	3,6	;RP1=0, select bank0
  6421  0062  00BD               	movwf	___awtoft@c
  6422  0063  160A  158A  25F3  120A  118A  	fcall	___awtoft
  6423  0068  1283               	bcf	3,5	;RP0=0, select bank0
  6424  0069  1303               	bcf	3,6	;RP1=0, select bank0
  6425  006A  083D               	movf	?___awtoft,w
  6426  006B  00C6               	movwf	___ftmul@f2
  6427  006C  083E               	movf	?___awtoft+1,w
  6428  006D  00C7               	movwf	___ftmul@f2+1
  6429  006E  083F               	movf	?___awtoft+2,w
  6430  006F  00C8               	movwf	___ftmul@f2+2
  6431  0070  30AE               	movlw	174
  6432  0071  00C3               	movwf	___ftmul@f1
  6433  0072  3023               	movlw	35
  6434  0073  00C4               	movwf	___ftmul@f1+1
  6435  0074  3041               	movlw	65
  6436  0075  00C5               	movwf	___ftmul@f1+2
  6437  0076  120A  118A  265A  120A  118A  	fcall	___ftmul
  6438  007B  1283               	bcf	3,5	;RP0=0, select bank0
  6439  007C  1303               	bcf	3,6	;RP1=0, select bank0
  6440  007D  0843               	movf	?___ftmul,w
  6441  007E  1683               	bsf	3,5	;RP0=1, select bank1
  6442  007F  1303               	bcf	3,6	;RP1=0, select bank1
  6443  0080  00AA               	movwf	___fttol@f1^(0+128)
  6444  0081  1283               	bcf	3,5	;RP0=0, select bank0
  6445  0082  1303               	bcf	3,6	;RP1=0, select bank0
  6446  0083  0844               	movf	?___ftmul+1,w
  6447  0084  1683               	bsf	3,5	;RP0=1, select bank1
  6448  0085  1303               	bcf	3,6	;RP1=0, select bank1
  6449  0086  00AB               	movwf	(___fttol@f1+1)^(0+128)
  6450  0087  1283               	bcf	3,5	;RP0=0, select bank0
  6451  0088  1303               	bcf	3,6	;RP1=0, select bank0
  6452  0089  0845               	movf	?___ftmul+2,w
  6453  008A  1683               	bsf	3,5	;RP0=1, select bank1
  6454  008B  1303               	bcf	3,6	;RP1=0, select bank1
  6455  008C  00AC               	movwf	(___fttol@f1+2)^(0+128)
  6456  008D  160A  118A  23DD  120A  118A  	fcall	___fttol
  6457  0092  1683               	bsf	3,5	;RP0=1, select bank1
  6458  0093  1303               	bcf	3,6	;RP1=0, select bank1
  6459  0094  082B               	movf	(?___fttol+1)^(0+128),w
  6460  0095  00CF               	movwf	(_pwm+1)^(0+128)
  6461  0096  082A               	movf	?___fttol^(0+128),w
  6462  0097  00CE               	movwf	_pwm^(0+128)
  6463                           
  6464                           ;main.c: 306: CCPR1L = pwm>>2;
  6465  0098  084F               	movf	(_pwm+1)^(0+128),w
  6466  0099  00BB               	movwf	(??_set_pwm^(0+128)+1)
  6467  009A  084E               	movf	_pwm^(0+128),w
  6468  009B  00BA               	movwf	??_set_pwm^(0+128)
  6469  009C  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6470  009D  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6471  009E  0CBA               	rrf	??_set_pwm^(0+128),f
  6472  009F  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6473  00A0  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6474  00A1  0CBA               	rrf	??_set_pwm^(0+128),f
  6475  00A2  083A               	movf	??_set_pwm^(0+128),w
  6476  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  6477  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  6478  00A5  0095               	movwf	21	;volatile
  6479                           
  6480                           ;main.c: 307: CCPR2L = pwm>>2;
  6481  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  6482  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  6483  00A8  084F               	movf	(_pwm+1)^(0+128),w
  6484  00A9  00BB               	movwf	(??_set_pwm^(0+128)+1)
  6485  00AA  084E               	movf	_pwm^(0+128),w
  6486  00AB  00BA               	movwf	??_set_pwm^(0+128)
  6487  00AC  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6488  00AD  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6489  00AE  0CBA               	rrf	??_set_pwm^(0+128),f
  6490  00AF  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6491  00B0  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6492  00B1  0CBA               	rrf	??_set_pwm^(0+128),f
  6493  00B2  083A               	movf	??_set_pwm^(0+128),w
  6494  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  6495  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  6496  00B5  009B               	movwf	27	;volatile
  6497                           
  6498                           ;main.c: 308: CCP1CONbits.CCP1Y = pwm & 0b00000001;
  6499  00B6  1683               	bsf	3,5	;RP0=1, select bank1
  6500  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  6501  00B8  084E               	movf	_pwm^(0+128),w
  6502  00B9  3901               	andlw	1
  6503  00BA  00BA               	movwf	??_set_pwm^(0+128)
  6504  00BB  0EBA               	swapf	??_set_pwm^(0+128),f
  6505  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  6506  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  6507  00BE  0817               	movf	23,w	;volatile
  6508  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  6509  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  6510  00C1  063A               	xorwf	??_set_pwm^(0+128),w
  6511  00C2  39EF               	andlw	-17
  6512  00C3  063A               	xorwf	??_set_pwm^(0+128),w
  6513  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  6514  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  6515  00C6  0097               	movwf	23	;volatile
  6516                           
  6517                           ;main.c: 309: CCP1CONbits.CCP1X = pwm & 0b00000010;
  6518  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  6519  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  6520  00C9  084E               	movf	_pwm^(0+128),w
  6521  00CA  3902               	andlw	2
  6522  00CB  00BA               	movwf	??_set_pwm^(0+128)
  6523  00CC  0EBA               	swapf	??_set_pwm^(0+128),f
  6524  00CD  0DBA               	rlf	??_set_pwm^(0+128),f
  6525  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  6526  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  6527  00D0  0817               	movf	23,w	;volatile
  6528  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  6529  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  6530  00D3  063A               	xorwf	??_set_pwm^(0+128),w
  6531  00D4  39DF               	andlw	-33
  6532  00D5  063A               	xorwf	??_set_pwm^(0+128),w
  6533  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  6534  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  6535  00D8  0097               	movwf	23	;volatile
  6536                           
  6537                           ;main.c: 310: CCP2CONbits.CCP2Y = pwm & 0b00000001;
  6538  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  6539  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  6540  00DB  084E               	movf	_pwm^(0+128),w
  6541  00DC  3901               	andlw	1
  6542  00DD  00BA               	movwf	??_set_pwm^(0+128)
  6543  00DE  0EBA               	swapf	??_set_pwm^(0+128),f
  6544  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  6545  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  6546  00E1  081D               	movf	29,w	;volatile
  6547  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  6548  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  6549  00E4  063A               	xorwf	??_set_pwm^(0+128),w
  6550  00E5  39EF               	andlw	-17
  6551  00E6  063A               	xorwf	??_set_pwm^(0+128),w
  6552  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  6553  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  6554  00E9  009D               	movwf	29	;volatile
  6555                           
  6556                           ;main.c: 311: CCP2CONbits.CCP2X = pwm & 0b00000010;
  6557  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  6558  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  6559  00EC  084E               	movf	_pwm^(0+128),w
  6560  00ED  3902               	andlw	2
  6561  00EE  00BA               	movwf	??_set_pwm^(0+128)
  6562  00EF  0EBA               	swapf	??_set_pwm^(0+128),f
  6563  00F0  0DBA               	rlf	??_set_pwm^(0+128),f
  6564  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  6565  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  6566  00F3  081D               	movf	29,w	;volatile
  6567  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  6568  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  6569  00F6  063A               	xorwf	??_set_pwm^(0+128),w
  6570  00F7  39DF               	andlw	-33
  6571  00F8  063A               	xorwf	??_set_pwm^(0+128),w
  6572  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  6573  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  6574  00FB  009D               	movwf	29	;volatile
  6575  00FC  0008               	return
  6576  00FD                     __end_of_set_pwm:	
  6577                           
  6578                           	psect	text21
  6579  13DD                     __ptext21:	
  6580 ;; *************** function ___fttol *****************
  6581 ;; Defined at:
  6582 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  f1              3   10[BANK1 ] float 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  lval            4   19[BANK1 ] unsigned long 
  6587 ;;  exp1            1   23[BANK1 ] unsigned char 
  6588 ;;  sign1           1   18[BANK1 ] unsigned char 
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  4   10[BANK1 ] long 
  6591 ;; Registers used:
  6592 ;;		wreg, status,2, status,0
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6598 ;;      Params:         0       0       4       0       0
  6599 ;;      Locals:         0       0       6       0       0
  6600 ;;      Temps:          0       0       4       0       0
  6601 ;;      Totals:         0       0      14       0       0
  6602 ;;Total ram usage:       14 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    4
  6605 ;; This function calls:
  6606 ;;		Nothing
  6607 ;; This function is called by:
  6608 ;;		_set_pwm
  6609 ;;		_status
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function ___fttol
  6615  13DD                     ___fttol:	
  6616                           
  6617                           ;incstack = 0
  6618                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6619  13DD  1683               	bsf	3,5	;RP0=1, select bank1
  6620  13DE  1303               	bcf	3,6	;RP1=0, select bank1
  6621  13DF  082A               	movf	___fttol@f1^(0+128),w
  6622  13E0  00AE               	movwf	??___fttol^(0+128)
  6623  13E1  082B               	movf	(___fttol@f1+1)^(0+128),w
  6624  13E2  00AF               	movwf	(??___fttol^(0+128)+1)
  6625  13E3  082C               	movf	(___fttol@f1+2)^(0+128),w
  6626  13E4  00B0               	movwf	(??___fttol^(0+128)+2)
  6627  13E5  1003               	clrc
  6628  13E6  0D2F               	rlf	(??___fttol^(0+128)+1),w
  6629  13E7  0D30               	rlf	(??___fttol^(0+128)+2),w
  6630  13E8  00B1               	movwf	(??___fttol+3)^(0+128)
  6631  13E9  0831               	movf	(??___fttol+3)^(0+128),w
  6632  13EA  00B7               	movwf	___fttol@exp1^(0+128)
  6633  13EB  0837               	movf	___fttol@exp1^(0+128),w
  6634  13EC  1D03               	btfss	3,2
  6635  13ED  2BF7               	goto	l3751
  6636  13EE  3000               	movlw	0
  6637  13EF  00AD               	movwf	(?___fttol+3)^(0+128)
  6638  13F0  3000               	movlw	0
  6639  13F1  00AC               	movwf	(?___fttol+2)^(0+128)
  6640  13F2  3000               	movlw	0
  6641  13F3  00AB               	movwf	(?___fttol+1)^(0+128)
  6642  13F4  3000               	movlw	0
  6643  13F5  00AA               	movwf	?___fttol^(0+128)
  6644  13F6  0008               	return
  6645  13F7                     l3751:	
  6646  13F7  082A               	movf	___fttol@f1^(0+128),w
  6647  13F8  00AE               	movwf	??___fttol^(0+128)
  6648  13F9  082B               	movf	(___fttol@f1+1)^(0+128),w
  6649  13FA  00AF               	movwf	(??___fttol^(0+128)+1)
  6650  13FB  082C               	movf	(___fttol@f1+2)^(0+128),w
  6651  13FC  00B0               	movwf	(??___fttol^(0+128)+2)
  6652  13FD  3017               	movlw	23
  6653  13FE                     u4445:	
  6654  13FE  1003               	clrc
  6655  13FF  0CB0               	rrf	(??___fttol^(0+128)+2),f
  6656  1400  0CAF               	rrf	(??___fttol^(0+128)+1),f
  6657  1401  0CAE               	rrf	??___fttol^(0+128),f
  6658  1402  3EFF               	addlw	-1
  6659  1403  1D03               	skipz
  6660  1404  2BFE               	goto	u4445
  6661  1405  082E               	movf	??___fttol^(0+128),w
  6662  1406  00B1               	movwf	(??___fttol+3)^(0+128)
  6663  1407  0831               	movf	(??___fttol+3)^(0+128),w
  6664  1408  00B2               	movwf	___fttol@sign1^(0+128)
  6665  1409  17AB               	bsf	(___fttol@f1^(0+128)+1),7
  6666  140A  30FF               	movlw	255
  6667  140B  05AA               	andwf	___fttol@f1^(0+128),f
  6668  140C  30FF               	movlw	255
  6669  140D  05AB               	andwf	(___fttol@f1+1)^(0+128),f
  6670  140E  3000               	movlw	0
  6671  140F  05AC               	andwf	(___fttol@f1+2)^(0+128),f
  6672  1410  082A               	movf	___fttol@f1^(0+128),w
  6673  1411  00B3               	movwf	___fttol@lval^(0+128)
  6674  1412  082B               	movf	(___fttol@f1+1)^(0+128),w
  6675  1413  00B4               	movwf	(___fttol@lval^(0+128)+1)
  6676  1414  082C               	movf	(___fttol@f1+2)^(0+128),w
  6677  1415  00B5               	movwf	(___fttol@lval^(0+128)+2)
  6678  1416  01B6               	clrf	(___fttol@lval^(0+128)+3)
  6679  1417  308E               	movlw	142
  6680  1418  02B7               	subwf	___fttol@exp1^(0+128),f
  6681  1419  1FB7               	btfss	___fttol@exp1^(0+128),7
  6682  141A  2C39               	goto	l3771
  6683  141B  0837               	movf	___fttol@exp1^(0+128),w
  6684  141C  3A80               	xorlw	128
  6685  141D  3E8F               	addlw	143
  6686  141E  1803               	skipnc
  6687  141F  2C29               	goto	l3769
  6688  1420  3000               	movlw	0
  6689  1421  00AD               	movwf	(?___fttol+3)^(0+128)
  6690  1422  3000               	movlw	0
  6691  1423  00AC               	movwf	(?___fttol+2)^(0+128)
  6692  1424  3000               	movlw	0
  6693  1425  00AB               	movwf	(?___fttol+1)^(0+128)
  6694  1426  3000               	movlw	0
  6695  1427  00AA               	movwf	?___fttol^(0+128)
  6696  1428  0008               	return
  6697  1429                     l3769:	
  6698  1429  3001               	movlw	1
  6699  142A                     u4475:	
  6700  142A  1003               	clrc
  6701  142B  0CB6               	rrf	(___fttol@lval+3)^(0+128),f
  6702  142C  0CB5               	rrf	(___fttol@lval+2)^(0+128),f
  6703  142D  0CB4               	rrf	(___fttol@lval+1)^(0+128),f
  6704  142E  0CB3               	rrf	___fttol@lval^(0+128),f
  6705  142F  3EFF               	addlw	-1
  6706  1430  1D03               	skipz
  6707  1431  2C2A               	goto	u4475
  6708  1432  3001               	movlw	1
  6709  1433  00AE               	movwf	??___fttol^(0+128)
  6710  1434  082E               	movf	??___fttol^(0+128),w
  6711  1435  07B7               	addwf	___fttol@exp1^(0+128),f
  6712  1436  1903               	btfsc	3,2
  6713  1437  2C54               	goto	l3779
  6714  1438  2C29               	goto	l3769
  6715  1439                     l3771:	
  6716  1439  3018               	movlw	24
  6717  143A  0237               	subwf	___fttol@exp1^(0+128),w
  6718  143B  1C03               	skipc
  6719  143C  2C51               	goto	l746
  6720  143D  3000               	movlw	0
  6721  143E  00AD               	movwf	(?___fttol+3)^(0+128)
  6722  143F  3000               	movlw	0
  6723  1440  00AC               	movwf	(?___fttol+2)^(0+128)
  6724  1441  3000               	movlw	0
  6725  1442  00AB               	movwf	(?___fttol+1)^(0+128)
  6726  1443  3000               	movlw	0
  6727  1444  00AA               	movwf	?___fttol^(0+128)
  6728  1445  0008               	return
  6729  1446                     l3777:	
  6730  1446  3001               	movlw	1
  6731  1447  00AE               	movwf	??___fttol^(0+128)
  6732  1448                     u4505:	
  6733  1448  1003               	clrc
  6734  1449  0DB3               	rlf	___fttol@lval^(0+128),f
  6735  144A  0DB4               	rlf	(___fttol@lval+1)^(0+128),f
  6736  144B  0DB5               	rlf	(___fttol@lval+2)^(0+128),f
  6737  144C  0DB6               	rlf	(___fttol@lval+3)^(0+128),f
  6738  144D  0BAE               	decfsz	??___fttol^(0+128),f
  6739  144E  2C48               	goto	u4505
  6740  144F  3001               	movlw	1
  6741  1450  02B7               	subwf	___fttol@exp1^(0+128),f
  6742  1451                     l746:	
  6743  1451  0837               	movf	___fttol@exp1^(0+128),w
  6744  1452  1D03               	btfss	3,2
  6745  1453  2C46               	goto	l3777
  6746  1454                     l3779:	
  6747  1454  0832               	movf	___fttol@sign1^(0+128),w
  6748  1455  1903               	btfsc	3,2
  6749  1456  2C62               	goto	l3783
  6750  1457  09B3               	comf	___fttol@lval^(0+128),f
  6751  1458  09B4               	comf	(___fttol@lval+1)^(0+128),f
  6752  1459  09B5               	comf	(___fttol@lval+2)^(0+128),f
  6753  145A  09B6               	comf	(___fttol@lval+3)^(0+128),f
  6754  145B  0AB3               	incf	___fttol@lval^(0+128),f
  6755  145C  1903               	skipnz
  6756  145D  0AB4               	incf	(___fttol@lval+1)^(0+128),f
  6757  145E  1903               	skipnz
  6758  145F  0AB5               	incf	(___fttol@lval+2)^(0+128),f
  6759  1460  1903               	skipnz
  6760  1461  0AB6               	incf	(___fttol@lval+3)^(0+128),f
  6761  1462                     l3783:	
  6762  1462  0836               	movf	(___fttol@lval+3)^(0+128),w
  6763  1463  00AD               	movwf	(?___fttol+3)^(0+128)
  6764  1464  0835               	movf	(___fttol@lval+2)^(0+128),w
  6765  1465  00AC               	movwf	(?___fttol+2)^(0+128)
  6766  1466  0834               	movf	(___fttol@lval+1)^(0+128),w
  6767  1467  00AB               	movwf	(?___fttol+1)^(0+128)
  6768  1468  0833               	movf	___fttol@lval^(0+128),w
  6769  1469  00AA               	movwf	?___fttol^(0+128)
  6770  146A  0008               	return
  6771  146B                     __end_of___fttol:	
  6772                           
  6773                           	psect	text22
  6774  065A                     __ptext22:	
  6775 ;; *************** function ___ftmul *****************
  6776 ;; Defined at:
  6777 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  f1              3   35[BANK0 ] float 
  6780 ;;  f2              3   38[BANK0 ] float 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  f3_as_produc    3    5[BANK1 ] unsigned um
  6783 ;;  sign            1    9[BANK1 ] unsigned char 
  6784 ;;  cntr            1    8[BANK1 ] unsigned char 
  6785 ;;  exp             1    4[BANK1 ] unsigned char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  3   35[BANK0 ] float 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0, pclath, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6795 ;;      Params:         0       6       0       0       0
  6796 ;;      Locals:         0       0       6       0       0
  6797 ;;      Temps:          0       0       4       0       0
  6798 ;;      Totals:         0       6      10       0       0
  6799 ;;Total ram usage:       16 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    5
  6802 ;; This function calls:
  6803 ;;		___ftpack
  6804 ;; This function is called by:
  6805 ;;		_set_pwm
  6806 ;;		_status
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           
  6811                           ;psect for function ___ftmul
  6812  065A                     ___ftmul:	
  6813                           
  6814                           ;incstack = 0
  6815                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6816  065A  1283               	bcf	3,5	;RP0=0, select bank0
  6817  065B  1303               	bcf	3,6	;RP1=0, select bank0
  6818  065C  0843               	movf	___ftmul@f1,w
  6819  065D  1683               	bsf	3,5	;RP0=1, select bank1
  6820  065E  1303               	bcf	3,6	;RP1=0, select bank1
  6821  065F  00A0               	movwf	??___ftmul^(0+128)
  6822  0660  1283               	bcf	3,5	;RP0=0, select bank0
  6823  0661  1303               	bcf	3,6	;RP1=0, select bank0
  6824  0662  0844               	movf	___ftmul@f1+1,w
  6825  0663  1683               	bsf	3,5	;RP0=1, select bank1
  6826  0664  1303               	bcf	3,6	;RP1=0, select bank1
  6827  0665  00A1               	movwf	(??___ftmul^(0+128)+1)
  6828  0666  1283               	bcf	3,5	;RP0=0, select bank0
  6829  0667  1303               	bcf	3,6	;RP1=0, select bank0
  6830  0668  0845               	movf	___ftmul@f1+2,w
  6831  0669  1683               	bsf	3,5	;RP0=1, select bank1
  6832  066A  1303               	bcf	3,6	;RP1=0, select bank1
  6833  066B  00A2               	movwf	(??___ftmul^(0+128)+2)
  6834  066C  1003               	clrc
  6835  066D  0D21               	rlf	(??___ftmul^(0+128)+1),w
  6836  066E  0D22               	rlf	(??___ftmul^(0+128)+2),w
  6837  066F  00A3               	movwf	(??___ftmul+3)^(0+128)
  6838  0670  0823               	movf	(??___ftmul+3)^(0+128),w
  6839  0671  00A4               	movwf	___ftmul@exp^(0+128)
  6840  0672  0824               	movf	___ftmul@exp^(0+128),w
  6841  0673  1D03               	btfss	3,2
  6842  0674  2E7E               	goto	l3701
  6843  0675  3000               	movlw	0
  6844  0676  1283               	bcf	3,5	;RP0=0, select bank0
  6845  0677  1303               	bcf	3,6	;RP1=0, select bank0
  6846  0678  00C3               	movwf	?___ftmul
  6847  0679  3000               	movlw	0
  6848  067A  00C4               	movwf	?___ftmul+1
  6849  067B  3000               	movlw	0
  6850  067C  00C5               	movwf	?___ftmul+2
  6851  067D  0008               	return
  6852  067E                     l3701:	
  6853  067E  1283               	bcf	3,5	;RP0=0, select bank0
  6854  067F  0846               	movf	___ftmul@f2,w
  6855  0680  1683               	bsf	3,5	;RP0=1, select bank1
  6856  0681  1303               	bcf	3,6	;RP1=0, select bank1
  6857  0682  00A0               	movwf	??___ftmul^(0+128)
  6858  0683  1283               	bcf	3,5	;RP0=0, select bank0
  6859  0684  1303               	bcf	3,6	;RP1=0, select bank0
  6860  0685  0847               	movf	___ftmul@f2+1,w
  6861  0686  1683               	bsf	3,5	;RP0=1, select bank1
  6862  0687  1303               	bcf	3,6	;RP1=0, select bank1
  6863  0688  00A1               	movwf	(??___ftmul^(0+128)+1)
  6864  0689  1283               	bcf	3,5	;RP0=0, select bank0
  6865  068A  1303               	bcf	3,6	;RP1=0, select bank0
  6866  068B  0848               	movf	___ftmul@f2+2,w
  6867  068C  1683               	bsf	3,5	;RP0=1, select bank1
  6868  068D  1303               	bcf	3,6	;RP1=0, select bank1
  6869  068E  00A2               	movwf	(??___ftmul^(0+128)+2)
  6870  068F  1003               	clrc
  6871  0690  0D21               	rlf	(??___ftmul^(0+128)+1),w
  6872  0691  0D22               	rlf	(??___ftmul^(0+128)+2),w
  6873  0692  00A3               	movwf	(??___ftmul+3)^(0+128)
  6874  0693  0823               	movf	(??___ftmul+3)^(0+128),w
  6875  0694  00A9               	movwf	___ftmul@sign^(0+128)
  6876  0695  0829               	movf	___ftmul@sign^(0+128),w
  6877  0696  1D03               	btfss	3,2
  6878  0697  2EA1               	goto	l3707
  6879  0698  3000               	movlw	0
  6880  0699  1283               	bcf	3,5	;RP0=0, select bank0
  6881  069A  1303               	bcf	3,6	;RP1=0, select bank0
  6882  069B  00C3               	movwf	?___ftmul
  6883  069C  3000               	movlw	0
  6884  069D  00C4               	movwf	?___ftmul+1
  6885  069E  3000               	movlw	0
  6886  069F  00C5               	movwf	?___ftmul+2
  6887  06A0  0008               	return
  6888  06A1                     l3707:	
  6889  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  6890  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  6891  06A3  0829               	movf	___ftmul@sign^(0+128),w
  6892  06A4  3E7B               	addlw	123
  6893  06A5  00A0               	movwf	??___ftmul^(0+128)
  6894  06A6  0820               	movf	??___ftmul^(0+128),w
  6895  06A7  07A4               	addwf	___ftmul@exp^(0+128),f
  6896  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  6897  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  6898  06AA  0843               	movf	___ftmul@f1,w
  6899  06AB  1683               	bsf	3,5	;RP0=1, select bank1
  6900  06AC  1303               	bcf	3,6	;RP1=0, select bank1
  6901  06AD  00A0               	movwf	??___ftmul^(0+128)
  6902  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  6903  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  6904  06B0  0844               	movf	___ftmul@f1+1,w
  6905  06B1  1683               	bsf	3,5	;RP0=1, select bank1
  6906  06B2  1303               	bcf	3,6	;RP1=0, select bank1
  6907  06B3  00A1               	movwf	(??___ftmul^(0+128)+1)
  6908  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  6909  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  6910  06B6  0845               	movf	___ftmul@f1+2,w
  6911  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  6912  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  6913  06B9  00A2               	movwf	(??___ftmul^(0+128)+2)
  6914  06BA  3010               	movlw	16
  6915  06BB                     u4315:	
  6916  06BB  1003               	clrc
  6917  06BC  0CA2               	rrf	(??___ftmul^(0+128)+2),f
  6918  06BD  0CA1               	rrf	(??___ftmul^(0+128)+1),f
  6919  06BE  0CA0               	rrf	??___ftmul^(0+128),f
  6920  06BF  3EFF               	addlw	-1
  6921  06C0  1D03               	skipz
  6922  06C1  2EBB               	goto	u4315
  6923  06C2  0820               	movf	??___ftmul^(0+128),w
  6924  06C3  00A3               	movwf	(??___ftmul+3)^(0+128)
  6925  06C4  0823               	movf	(??___ftmul+3)^(0+128),w
  6926  06C5  00A9               	movwf	___ftmul@sign^(0+128)
  6927  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  6928  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  6929  06C8  0846               	movf	___ftmul@f2,w
  6930  06C9  1683               	bsf	3,5	;RP0=1, select bank1
  6931  06CA  1303               	bcf	3,6	;RP1=0, select bank1
  6932  06CB  00A0               	movwf	??___ftmul^(0+128)
  6933  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  6934  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  6935  06CE  0847               	movf	___ftmul@f2+1,w
  6936  06CF  1683               	bsf	3,5	;RP0=1, select bank1
  6937  06D0  1303               	bcf	3,6	;RP1=0, select bank1
  6938  06D1  00A1               	movwf	(??___ftmul^(0+128)+1)
  6939  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  6940  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  6941  06D4  0848               	movf	___ftmul@f2+2,w
  6942  06D5  1683               	bsf	3,5	;RP0=1, select bank1
  6943  06D6  1303               	bcf	3,6	;RP1=0, select bank1
  6944  06D7  00A2               	movwf	(??___ftmul^(0+128)+2)
  6945  06D8  3010               	movlw	16
  6946  06D9                     u4325:	
  6947  06D9  1003               	clrc
  6948  06DA  0CA2               	rrf	(??___ftmul^(0+128)+2),f
  6949  06DB  0CA1               	rrf	(??___ftmul^(0+128)+1),f
  6950  06DC  0CA0               	rrf	??___ftmul^(0+128),f
  6951  06DD  3EFF               	addlw	-1
  6952  06DE  1D03               	skipz
  6953  06DF  2ED9               	goto	u4325
  6954  06E0  0820               	movf	??___ftmul^(0+128),w
  6955  06E1  00A3               	movwf	(??___ftmul+3)^(0+128)
  6956  06E2  0823               	movf	(??___ftmul+3)^(0+128),w
  6957  06E3  06A9               	xorwf	___ftmul@sign^(0+128),f
  6958  06E4  3080               	movlw	128
  6959  06E5  00A0               	movwf	??___ftmul^(0+128)
  6960  06E6  0820               	movf	??___ftmul^(0+128),w
  6961  06E7  05A9               	andwf	___ftmul@sign^(0+128),f
  6962  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  6963  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  6964  06EA  17C4               	bsf	___ftmul@f1+1,7
  6965  06EB  17C7               	bsf	___ftmul@f2+1,7
  6966  06EC  30FF               	movlw	255
  6967  06ED  05C6               	andwf	___ftmul@f2,f
  6968  06EE  30FF               	movlw	255
  6969  06EF  05C7               	andwf	___ftmul@f2+1,f
  6970  06F0  3000               	movlw	0
  6971  06F1  05C8               	andwf	___ftmul@f2+2,f
  6972  06F2  3000               	movlw	0
  6973  06F3  1683               	bsf	3,5	;RP0=1, select bank1
  6974  06F4  1303               	bcf	3,6	;RP1=0, select bank1
  6975  06F5  00A5               	movwf	___ftmul@f3_as_product^(0+128)
  6976  06F6  3000               	movlw	0
  6977  06F7  00A6               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  6978  06F8  3000               	movlw	0
  6979  06F9  00A7               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  6980  06FA  3007               	movlw	7
  6981  06FB  00A0               	movwf	??___ftmul^(0+128)
  6982  06FC  0820               	movf	??___ftmul^(0+128),w
  6983  06FD  00A8               	movwf	___ftmul@cntr^(0+128)
  6984  06FE                     l3719:	
  6985  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  6986  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  6987  0700  1C43               	btfss	___ftmul@f1,0
  6988  0701  2F20               	goto	l3723
  6989  0702  0846               	movf	___ftmul@f2,w
  6990  0703  1683               	bsf	3,5	;RP0=1, select bank1
  6991  0704  1303               	bcf	3,6	;RP1=0, select bank1
  6992  0705  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
  6993  0706  1283               	bcf	3,5	;RP0=0, select bank0
  6994  0707  1303               	bcf	3,6	;RP1=0, select bank0
  6995  0708  0847               	movf	___ftmul@f2+1,w
  6996  0709  1103               	clrz
  6997  070A  1803               	skipnc
  6998  070B  0A47               	incf	___ftmul@f2+1,w
  6999  070C  1903               	skipnz
  7000  070D  2F11               	goto	u4341
  7001  070E  1683               	bsf	3,5	;RP0=1, select bank1
  7002  070F  1303               	bcf	3,6	;RP1=0, select bank1
  7003  0710  07A6               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  7004  0711                     u4341:	
  7005  0711  1283               	bcf	3,5	;RP0=0, select bank0
  7006  0712  1303               	bcf	3,6	;RP1=0, select bank0
  7007  0713  0848               	movf	___ftmul@f2+2,w
  7008  0714  1103               	clrz
  7009  0715  1803               	skipnc
  7010  0716  0A48               	incf	___ftmul@f2+2,w
  7011  0717  1903               	skipnz
  7012  0718  2F1C               	goto	u4342
  7013  0719  1683               	bsf	3,5	;RP0=1, select bank1
  7014  071A  1303               	bcf	3,6	;RP1=0, select bank1
  7015  071B  07A7               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  7016  071C                     u4342:	
  7017  071C  1283               	bcf	3,5	;RP0=0, select bank0
  7018  071D  1303               	bcf	3,6	;RP1=0, select bank0
  7019  071E  1683               	bsf	3,5	;RP0=1, select bank1
  7020  071F  1303               	bcf	3,6	;RP1=0, select bank1
  7021  0720                     l3723:	
  7022  0720  3001               	movlw	1
  7023  0721                     u4355:	
  7024  0721  1003               	clrc
  7025  0722  1283               	bcf	3,5	;RP0=0, select bank0
  7026  0723  0CC5               	rrf	___ftmul@f1+2,f
  7027  0724  0CC4               	rrf	___ftmul@f1+1,f
  7028  0725  0CC3               	rrf	___ftmul@f1,f
  7029  0726  3EFF               	addlw	-1
  7030  0727  1D03               	skipz
  7031  0728  2F21               	goto	u4355
  7032  0729  3001               	movlw	1
  7033  072A                     u4365:	
  7034  072A  1003               	clrc
  7035  072B  0DC6               	rlf	___ftmul@f2,f
  7036  072C  0DC7               	rlf	___ftmul@f2+1,f
  7037  072D  0DC8               	rlf	___ftmul@f2+2,f
  7038  072E  3EFF               	addlw	-1
  7039  072F  1D03               	skipz
  7040  0730  2F2A               	goto	u4365
  7041  0731  3001               	movlw	1
  7042  0732  1683               	bsf	3,5	;RP0=1, select bank1
  7043  0733  1303               	bcf	3,6	;RP1=0, select bank1
  7044  0734  02A8               	subwf	___ftmul@cntr^(0+128),f
  7045  0735  1D03               	btfss	3,2
  7046  0736  2EFE               	goto	l3719
  7047  0737  3009               	movlw	9
  7048  0738  00A0               	movwf	??___ftmul^(0+128)
  7049  0739  0820               	movf	??___ftmul^(0+128),w
  7050  073A  00A8               	movwf	___ftmul@cntr^(0+128)
  7051  073B                     l3731:	
  7052  073B  1283               	bcf	3,5	;RP0=0, select bank0
  7053  073C  1303               	bcf	3,6	;RP1=0, select bank0
  7054  073D  1C43               	btfss	___ftmul@f1,0
  7055  073E  2F5D               	goto	l3735
  7056  073F  0846               	movf	___ftmul@f2,w
  7057  0740  1683               	bsf	3,5	;RP0=1, select bank1
  7058  0741  1303               	bcf	3,6	;RP1=0, select bank1
  7059  0742  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
  7060  0743  1283               	bcf	3,5	;RP0=0, select bank0
  7061  0744  1303               	bcf	3,6	;RP1=0, select bank0
  7062  0745  0847               	movf	___ftmul@f2+1,w
  7063  0746  1103               	clrz
  7064  0747  1803               	skipnc
  7065  0748  0A47               	incf	___ftmul@f2+1,w
  7066  0749  1903               	skipnz
  7067  074A  2F4E               	goto	u4391
  7068  074B  1683               	bsf	3,5	;RP0=1, select bank1
  7069  074C  1303               	bcf	3,6	;RP1=0, select bank1
  7070  074D  07A6               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  7071  074E                     u4391:	
  7072  074E  1283               	bcf	3,5	;RP0=0, select bank0
  7073  074F  1303               	bcf	3,6	;RP1=0, select bank0
  7074  0750  0848               	movf	___ftmul@f2+2,w
  7075  0751  1103               	clrz
  7076  0752  1803               	skipnc
  7077  0753  0A48               	incf	___ftmul@f2+2,w
  7078  0754  1903               	skipnz
  7079  0755  2F59               	goto	u4392
  7080  0756  1683               	bsf	3,5	;RP0=1, select bank1
  7081  0757  1303               	bcf	3,6	;RP1=0, select bank1
  7082  0758  07A7               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  7083  0759                     u4392:	
  7084  0759  1283               	bcf	3,5	;RP0=0, select bank0
  7085  075A  1303               	bcf	3,6	;RP1=0, select bank0
  7086  075B  1683               	bsf	3,5	;RP0=1, select bank1
  7087  075C  1303               	bcf	3,6	;RP1=0, select bank1
  7088  075D                     l3735:	
  7089  075D  3001               	movlw	1
  7090  075E                     u4405:	
  7091  075E  1003               	clrc
  7092  075F  1283               	bcf	3,5	;RP0=0, select bank0
  7093  0760  0CC5               	rrf	___ftmul@f1+2,f
  7094  0761  0CC4               	rrf	___ftmul@f1+1,f
  7095  0762  0CC3               	rrf	___ftmul@f1,f
  7096  0763  3EFF               	addlw	-1
  7097  0764  1D03               	skipz
  7098  0765  2F5E               	goto	u4405
  7099  0766  3001               	movlw	1
  7100  0767                     u4415:	
  7101  0767  1003               	clrc
  7102  0768  1683               	bsf	3,5	;RP0=1, select bank1
  7103  0769  1303               	bcf	3,6	;RP1=0, select bank1
  7104  076A  0CA7               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  7105  076B  0CA6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  7106  076C  0CA5               	rrf	___ftmul@f3_as_product^(0+128),f
  7107  076D  3EFF               	addlw	-1
  7108  076E  1D03               	skipz
  7109  076F  2F67               	goto	u4415
  7110  0770  3001               	movlw	1
  7111  0771  02A8               	subwf	___ftmul@cntr^(0+128),f
  7112  0772  1D03               	btfss	3,2
  7113  0773  2F3B               	goto	l3731
  7114  0774  0825               	movf	___ftmul@f3_as_product^(0+128),w
  7115  0775  1283               	bcf	3,5	;RP0=0, select bank0
  7116  0776  1303               	bcf	3,6	;RP1=0, select bank0
  7117  0777  00B5               	movwf	___ftpack@arg
  7118  0778  1683               	bsf	3,5	;RP0=1, select bank1
  7119  0779  1303               	bcf	3,6	;RP1=0, select bank1
  7120  077A  0826               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  7121  077B  1283               	bcf	3,5	;RP0=0, select bank0
  7122  077C  1303               	bcf	3,6	;RP1=0, select bank0
  7123  077D  00B6               	movwf	___ftpack@arg+1
  7124  077E  1683               	bsf	3,5	;RP0=1, select bank1
  7125  077F  1303               	bcf	3,6	;RP1=0, select bank1
  7126  0780  0827               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  7127  0781  1283               	bcf	3,5	;RP0=0, select bank0
  7128  0782  1303               	bcf	3,6	;RP1=0, select bank0
  7129  0783  00B7               	movwf	___ftpack@arg+2
  7130  0784  1683               	bsf	3,5	;RP0=1, select bank1
  7131  0785  1303               	bcf	3,6	;RP1=0, select bank1
  7132  0786  0824               	movf	___ftmul@exp^(0+128),w
  7133  0787  00A0               	movwf	??___ftmul^(0+128)
  7134  0788  0820               	movf	??___ftmul^(0+128),w
  7135  0789  1283               	bcf	3,5	;RP0=0, select bank0
  7136  078A  1303               	bcf	3,6	;RP1=0, select bank0
  7137  078B  00B8               	movwf	___ftpack@exp
  7138  078C  1683               	bsf	3,5	;RP0=1, select bank1
  7139  078D  1303               	bcf	3,6	;RP1=0, select bank1
  7140  078E  0829               	movf	___ftmul@sign^(0+128),w
  7141  078F  00A1               	movwf	(??___ftmul+1)^(0+128)
  7142  0790  0821               	movf	(??___ftmul+1)^(0+128),w
  7143  0791  1283               	bcf	3,5	;RP0=0, select bank0
  7144  0792  1303               	bcf	3,6	;RP1=0, select bank0
  7145  0793  00B9               	movwf	___ftpack@sign
  7146  0794  160A  118A  22FE   	fcall	___ftpack
  7147  0797  1283               	bcf	3,5	;RP0=0, select bank0
  7148  0798  1303               	bcf	3,6	;RP1=0, select bank0
  7149  0799  0835               	movf	?___ftpack,w
  7150  079A  00C3               	movwf	?___ftmul
  7151  079B  0836               	movf	?___ftpack+1,w
  7152  079C  00C4               	movwf	?___ftmul+1
  7153  079D  0837               	movf	?___ftpack+2,w
  7154  079E  00C5               	movwf	?___ftmul+2
  7155  079F  0008               	return
  7156  07A0                     __end_of___ftmul:	
  7157                           
  7158                           	psect	text23
  7159  1DF3                     __ptext23:	
  7160 ;; *************** function ___awtoft *****************
  7161 ;; Defined at:
  7162 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  c               2   29[BANK0 ] int 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  sign            1   34[BANK0 ] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;                  3   29[BANK0 ] float 
  7169 ;; Registers used:
  7170 ;;		wreg, status,2, status,0, pclath, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7176 ;;      Params:         0       3       0       0       0
  7177 ;;      Locals:         0       1       0       0       0
  7178 ;;      Temps:          0       2       0       0       0
  7179 ;;      Totals:         0       6       0       0       0
  7180 ;;Total ram usage:        6 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    5
  7183 ;; This function calls:
  7184 ;;		___ftpack
  7185 ;; This function is called by:
  7186 ;;		_set_pwm
  7187 ;;		_status
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function ___awtoft
  7193  1DF3                     ___awtoft:	
  7194                           
  7195                           ;incstack = 0
  7196                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7197  1DF3  1283               	bcf	3,5	;RP0=0, select bank0
  7198  1DF4  1303               	bcf	3,6	;RP1=0, select bank0
  7199  1DF5  01C2               	clrf	___awtoft@sign
  7200  1DF6  1FBE               	btfss	___awtoft@c+1,7
  7201  1DF7  2DFF               	goto	l3691
  7202  1DF8  09BD               	comf	___awtoft@c,f
  7203  1DF9  09BE               	comf	___awtoft@c+1,f
  7204  1DFA  0ABD               	incf	___awtoft@c,f
  7205  1DFB  1903               	skipnz
  7206  1DFC  0ABE               	incf	___awtoft@c+1,f
  7207  1DFD  01C2               	clrf	___awtoft@sign
  7208  1DFE  0AC2               	incf	___awtoft@sign,f
  7209  1DFF                     l3691:	
  7210  1DFF  083D               	movf	___awtoft@c,w
  7211  1E00  00B5               	movwf	___ftpack@arg
  7212  1E01  083E               	movf	___awtoft@c+1,w
  7213  1E02  00B6               	movwf	___ftpack@arg+1
  7214  1E03  01B7               	clrf	___ftpack@arg+2
  7215  1E04  308E               	movlw	142
  7216  1E05  00C0               	movwf	??___awtoft
  7217  1E06  0840               	movf	??___awtoft,w
  7218  1E07  00B8               	movwf	___ftpack@exp
  7219  1E08  0842               	movf	___awtoft@sign,w
  7220  1E09  00C1               	movwf	??___awtoft+1
  7221  1E0A  0841               	movf	??___awtoft+1,w
  7222  1E0B  00B9               	movwf	___ftpack@sign
  7223  1E0C  160A  118A  22FE   	fcall	___ftpack
  7224  1E0F  1283               	bcf	3,5	;RP0=0, select bank0
  7225  1E10  1303               	bcf	3,6	;RP1=0, select bank0
  7226  1E11  0835               	movf	?___ftpack,w
  7227  1E12  00BD               	movwf	?___awtoft
  7228  1E13  0836               	movf	?___ftpack+1,w
  7229  1E14  00BE               	movwf	?___awtoft+1
  7230  1E15  0837               	movf	?___ftpack+2,w
  7231  1E16  00BF               	movwf	?___awtoft+2
  7232  1E17  0008               	return
  7233  1E18                     __end_of___awtoft:	
  7234                           
  7235                           	psect	text24
  7236  12FE                     __ptext24:	
  7237 ;; *************** function ___ftpack *****************
  7238 ;; Defined at:
  7239 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  arg             3   21[BANK0 ] unsigned um
  7242 ;;  exp             1   24[BANK0 ] unsigned char 
  7243 ;;  sign            1   25[BANK0 ] unsigned char 
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;		None
  7246 ;; Return value:  Size  Location     Type
  7247 ;;                  3   21[BANK0 ] float 
  7248 ;; Registers used:
  7249 ;;		wreg, status,2, status,0
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7255 ;;      Params:         0       5       0       0       0
  7256 ;;      Locals:         0       0       0       0       0
  7257 ;;      Temps:          0       3       0       0       0
  7258 ;;      Totals:         0       8       0       0       0
  7259 ;;Total ram usage:        8 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:    4
  7262 ;; This function calls:
  7263 ;;		Nothing
  7264 ;; This function is called by:
  7265 ;;		___awtoft
  7266 ;;		___ftdiv
  7267 ;;		___ftmul
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function ___ftpack
  7273  12FE                     ___ftpack:	
  7274                           
  7275                           ;incstack = 0
  7276                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7277  12FE  1283               	bcf	3,5	;RP0=0, select bank0
  7278  12FF  1303               	bcf	3,6	;RP1=0, select bank0
  7279  1300  0838               	movf	___ftpack@exp,w
  7280  1301  1903               	btfsc	3,2
  7281  1302  2B08               	goto	l3651
  7282  1303  0837               	movf	___ftpack@arg+2,w
  7283  1304  0436               	iorwf	___ftpack@arg+1,w
  7284  1305  0435               	iorwf	___ftpack@arg,w
  7285  1306  1D03               	skipz
  7286  1307  2B1B               	goto	l3657
  7287  1308                     l3651:	
  7288  1308  3000               	movlw	0
  7289  1309  00B5               	movwf	?___ftpack
  7290  130A  3000               	movlw	0
  7291  130B  00B6               	movwf	?___ftpack+1
  7292  130C  3000               	movlw	0
  7293  130D  00B7               	movwf	?___ftpack+2
  7294  130E  0008               	return
  7295  130F                     l3655:	
  7296  130F  3001               	movlw	1
  7297  1310  00BA               	movwf	??___ftpack
  7298  1311  083A               	movf	??___ftpack,w
  7299  1312  07B8               	addwf	___ftpack@exp,f
  7300  1313  3001               	movlw	1
  7301  1314                     u4175:	
  7302  1314  1003               	clrc
  7303  1315  0CB7               	rrf	___ftpack@arg+2,f
  7304  1316  0CB6               	rrf	___ftpack@arg+1,f
  7305  1317  0CB5               	rrf	___ftpack@arg,f
  7306  1318  3EFF               	addlw	-1
  7307  1319  1D03               	skipz
  7308  131A  2B14               	goto	u4175
  7309  131B                     l3657:	
  7310  131B  30FE               	movlw	254
  7311  131C  0537               	andwf	___ftpack@arg+2,w
  7312  131D  1903               	btfsc	3,2
  7313  131E  2B36               	goto	l655
  7314  131F  2B0F               	goto	l3655
  7315  1320                     l3659:	
  7316  1320  3001               	movlw	1
  7317  1321  00BA               	movwf	??___ftpack
  7318  1322  083A               	movf	??___ftpack,w
  7319  1323  07B8               	addwf	___ftpack@exp,f
  7320  1324  3001               	movlw	1
  7321  1325  07B5               	addwf	___ftpack@arg,f
  7322  1326  3000               	movlw	0
  7323  1327  1803               	skipnc
  7324  1328  3001               	movlw	1
  7325  1329  07B6               	addwf	___ftpack@arg+1,f
  7326  132A  3000               	movlw	0
  7327  132B  1803               	skipnc
  7328  132C  3001               	movlw	1
  7329  132D  07B7               	addwf	___ftpack@arg+2,f
  7330  132E  3001               	movlw	1
  7331  132F                     u4195:	
  7332  132F  1003               	clrc
  7333  1330  0CB7               	rrf	___ftpack@arg+2,f
  7334  1331  0CB6               	rrf	___ftpack@arg+1,f
  7335  1332  0CB5               	rrf	___ftpack@arg,f
  7336  1333  3EFF               	addlw	-1
  7337  1334  1D03               	skipz
  7338  1335  2B2F               	goto	u4195
  7339  1336                     l655:	
  7340  1336  30FF               	movlw	255
  7341  1337  0537               	andwf	___ftpack@arg+2,w
  7342  1338  1903               	btfsc	3,2
  7343  1339  2B45               	goto	l3667
  7344  133A  2B20               	goto	l3659
  7345  133B                     l3665:	
  7346  133B  3001               	movlw	1
  7347  133C  02B8               	subwf	___ftpack@exp,f
  7348  133D  3001               	movlw	1
  7349  133E                     u4215:	
  7350  133E  1003               	clrc
  7351  133F  0DB5               	rlf	___ftpack@arg,f
  7352  1340  0DB6               	rlf	___ftpack@arg+1,f
  7353  1341  0DB7               	rlf	___ftpack@arg+2,f
  7354  1342  3EFF               	addlw	-1
  7355  1343  1D03               	skipz
  7356  1344  2B3E               	goto	u4215
  7357  1345                     l3667:	
  7358  1345  1BB6               	btfsc	___ftpack@arg+1,7
  7359  1346  2B4B               	goto	l662
  7360  1347  3002               	movlw	2
  7361  1348  0238               	subwf	___ftpack@exp,w
  7362  1349  1803               	skipnc
  7363  134A  2B3B               	goto	l3665
  7364  134B                     l662:	
  7365  134B  1838               	btfsc	___ftpack@exp,0
  7366  134C  2B53               	goto	l663
  7367  134D  30FF               	movlw	255
  7368  134E  05B5               	andwf	___ftpack@arg,f
  7369  134F  307F               	movlw	127
  7370  1350  05B6               	andwf	___ftpack@arg+1,f
  7371  1351  30FF               	movlw	255
  7372  1352  05B7               	andwf	___ftpack@arg+2,f
  7373  1353                     l663:	
  7374  1353  1003               	clrc
  7375  1354  0CB8               	rrf	___ftpack@exp,f
  7376  1355  0838               	movf	___ftpack@exp,w
  7377  1356  00BA               	movwf	??___ftpack
  7378  1357  01BB               	clrf	??___ftpack+1
  7379  1358  01BC               	clrf	??___ftpack+2
  7380  1359  3010               	movlw	16
  7381  135A                     u4255:	
  7382  135A  1003               	clrc
  7383  135B  0DBA               	rlf	??___ftpack,f
  7384  135C  0DBB               	rlf	??___ftpack+1,f
  7385  135D  0DBC               	rlf	??___ftpack+2,f
  7386  135E  3EFF               	addlw	-1
  7387  135F  1D03               	skipz
  7388  1360  2B5A               	goto	u4255
  7389  1361  083A               	movf	??___ftpack,w
  7390  1362  04B5               	iorwf	___ftpack@arg,f
  7391  1363  083B               	movf	??___ftpack+1,w
  7392  1364  04B6               	iorwf	___ftpack@arg+1,f
  7393  1365  083C               	movf	??___ftpack+2,w
  7394  1366  04B7               	iorwf	___ftpack@arg+2,f
  7395  1367  0839               	movf	___ftpack@sign,w
  7396  1368  1903               	btfsc	3,2
  7397  1369  0008               	return
  7398  136A  17B7               	bsf	___ftpack@arg+2,7
  7399  136B  0008               	return
  7400  136C                     __end_of___ftpack:	
  7401                           
  7402                           	psect	text25
  7403  07A0                     __ptext25:	
  7404 ;; *************** function _acquire *****************
  7405 ;; Defined at:
  7406 ;;		line 391 in file "main.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  valueAD         2   21[BANK1 ] unsigned int 
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7420 ;;      Params:         0       0       0       0       0
  7421 ;;      Locals:         0       0       2       0       0
  7422 ;;      Temps:          0       0       0       0       0
  7423 ;;      Totals:         0       0       2       0       0
  7424 ;;Total ram usage:        2 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    6
  7427 ;; This function calls:
  7428 ;;		_USARTDataAvailable
  7429 ;;		_USARTGotoNewLine
  7430 ;;		_USARTWriteString
  7431 ;;		_sampling
  7432 ;;		_sprintf
  7433 ;; This function is called by:
  7434 ;;		_choice
  7435 ;;		_step
  7436 ;;		_run
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           
  7441                           ;psect for function _acquire
  7442  07A0                     _acquire:	
  7443                           
  7444                           ;main.c: 392: USARTGotoNewLine();
  7445                           
  7446                           ;incstack = 0
  7447 ;; hardware stack exceeded
  7448                           ; Regs used in _acquire: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7449  07A0  120A  158A  2001  120A  118A  	fcall	_USARTGotoNewLine
  7450                           
  7451                           ;main.c: 393: acquirement = 1;
  7452  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  7453  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  7454  07A7  01D8               	clrf	_acquirement
  7455  07A8  0AD8               	incf	_acquirement,f
  7456  07A9                     l3981:	
  7457                           ;main.c: 394: while(USARTDataAvailable() == 0 &&acquirement){
  7458                           
  7459  07A9  160A  158A  2564  120A  118A  	fcall	_USARTDataAvailable
  7460  07AE  3A00               	xorlw	0
  7461  07AF  1D03               	skipz
  7462  07B0  0008               	return
  7463  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  7464  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  7465  07B3  0858               	movf	_acquirement,w
  7466  07B4  1903               	btfsc	3,2
  7467  07B5  0008               	return
  7468                           
  7469                           ;main.c: 395: unsigned int valueAD = sampling();
  7470  07B6  160A  158A  24A1  120A  118A  	fcall	_sampling
  7471  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  7472  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  7473  07BD  0836               	movf	?_sampling+1,w
  7474  07BE  1683               	bsf	3,5	;RP0=1, select bank1
  7475  07BF  1303               	bcf	3,6	;RP1=0, select bank1
  7476  07C0  00B6               	movwf	(acquire@valueAD+1)^(0+128)
  7477  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  7478  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  7479  07C3  0835               	movf	?_sampling,w
  7480  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  7481  07C5  1303               	bcf	3,6	;RP1=0, select bank1
  7482  07C6  00B5               	movwf	acquire@valueAD^(0+128)
  7483                           
  7484                           ;main.c: 396: if(valueAD<=1023 && valueAD >= 0){
  7485  07C7  3004               	movlw	4
  7486  07C8  0236               	subwf	(acquire@valueAD+1)^(0+128),w
  7487  07C9  3000               	movlw	0
  7488  07CA  1903               	skipnz
  7489  07CB  0235               	subwf	acquire@valueAD^(0+128),w
  7490  07CC  1803               	skipnc
  7491  07CD  2FA9               	goto	l3981
  7492                           
  7493                           ;main.c: 397: USARTWriteString("The analog value is: ");
  7494  07CE  309D               	movlw	low (STR_61| (0+32768))
  7495  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  7496  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  7497  07D1  00B6               	movwf	USARTWriteString@str
  7498  07D2  3084               	movlw	high (STR_61| (0+32768))
  7499  07D3  00B7               	movwf	USARTWriteString@str+1
  7500  07D4  160A  158A  25CE  120A  118A  	fcall	_USARTWriteString
  7501                           
  7502                           ;main.c: 398: sprintf(strBuffer,"%d",valueAD);
  7503  07D9  3051               	movlw	low (STR_52| (0+32768))
  7504  07DA  1683               	bsf	3,5	;RP0=1, select bank1
  7505  07DB  1303               	bcf	3,6	;RP1=0, select bank1
  7506  07DC  00A5               	movwf	sprintf@f^(0+128)
  7507  07DD  3086               	movlw	high (STR_52| (0+32768))
  7508  07DE  00A6               	movwf	(sprintf@f^(0+128)+1)
  7509  07DF  0836               	movf	(acquire@valueAD+1)^(0+128),w
  7510  07E0  00A8               	movwf	((?_sprintf+1)^(0+128)+2)
  7511  07E1  0835               	movf	acquire@valueAD^(0+128),w
  7512  07E2  00A7               	movwf	(?_sprintf^(0+128)+2)
  7513  07E3  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  7514  07E4  160A  118A  26EE  120A  118A  	fcall	_sprintf
  7515                           
  7516                           ;main.c: 399: USARTWriteString(strBuffer);
  7517  07E9  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  7518  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  7519  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  7520  07EC  00B6               	movwf	USARTWriteString@str
  7521  07ED  3001               	movlw	1
  7522  07EE  00B7               	movwf	USARTWriteString@str+1
  7523  07EF  160A  158A  25CE  120A  118A  	fcall	_USARTWriteString
  7524                           
  7525                           ;main.c: 400: USARTGotoNewLine();
  7526  07F4  120A  158A  2001  120A  118A  	fcall	_USARTGotoNewLine
  7527  07F9  2FA9               	goto	l3981
  7528  07FA                     __end_of_acquire:	
  7529                           
  7530                           	psect	text26
  7531  16EE                     __ptext26:	
  7532 ;; *************** function _sprintf *****************
  7533 ;; Defined at:
  7534 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  sp              1    wreg     PTR unsigned char 
  7537 ;;		 -> strBuffer(25), 
  7538 ;;  f               2    5[BANK1 ] PTR const unsigned char 
  7539 ;;		 -> STR_70(3), STR_68(3), STR_66(3), STR_64(3), 
  7540 ;;		 -> STR_62(3), STR_59(3), STR_53(3), STR_52(3), 
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  sp              1   19[BANK1 ] PTR unsigned char 
  7543 ;;		 -> strBuffer(25), 
  7544 ;;  tmpval          4    0        struct .
  7545 ;;  val             2   17[BANK1 ] unsigned int 
  7546 ;;  cp              2    0        PTR const unsigned char 
  7547 ;;  len             2    0        unsigned int 
  7548 ;;  c               1   20[BANK1 ] char 
  7549 ;;  prec            1   16[BANK1 ] char 
  7550 ;;  flag            1   15[BANK1 ] unsigned char 
  7551 ;;  ap              1   14[BANK1 ] PTR void [1]
  7552 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  2    5[BANK1 ] int 
  7555 ;; Registers used:
  7556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7562 ;;      Params:         0       0       6       0       0
  7563 ;;      Locals:         0       0       7       0       0
  7564 ;;      Temps:          0       0       3       0       0
  7565 ;;      Totals:         0       0      16       0       0
  7566 ;;Total ram usage:       16 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    5
  7569 ;; This function calls:
  7570 ;;		___lwdiv
  7571 ;;		___lwmod
  7572 ;; This function is called by:
  7573 ;;		_step
  7574 ;;		_status
  7575 ;;		_acquire
  7576 ;;		_adReadA0
  7577 ;;		_sys
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _sprintf
  7583  16EE                     _sprintf:	
  7584                           
  7585                           ;incstack = 0
  7586 ;; hardware stack exceeded
  7587                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7588                           ;sprintf@sp stored from wreg
  7589  16EE  1683               	bsf	3,5	;RP0=1, select bank1
  7590  16EF  1303               	bcf	3,6	;RP1=0, select bank1
  7591  16F0  00B3               	movwf	sprintf@sp^(0+128)
  7592                           
  7593                           ;doprnt.c: 494: va_list ap;
  7594                           ;doprnt.c: 499: signed char c;
  7595                           ;doprnt.c: 506: signed char prec;
  7596                           ;doprnt.c: 508: unsigned char flag;
  7597                           ;doprnt.c: 523: union {
  7598                           ;doprnt.c: 524: unsigned long vd;
  7599                           ;doprnt.c: 525: double integ;
  7600                           ;doprnt.c: 526: } tmpval;
  7601                           ;doprnt.c: 528: unsigned int val;
  7602                           ;doprnt.c: 529: unsigned len;
  7603                           ;doprnt.c: 530: const char * cp;
  7604                           ;doprnt.c: 533: *ap = __va_start();
  7605  16F1  30A7               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7606  16F2  00AB               	movwf	??_sprintf^(0+128)
  7607  16F3  082B               	movf	??_sprintf^(0+128),w
  7608  16F4  00AE               	movwf	sprintf@ap^(0+128)
  7609  16F5                     l3937:	
  7610                           ;doprnt.c: 536: while(c = *f++) {
  7611                           
  7612  16F5  0826               	movf	(sprintf@f+1)^(0+128),w
  7613  16F6  00AC               	movwf	(??_sprintf^(0+128)+1)
  7614  16F7  0825               	movf	sprintf@f^(0+128),w
  7615  16F8  00AB               	movwf	??_sprintf^(0+128)
  7616  16F9  0AA5               	incf	sprintf@f^(0+128),f
  7617  16FA  1903               	skipnz
  7618  16FB  0AA6               	incf	(sprintf@f+1)^(0+128),f
  7619  16FC  082C               	movf	(??_sprintf+1)^(0+128),w
  7620  16FD  1283               	bcf	3,5	;RP0=0, select bank0
  7621  16FE  1303               	bcf	3,6	;RP1=0, select bank0
  7622  16FF  00FF               	movwf	127
  7623  1700  1683               	bsf	3,5	;RP0=1, select bank1
  7624  1701  1303               	bcf	3,6	;RP1=0, select bank1
  7625  1702  082B               	movf	??_sprintf^(0+128),w
  7626  1703  0084               	movwf	4
  7627  1704  1283               	bcf	3,5	;RP0=0, select bank0
  7628  1705  1303               	bcf	3,6	;RP1=0, select bank0
  7629  1706  120A  118A  2100  160A  118A  	fcall	stringtab
  7630  170B  1683               	bsf	3,5	;RP0=1, select bank1
  7631  170C  1303               	bcf	3,6	;RP1=0, select bank1
  7632  170D  00AD               	movwf	(??_sprintf+2)^(0+128)
  7633  170E  082D               	movf	(??_sprintf+2)^(0+128),w
  7634  170F  00B4               	movwf	sprintf@c^(0+128)
  7635  1710  0834               	movf	sprintf@c^(0+128),w
  7636  1711  1903               	btfsc	3,2
  7637  1712  2FFB               	goto	l3939
  7638                           
  7639                           ;doprnt.c: 538: if(c != '%')
  7640  1713  3025               	movlw	37
  7641  1714  0634               	xorwf	sprintf@c^(0+128),w
  7642  1715  1903               	btfsc	3,2
  7643  1716  2F23               	goto	l3893
  7644                           
  7645                           ;doprnt.c: 540: {
  7646                           ;doprnt.c: 541: ((*sp++ = (c)));
  7647  1717  0834               	movf	sprintf@c^(0+128),w
  7648  1718  00AB               	movwf	??_sprintf^(0+128)
  7649  1719  0833               	movf	sprintf@sp^(0+128),w
  7650  171A  0084               	movwf	4
  7651  171B  082B               	movf	??_sprintf^(0+128),w
  7652  171C  1783               	bsf	3,7	;select IRP bank2
  7653  171D  0080               	movwf	0
  7654  171E  3001               	movlw	1
  7655  171F  00AB               	movwf	??_sprintf^(0+128)
  7656  1720  082B               	movf	??_sprintf^(0+128),w
  7657  1721  07B3               	addwf	sprintf@sp^(0+128),f
  7658                           
  7659                           ;doprnt.c: 542: continue;
  7660  1722  2EF5               	goto	l3937
  7661  1723                     l3893:	
  7662                           
  7663                           ;doprnt.c: 543: }
  7664                           ;doprnt.c: 548: flag = 0;
  7665  1723  01AF               	clrf	sprintf@flag^(0+128)
  7666                           
  7667                           ;doprnt.c: 822: }
  7668                           
  7669                           ;doprnt.c: 813: continue;
  7670                           
  7671                           ;doprnt.c: 802: default:
  7672                           
  7673                           ;doprnt.c: 698: case 'i':
  7674                           ;doprnt.c: 699: break;
  7675                           
  7676                           ;doprnt.c: 697: case 'd':
  7677                           
  7678                           ;doprnt.c: 638: goto alldone;
  7679                           
  7680                           ;doprnt.c: 637: case 0:
  7681                           
  7682                           ;doprnt.c: 635: switch(c = *f++) {
  7683  1724  0826               	movf	(sprintf@f+1)^(0+128),w
  7684  1725  00AC               	movwf	(??_sprintf^(0+128)+1)
  7685  1726  0825               	movf	sprintf@f^(0+128),w
  7686  1727  00AB               	movwf	??_sprintf^(0+128)
  7687  1728  0AA5               	incf	sprintf@f^(0+128),f
  7688  1729  1903               	skipnz
  7689  172A  0AA6               	incf	(sprintf@f+1)^(0+128),f
  7690  172B  082C               	movf	(??_sprintf+1)^(0+128),w
  7691  172C  1283               	bcf	3,5	;RP0=0, select bank0
  7692  172D  1303               	bcf	3,6	;RP1=0, select bank0
  7693  172E  00FF               	movwf	127
  7694  172F  1683               	bsf	3,5	;RP0=1, select bank1
  7695  1730  1303               	bcf	3,6	;RP1=0, select bank1
  7696  1731  082B               	movf	??_sprintf^(0+128),w
  7697  1732  0084               	movwf	4
  7698  1733  1283               	bcf	3,5	;RP0=0, select bank0
  7699  1734  1303               	bcf	3,6	;RP1=0, select bank0
  7700  1735  120A  118A  2100  160A  118A  	fcall	stringtab
  7701  173A  1683               	bsf	3,5	;RP0=1, select bank1
  7702  173B  1303               	bcf	3,6	;RP1=0, select bank1
  7703  173C  00B4               	movwf	sprintf@c^(0+128)
  7704                           
  7705                           ; Switch size 1, requested type "space"
  7706                           ; Number of cases is 3, Range of values is 0 to 105
  7707                           ; switch strategies available:
  7708                           ; Name         Instructions Cycles
  7709                           ; simple_byte           10     6 (average)
  7710                           ; jumptable            260     6 (fixed)
  7711                           ;	Chosen strategy is simple_byte
  7712  173D  3A00               	xorlw	0	; case 0
  7713  173E  1903               	skipnz
  7714  173F  2FFB               	goto	l3939
  7715  1740  3A64               	xorlw	100	; case 100
  7716  1741  1903               	skipnz
  7717  1742  2F47               	goto	l3899
  7718  1743  3A0D               	xorlw	13	; case 105
  7719  1744  1903               	skipnz
  7720  1745  2F47               	goto	l3899
  7721  1746  2EF5               	goto	l3937
  7722  1747                     l3899:	
  7723                           
  7724                           ;doprnt.c: 1253: {
  7725                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7726  1747  082E               	movf	sprintf@ap^(0+128),w
  7727  1748  0084               	movwf	4
  7728  1749  1383               	bcf	3,7	;select IRP bank0
  7729  174A  0800               	movf	0,w
  7730  174B  00B1               	movwf	sprintf@val^(0+128)
  7731  174C  0A84               	incf	4,f
  7732  174D  0800               	movf	0,w
  7733  174E  00B2               	movwf	(sprintf@val+1)^(0+128)
  7734  174F  3002               	movlw	2
  7735  1750  00AB               	movwf	??_sprintf^(0+128)
  7736  1751  082B               	movf	??_sprintf^(0+128),w
  7737  1752  07AE               	addwf	sprintf@ap^(0+128),f
  7738                           
  7739                           ;doprnt.c: 1261: if((int)val < 0) {
  7740  1753  1FB2               	btfss	(sprintf@val+1)^(0+128),7
  7741  1754  2F5E               	goto	l3909
  7742                           
  7743                           ;doprnt.c: 1262: flag |= 0x03;
  7744  1755  3003               	movlw	3
  7745  1756  00AB               	movwf	??_sprintf^(0+128)
  7746  1757  082B               	movf	??_sprintf^(0+128),w
  7747  1758  04AF               	iorwf	sprintf@flag^(0+128),f
  7748                           
  7749                           ;doprnt.c: 1263: val = -val;
  7750  1759  09B1               	comf	sprintf@val^(0+128),f
  7751  175A  09B2               	comf	(sprintf@val+1)^(0+128),f
  7752  175B  0AB1               	incf	sprintf@val^(0+128),f
  7753  175C  1903               	skipnz
  7754  175D  0AB2               	incf	(sprintf@val+1)^(0+128),f
  7755  175E                     l3909:	
  7756                           
  7757                           ;doprnt.c: 1264: }
  7758                           ;doprnt.c: 1266: }
  7759                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7760  175E  01B4               	clrf	sprintf@c^(0+128)
  7761  175F  0AB4               	incf	sprintf@c^(0+128),f
  7762  1760  3005               	movlw	5
  7763  1761  0634               	xorwf	sprintf@c^(0+128),w
  7764  1762  1903               	btfsc	3,2
  7765  1763  2F91               	goto	l3921
  7766  1764                     l3915:	
  7767                           
  7768                           ;doprnt.c: 1306: if(val < dpowers[c])
  7769  1764  0834               	movf	sprintf@c^(0+128),w
  7770  1765  00AB               	movwf	??_sprintf^(0+128)
  7771  1766  072B               	addwf	??_sprintf^(0+128),w
  7772  1767  3E12               	addlw	low (_dpowers| (0+32768))
  7773  1768  0084               	movwf	4
  7774  1769  3081               	movlw	high (_dpowers| (0+32768))
  7775  176A  1803               	skipnc
  7776  176B  3E01               	addlw	1
  7777  176C  1283               	bcf	3,5	;RP0=0, select bank0
  7778  176D  1303               	bcf	3,6	;RP1=0, select bank0
  7779  176E  00FF               	movwf	127
  7780  176F  120A  118A  2100  160A  118A  	fcall	stringtab
  7781  1774  1683               	bsf	3,5	;RP0=1, select bank1
  7782  1775  1303               	bcf	3,6	;RP1=0, select bank1
  7783  1776  00AC               	movwf	(??_sprintf+1)^(0+128)
  7784  1777  1283               	bcf	3,5	;RP0=0, select bank0
  7785  1778  1303               	bcf	3,6	;RP1=0, select bank0
  7786  1779  120A  118A  2100  160A  118A  	fcall	stringtab
  7787  177E  1683               	bsf	3,5	;RP0=1, select bank1
  7788  177F  1303               	bcf	3,6	;RP1=0, select bank1
  7789  1780  00AD               	movwf	((??_sprintf+1)^(0+128)+1)
  7790  1781  082D               	movf	(??_sprintf+2)^(0+128),w
  7791  1782  0232               	subwf	(sprintf@val+1)^(0+128),w
  7792  1783  1D03               	skipz
  7793  1784  2F87               	goto	u4735
  7794  1785  082C               	movf	(??_sprintf+1)^(0+128),w
  7795  1786  0231               	subwf	sprintf@val^(0+128),w
  7796  1787                     u4735:	
  7797  1787  1C03               	btfss	3,0
  7798  1788  2F91               	goto	l3921
  7799                           
  7800                           ;doprnt.c: 1307: break;
  7801  1789  3001               	movlw	1
  7802  178A  00AB               	movwf	??_sprintf^(0+128)
  7803  178B  082B               	movf	??_sprintf^(0+128),w
  7804  178C  07B4               	addwf	sprintf@c^(0+128),f
  7805  178D  3005               	movlw	5
  7806  178E  0634               	xorwf	sprintf@c^(0+128),w
  7807  178F  1D03               	btfss	3,2
  7808  1790  2F64               	goto	l3915
  7809  1791                     l3921:	
  7810                           
  7811                           ;doprnt.c: 1422: {
  7812                           ;doprnt.c: 1438: if(flag & 0x03)
  7813  1791  082F               	movf	sprintf@flag^(0+128),w
  7814  1792  3903               	andlw	3
  7815  1793  1903               	btfsc	3,2
  7816  1794  2FA0               	goto	l3927
  7817                           
  7818                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7819  1795  302D               	movlw	45
  7820  1796  00AB               	movwf	??_sprintf^(0+128)
  7821  1797  0833               	movf	sprintf@sp^(0+128),w
  7822  1798  0084               	movwf	4
  7823  1799  082B               	movf	??_sprintf^(0+128),w
  7824  179A  1783               	bsf	3,7	;select IRP bank2
  7825  179B  0080               	movwf	0
  7826  179C  3001               	movlw	1
  7827  179D  00AB               	movwf	??_sprintf^(0+128)
  7828  179E  082B               	movf	??_sprintf^(0+128),w
  7829  179F  07B3               	addwf	sprintf@sp^(0+128),f
  7830  17A0                     l3927:	
  7831                           
  7832                           ;doprnt.c: 1469: }
  7833                           ;doprnt.c: 1472: prec = c;
  7834  17A0  0834               	movf	sprintf@c^(0+128),w
  7835  17A1  00AB               	movwf	??_sprintf^(0+128)
  7836  17A2  082B               	movf	??_sprintf^(0+128),w
  7837  17A3  00B0               	movwf	sprintf@prec^(0+128)
  7838  17A4                     l3935:	
  7839                           ;doprnt.c: 1474: while(prec--) {
  7840                           
  7841  17A4  30FF               	movlw	255
  7842  17A5  00AB               	movwf	??_sprintf^(0+128)
  7843  17A6  082B               	movf	??_sprintf^(0+128),w
  7844  17A7  07B0               	addwf	sprintf@prec^(0+128),f
  7845  17A8  0A30               	incf	sprintf@prec^(0+128),w
  7846  17A9  1903               	btfsc	3,2
  7847  17AA  2EF5               	goto	l3937
  7848                           
  7849                           ;doprnt.c: 1478: {
  7850                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7851  17AB  300A               	movlw	10
  7852  17AC  00A0               	movwf	___lwmod@divisor^(0+128)
  7853  17AD  3000               	movlw	0
  7854  17AE  00A1               	movwf	(___lwmod@divisor^(0+128)+1)
  7855  17AF  0830               	movf	sprintf@prec^(0+128),w
  7856  17B0  00AB               	movwf	??_sprintf^(0+128)
  7857  17B1  072B               	addwf	??_sprintf^(0+128),w
  7858  17B2  3E12               	addlw	low (_dpowers| (0+32768))
  7859  17B3  0084               	movwf	4
  7860  17B4  3081               	movlw	high (_dpowers| (0+32768))
  7861  17B5  1803               	skipnc
  7862  17B6  3E01               	addlw	1
  7863  17B7  1283               	bcf	3,5	;RP0=0, select bank0
  7864  17B8  1303               	bcf	3,6	;RP1=0, select bank0
  7865  17B9  00FF               	movwf	127
  7866  17BA  120A  118A  2100  160A  118A  	fcall	stringtab
  7867  17BF  00B5               	movwf	___lwdiv@divisor
  7868  17C0  120A  118A  2100  160A  118A  	fcall	stringtab
  7869  17C5  00B6               	movwf	___lwdiv@divisor+1
  7870  17C6  1683               	bsf	3,5	;RP0=1, select bank1
  7871  17C7  1303               	bcf	3,6	;RP1=0, select bank1
  7872  17C8  0832               	movf	(sprintf@val+1)^(0+128),w
  7873  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  7874  17CA  1303               	bcf	3,6	;RP1=0, select bank0
  7875  17CB  00B8               	movwf	___lwdiv@dividend+1
  7876  17CC  1683               	bsf	3,5	;RP0=1, select bank1
  7877  17CD  1303               	bcf	3,6	;RP1=0, select bank1
  7878  17CE  0831               	movf	sprintf@val^(0+128),w
  7879  17CF  1283               	bcf	3,5	;RP0=0, select bank0
  7880  17D0  1303               	bcf	3,6	;RP1=0, select bank0
  7881  17D1  00B7               	movwf	___lwdiv@dividend
  7882  17D2  160A  158A  27C2  160A  118A  	fcall	___lwdiv
  7883  17D7  1283               	bcf	3,5	;RP0=0, select bank0
  7884  17D8  1303               	bcf	3,6	;RP1=0, select bank0
  7885  17D9  0836               	movf	?___lwdiv+1,w
  7886  17DA  1683               	bsf	3,5	;RP0=1, select bank1
  7887  17DB  1303               	bcf	3,6	;RP1=0, select bank1
  7888  17DC  00A3               	movwf	(___lwmod@dividend+1)^(0+128)
  7889  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  7890  17DE  1303               	bcf	3,6	;RP1=0, select bank0
  7891  17DF  0835               	movf	?___lwdiv,w
  7892  17E0  1683               	bsf	3,5	;RP0=1, select bank1
  7893  17E1  1303               	bcf	3,6	;RP1=0, select bank1
  7894  17E2  00A2               	movwf	___lwmod@dividend^(0+128)
  7895  17E3  160A  158A  2711  160A  118A  	fcall	___lwmod
  7896  17E8  1683               	bsf	3,5	;RP0=1, select bank1
  7897  17E9  1303               	bcf	3,6	;RP1=0, select bank1
  7898  17EA  0820               	movf	?___lwmod^(0+128),w
  7899  17EB  3E30               	addlw	48
  7900  17EC  00AC               	movwf	(??_sprintf+1)^(0+128)
  7901  17ED  082C               	movf	(??_sprintf+1)^(0+128),w
  7902  17EE  00B4               	movwf	sprintf@c^(0+128)
  7903                           
  7904                           ;doprnt.c: 1523: }
  7905                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7906  17EF  0834               	movf	sprintf@c^(0+128),w
  7907  17F0  00AB               	movwf	??_sprintf^(0+128)
  7908  17F1  0833               	movf	sprintf@sp^(0+128),w
  7909  17F2  0084               	movwf	4
  7910  17F3  082B               	movf	??_sprintf^(0+128),w
  7911  17F4  1783               	bsf	3,7	;select IRP bank2
  7912  17F5  0080               	movwf	0
  7913  17F6  3001               	movlw	1
  7914  17F7  00AB               	movwf	??_sprintf^(0+128)
  7915  17F8  082B               	movf	??_sprintf^(0+128),w
  7916  17F9  07B3               	addwf	sprintf@sp^(0+128),f
  7917  17FA  2FA4               	goto	l3935
  7918  17FB                     l3939:	
  7919                           ;doprnt.c: 1525: }
  7920                           ;doprnt.c: 1533: }
  7921                           ;doprnt.c: 1535: alldone:
  7922                           
  7923                           
  7924                           ;doprnt.c: 1538: *sp = 0;
  7925  17FB  0833               	movf	sprintf@sp^(0+128),w
  7926  17FC  0084               	movwf	4
  7927  17FD  1783               	bsf	3,7	;select IRP bank2
  7928  17FE  0180               	clrf	0
  7929  17FF  0008               	return
  7930  1800                     __end_of_sprintf:	
  7931                           ;doprnt.c: 1540: return 0;
  7932                           ;	Return value of _sprintf is never used
  7933                           
  7934                           
  7935                           	psect	text27
  7936  1F11                     __ptext27:	
  7937 ;; *************** function ___lwmod *****************
  7938 ;; Defined at:
  7939 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  divisor         2    0[BANK1 ] unsigned int 
  7942 ;;  dividend        2    2[BANK1 ] unsigned int 
  7943 ;; Auto vars:     Size  Location     Type
  7944 ;;  counter         1    4[BANK1 ] unsigned char 
  7945 ;; Return value:  Size  Location     Type
  7946 ;;                  2    0[BANK1 ] unsigned int 
  7947 ;; Registers used:
  7948 ;;		wreg, status,2, status,0
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7954 ;;      Params:         0       0       4       0       0
  7955 ;;      Locals:         0       0       1       0       0
  7956 ;;      Temps:          0       1       0       0       0
  7957 ;;      Totals:         0       1       5       0       0
  7958 ;;Total ram usage:        6 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    4
  7961 ;; This function calls:
  7962 ;;		Nothing
  7963 ;; This function is called by:
  7964 ;;		_sys
  7965 ;;		_sprintf
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           
  7970                           ;psect for function ___lwmod
  7971  1F11                     ___lwmod:	
  7972                           
  7973                           ;incstack = 0
  7974 ;; hardware stack exceeded
  7975                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7976  1F11  1683               	bsf	3,5	;RP0=1, select bank1
  7977  1F12  1303               	bcf	3,6	;RP1=0, select bank1
  7978  1F13  0820               	movf	___lwmod@divisor^(0+128),w
  7979  1F14  0421               	iorwf	(___lwmod@divisor+1)^(0+128),w
  7980  1F15  1903               	btfsc	3,2
  7981  1F16  2F44               	goto	l3831
  7982  1F17  01A4               	clrf	___lwmod@counter^(0+128)
  7983  1F18  0AA4               	incf	___lwmod@counter^(0+128),f
  7984  1F19                     l3821:	
  7985  1F19  1BA1               	btfsc	(___lwmod@divisor+1)^(0+128),7
  7986  1F1A  2F2B               	goto	l3823
  7987  1F1B  3001               	movlw	1
  7988  1F1C                     u4615:	
  7989  1F1C  1003               	clrc
  7990  1F1D  0DA0               	rlf	___lwmod@divisor^(0+128),f
  7991  1F1E  0DA1               	rlf	(___lwmod@divisor+1)^(0+128),f
  7992  1F1F  3EFF               	addlw	-1
  7993  1F20  1D03               	skipz
  7994  1F21  2F1C               	goto	u4615
  7995  1F22  3001               	movlw	1
  7996  1F23  1283               	bcf	3,5	;RP0=0, select bank0
  7997  1F24  1303               	bcf	3,6	;RP1=0, select bank0
  7998  1F25  00C9               	movwf	??___lwmod
  7999  1F26  0849               	movf	??___lwmod,w
  8000  1F27  1683               	bsf	3,5	;RP0=1, select bank1
  8001  1F28  1303               	bcf	3,6	;RP1=0, select bank1
  8002  1F29  07A4               	addwf	___lwmod@counter^(0+128),f
  8003  1F2A  2F19               	goto	l3821
  8004  1F2B                     l3823:	
  8005  1F2B  0821               	movf	(___lwmod@divisor+1)^(0+128),w
  8006  1F2C  0223               	subwf	(___lwmod@dividend+1)^(0+128),w
  8007  1F2D  1D03               	skipz
  8008  1F2E  2F31               	goto	u4635
  8009  1F2F  0820               	movf	___lwmod@divisor^(0+128),w
  8010  1F30  0222               	subwf	___lwmod@dividend^(0+128),w
  8011  1F31                     u4635:	
  8012  1F31  1C03               	skipc
  8013  1F32  2F39               	goto	l3827
  8014  1F33  0820               	movf	___lwmod@divisor^(0+128),w
  8015  1F34  02A2               	subwf	___lwmod@dividend^(0+128),f
  8016  1F35  0821               	movf	(___lwmod@divisor+1)^(0+128),w
  8017  1F36  1C03               	skipc
  8018  1F37  03A3               	decf	(___lwmod@dividend+1)^(0+128),f
  8019  1F38  02A3               	subwf	(___lwmod@dividend+1)^(0+128),f
  8020  1F39                     l3827:	
  8021  1F39  3001               	movlw	1
  8022  1F3A                     u4645:	
  8023  1F3A  1003               	clrc
  8024  1F3B  0CA1               	rrf	(___lwmod@divisor+1)^(0+128),f
  8025  1F3C  0CA0               	rrf	___lwmod@divisor^(0+128),f
  8026  1F3D  3EFF               	addlw	-1
  8027  1F3E  1D03               	skipz
  8028  1F3F  2F3A               	goto	u4645
  8029  1F40  3001               	movlw	1
  8030  1F41  02A4               	subwf	___lwmod@counter^(0+128),f
  8031  1F42  1D03               	btfss	3,2
  8032  1F43  2F2B               	goto	l3823
  8033  1F44                     l3831:	
  8034  1F44  0823               	movf	(___lwmod@dividend+1)^(0+128),w
  8035  1F45  00A1               	movwf	(?___lwmod+1)^(0+128)
  8036  1F46  0822               	movf	___lwmod@dividend^(0+128),w
  8037  1F47  00A0               	movwf	?___lwmod^(0+128)
  8038  1F48  0008               	return
  8039  1F49                     __end_of___lwmod:	
  8040                           
  8041                           	psect	text28
  8042  1FC2                     __ptext28:	
  8043 ;; *************** function ___lwdiv *****************
  8044 ;; Defined at:
  8045 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;  divisor         2   21[BANK0 ] unsigned int 
  8048 ;;  dividend        2   23[BANK0 ] unsigned int 
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  quotient        2   27[BANK0 ] unsigned int 
  8051 ;;  counter         1   26[BANK0 ] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  2   21[BANK0 ] unsigned int 
  8054 ;; Registers used:
  8055 ;;		wreg, status,2, status,0
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8061 ;;      Params:         0       4       0       0       0
  8062 ;;      Locals:         0       3       0       0       0
  8063 ;;      Temps:          0       1       0       0       0
  8064 ;;      Totals:         0       8       0       0       0
  8065 ;;Total ram usage:        8 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; Hardware stack levels required when called:    4
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_sprintf
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           
  8076                           ;psect for function ___lwdiv
  8077  1FC2                     ___lwdiv:	
  8078                           
  8079                           ;incstack = 0
  8080 ;; hardware stack exceeded
  8081                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8082  1FC2  1283               	bcf	3,5	;RP0=0, select bank0
  8083  1FC3  1303               	bcf	3,6	;RP1=0, select bank0
  8084  1FC4  01BB               	clrf	___lwdiv@quotient
  8085  1FC5  01BC               	clrf	___lwdiv@quotient+1
  8086  1FC6  0835               	movf	___lwdiv@divisor,w
  8087  1FC7  0436               	iorwf	___lwdiv@divisor+1,w
  8088  1FC8  1903               	btfsc	3,2
  8089  1FC9  2FFB               	goto	l3809
  8090  1FCA  01BA               	clrf	___lwdiv@counter
  8091  1FCB  0ABA               	incf	___lwdiv@counter,f
  8092  1FCC                     l3797:	
  8093  1FCC  1BB6               	btfsc	___lwdiv@divisor+1,7
  8094  1FCD  2FDA               	goto	l3799
  8095  1FCE  3001               	movlw	1
  8096  1FCF                     u4545:	
  8097  1FCF  1003               	clrc
  8098  1FD0  0DB5               	rlf	___lwdiv@divisor,f
  8099  1FD1  0DB6               	rlf	___lwdiv@divisor+1,f
  8100  1FD2  3EFF               	addlw	-1
  8101  1FD3  1D03               	skipz
  8102  1FD4  2FCF               	goto	u4545
  8103  1FD5  3001               	movlw	1
  8104  1FD6  00B9               	movwf	??___lwdiv
  8105  1FD7  0839               	movf	??___lwdiv,w
  8106  1FD8  07BA               	addwf	___lwdiv@counter,f
  8107  1FD9  2FCC               	goto	l3797
  8108  1FDA                     l3799:	
  8109  1FDA  3001               	movlw	1
  8110  1FDB                     u4565:	
  8111  1FDB  1003               	clrc
  8112  1FDC  0DBB               	rlf	___lwdiv@quotient,f
  8113  1FDD  0DBC               	rlf	___lwdiv@quotient+1,f
  8114  1FDE  3EFF               	addlw	-1
  8115  1FDF  1D03               	skipz
  8116  1FE0  2FDB               	goto	u4565
  8117  1FE1  0836               	movf	___lwdiv@divisor+1,w
  8118  1FE2  0238               	subwf	___lwdiv@dividend+1,w
  8119  1FE3  1D03               	skipz
  8120  1FE4  2FE7               	goto	u4575
  8121  1FE5  0835               	movf	___lwdiv@divisor,w
  8122  1FE6  0237               	subwf	___lwdiv@dividend,w
  8123  1FE7                     u4575:	
  8124  1FE7  1C03               	skipc
  8125  1FE8  2FF0               	goto	l3805
  8126  1FE9  0835               	movf	___lwdiv@divisor,w
  8127  1FEA  02B7               	subwf	___lwdiv@dividend,f
  8128  1FEB  0836               	movf	___lwdiv@divisor+1,w
  8129  1FEC  1C03               	skipc
  8130  1FED  03B8               	decf	___lwdiv@dividend+1,f
  8131  1FEE  02B8               	subwf	___lwdiv@dividend+1,f
  8132  1FEF  143B               	bsf	___lwdiv@quotient,0
  8133  1FF0                     l3805:	
  8134  1FF0  3001               	movlw	1
  8135  1FF1                     u4585:	
  8136  1FF1  1003               	clrc
  8137  1FF2  0CB6               	rrf	___lwdiv@divisor+1,f
  8138  1FF3  0CB5               	rrf	___lwdiv@divisor,f
  8139  1FF4  3EFF               	addlw	-1
  8140  1FF5  1D03               	skipz
  8141  1FF6  2FF1               	goto	u4585
  8142  1FF7  3001               	movlw	1
  8143  1FF8  02BA               	subwf	___lwdiv@counter,f
  8144  1FF9  1D03               	btfss	3,2
  8145  1FFA  2FDA               	goto	l3799
  8146  1FFB                     l3809:	
  8147  1FFB  083C               	movf	___lwdiv@quotient+1,w
  8148  1FFC  00B6               	movwf	?___lwdiv+1
  8149  1FFD  083B               	movf	___lwdiv@quotient,w
  8150  1FFE  00B5               	movwf	?___lwdiv
  8151  1FFF  0008               	return
  8152  2000                     __end_of___lwdiv:	
  8153                           
  8154                           	psect	text29
  8155  1CA1                     __ptext29:	
  8156 ;; *************** function _sampling *****************
  8157 ;; Defined at:
  8158 ;;		line 384 in file "main.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;		None
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  2   21[BANK0 ] unsigned int 
  8165 ;; Registers used:
  8166 ;;		wreg
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8172 ;;      Params:         0       2       0       0       0
  8173 ;;      Locals:         0       0       0       0       0
  8174 ;;      Temps:          0       1       0       0       0
  8175 ;;      Totals:         0       3       0       0       0
  8176 ;;Total ram usage:        3 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    4
  8179 ;; This function calls:
  8180 ;;		Nothing
  8181 ;; This function is called by:
  8182 ;;		_acquire
  8183 ;;		_adReadA0
  8184 ;;		_sys
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _sampling
  8190  1CA1                     _sampling:	
  8191                           
  8192                           ;main.c: 385: _delay((unsigned long)((100)*(20000000/4000000.0)));
  8193                           
  8194                           ;incstack = 0
  8195                           ; Regs used in _sampling: [wreg]
  8196  1CA1  30A5               	movlw	165
  8197  1CA2  1283               	bcf	3,5	;RP0=0, select bank0
  8198  1CA3  1303               	bcf	3,6	;RP1=0, select bank0
  8199  1CA4  00B7               	movwf	??_sampling
  8200  1CA5                     u5807:	
  8201  1CA5  0BB7               	decfsz	??_sampling,f
  8202  1CA6  2CA5               	goto	u5807
  8203  1CA7  2CA8               	nop2
  8204                           
  8205                           ;main.c: 386: ADCON0bits.GO_nDONE = 1;
  8206  1CA8  1283               	bcf	3,5	;RP0=0, select bank0
  8207  1CA9  1303               	bcf	3,6	;RP1=0, select bank0
  8208  1CAA  151F               	bsf	31,2	;volatile
  8209  1CAB                     l342:	
  8210                           ;main.c: 387: while(ADCON0bits.GO_nDONE){}
  8211                           
  8212  1CAB  191F               	btfsc	31,2	;volatile
  8213  1CAC  2CAB               	goto	l342
  8214                           
  8215                           ;main.c: 388: return (int)(ADRESH << 8) + (ADRESL);
  8216  1CAD  081E               	movf	30,w	;volatile
  8217  1CAE  00B6               	movwf	?_sampling+1
  8218  1CAF  1683               	bsf	3,5	;RP0=1, select bank1
  8219  1CB0  1303               	bcf	3,6	;RP1=0, select bank1
  8220  1CB1  081E               	movf	30,w	;volatile
  8221  1CB2  1283               	bcf	3,5	;RP0=0, select bank0
  8222  1CB3  1303               	bcf	3,6	;RP1=0, select bank0
  8223  1CB4  00B5               	movwf	?_sampling
  8224  1CB5  0008               	return
  8225  1CB6                     __end_of_sampling:	
  8226                           
  8227                           	psect	text30
  8228  1D64                     __ptext30:	
  8229 ;; *************** function _USARTDataAvailable *****************
  8230 ;; Defined at:
  8231 ;;		line 151 in file "usart_pic16.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;		None
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;		None
  8236 ;; Return value:  Size  Location     Type
  8237 ;;                  1    wreg      unsigned char 
  8238 ;; Registers used:
  8239 ;;		wreg, status,2, status,0
  8240 ;; Tracked objects:
  8241 ;;		On entry : 0/0
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8245 ;;      Params:         0       0       0       0       0
  8246 ;;      Locals:         0       0       0       0       0
  8247 ;;      Temps:          0       1       0       0       0
  8248 ;;      Totals:         0       1       0       0       0
  8249 ;;Total ram usage:        1 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    4
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_getData
  8256 ;;		_acquire
  8257 ;;		_sys
  8258 ;;		_USARTFlushBuffer
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _USARTDataAvailable
  8264  1D64                     _USARTDataAvailable:	
  8265                           
  8266                           ;usart_pic16.c: 153: if(UQFront==-1) return 0;
  8267                           
  8268                           ;incstack = 0
  8269                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
  8270  1D64  1283               	bcf	3,5	;RP0=0, select bank0
  8271  1D65  1303               	bcf	3,6	;RP1=0, select bank0
  8272  1D66  0A5A               	incf	_UQFront,w	;volatile
  8273  1D67  1D03               	btfss	3,2
  8274  1D68  2D6B               	goto	l3849
  8275  1D69  3000               	movlw	0
  8276  1D6A  0008               	return
  8277  1D6B                     l3849:	
  8278                           
  8279                           ;usart_pic16.c: 154: if(UQFront<UQEnd)
  8280  1D6B  085A               	movf	_UQFront,w	;volatile
  8281  1D6C  3A80               	xorlw	128
  8282  1D6D  00B5               	movwf	??_USARTDataAvailable
  8283  1D6E  0859               	movf	_UQEnd,w	;volatile
  8284  1D6F  3A80               	xorlw	128
  8285  1D70  02B5               	subwf	??_USARTDataAvailable,f
  8286  1D71  1803               	skipnc
  8287  1D72  2D78               	goto	l3857
  8288                           
  8289                           ;usart_pic16.c: 155: return(UQEnd-UQFront+1);
  8290  1D73  035A               	decf	_UQFront,w	;volatile
  8291  1D74  3AFF               	xorlw	255
  8292  1D75  0759               	addwf	_UQEnd,w	;volatile
  8293  1D76  3E01               	addlw	1
  8294  1D77  0008               	return
  8295  1D78                     l3857:	
  8296                           
  8297                           ;usart_pic16.c: 156: else if(UQFront>UQEnd)
  8298  1D78  0859               	movf	_UQEnd,w	;volatile
  8299  1D79  3A80               	xorlw	128
  8300  1D7A  00B5               	movwf	??_USARTDataAvailable
  8301  1D7B  085A               	movf	_UQFront,w	;volatile
  8302  1D7C  3A80               	xorlw	128
  8303  1D7D  02B5               	subwf	??_USARTDataAvailable,f
  8304  1D7E  1803               	skipnc
  8305  1D7F  2D85               	goto	l3865
  8306                           
  8307                           ;usart_pic16.c: 157: return (64-UQFront+UQEnd+1);
  8308  1D80  035A               	decf	_UQFront,w	;volatile
  8309  1D81  3AFF               	xorlw	255
  8310  1D82  0759               	addwf	_UQEnd,w	;volatile
  8311  1D83  3E41               	addlw	65
  8312  1D84  0008               	return
  8313  1D85                     l3865:	
  8314                           
  8315                           ;usart_pic16.c: 158: else
  8316                           ;usart_pic16.c: 159: return 1;
  8317  1D85  3001               	movlw	1
  8318  1D86  0008               	return
  8319  1D87                     __end_of_USARTDataAvailable:	
  8320                           
  8321                           	psect	text31
  8322  1061                     __ptext31:	
  8323 ;; *************** function _memcmp *****************
  8324 ;; Defined at:
  8325 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  s1              1    wreg     PTR const void 
  8328 ;;		 -> content(25), 
  8329 ;;  s2              2   21[BANK0 ] PTR const void 
  8330 ;;		 -> STR_49(7), STR_48(10), STR_47(9), STR_46(7), 
  8331 ;;		 -> STR_43(5), STR_40(5), STR_36(6), 
  8332 ;;  n               2   23[BANK0 ] unsigned int 
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;  s1              1   27[BANK0 ] PTR const void 
  8335 ;;		 -> content(25), 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  2   21[BANK0 ] int 
  8338 ;; Registers used:
  8339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8345 ;;      Params:         0       4       0       0       0
  8346 ;;      Locals:         0       1       0       0       0
  8347 ;;      Temps:          0       2       0       0       0
  8348 ;;      Totals:         0       7       0       0       0
  8349 ;;Total ram usage:        7 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    4
  8352 ;; This function calls:
  8353 ;;		Nothing
  8354 ;; This function is called by:
  8355 ;;		_choice
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function _memcmp
  8361  1061                     _memcmp:	
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _memcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  8365                           ;memcmp@s1 stored from wreg
  8366  1061  1283               	bcf	3,5	;RP0=0, select bank0
  8367  1062  1303               	bcf	3,6	;RP1=0, select bank0
  8368  1063  00BB               	movwf	memcmp@s1
  8369  1064                     l856:	
  8370  1064  3001               	movlw	1
  8371  1065  02B7               	subwf	memcmp@n,f
  8372  1066  3000               	movlw	0
  8373  1067  1C03               	skipc
  8374  1068  03B8               	decf	memcmp@n+1,f
  8375  1069  02B8               	subwf	memcmp@n+1,f
  8376  106A  0A37               	incf	memcmp@n,w
  8377  106B  1903               	btfsc	3,2
  8378  106C  0A38               	incf	memcmp@n+1,w
  8379  106D  1903               	btfsc	3,2
  8380  106E  28A2               	goto	l4219
  8381  106F  0836               	movf	memcmp@s2+1,w
  8382  1070  00FF               	movwf	127
  8383  1071  0835               	movf	memcmp@s2,w
  8384  1072  0084               	movwf	4
  8385  1073  120A  118A  2100  160A  118A  	fcall	stringtab
  8386  1078  00B9               	movwf	??_memcmp
  8387  1079  083B               	movf	memcmp@s1,w
  8388  107A  0084               	movwf	4
  8389  107B  1383               	bcf	3,7	;select IRP bank0
  8390  107C  0800               	movf	0,w
  8391  107D  0639               	xorwf	??_memcmp,w
  8392  107E  1903               	skipnz
  8393  107F  2899               	goto	l4215
  8394  1080  0836               	movf	memcmp@s2+1,w
  8395  1081  00FF               	movwf	127
  8396  1082  0835               	movf	memcmp@s2,w
  8397  1083  0084               	movwf	4
  8398  1084  120A  118A  2100   	fcall	stringtab
  8399  1087  00B9               	movwf	??_memcmp
  8400  1088  01BA               	clrf	??_memcmp+1
  8401  1089  09B9               	comf	??_memcmp,f
  8402  108A  09BA               	comf	??_memcmp+1,f
  8403  108B  0AB9               	incf	??_memcmp,f
  8404  108C  1903               	skipnz
  8405  108D  0ABA               	incf	??_memcmp+1,f
  8406  108E  083B               	movf	memcmp@s1,w
  8407  108F  0084               	movwf	4
  8408  1090  1383               	bcf	3,7	;select IRP bank0
  8409  1091  0800               	movf	0,w
  8410  1092  0739               	addwf	??_memcmp,w
  8411  1093  00B5               	movwf	?_memcmp
  8412  1094  083A               	movf	??_memcmp+1,w
  8413  1095  1803               	skipnc
  8414  1096  0A3A               	incf	??_memcmp+1,w
  8415  1097  00B6               	movwf	?_memcmp+1
  8416  1098  0008               	return
  8417  1099                     l4215:	
  8418  1099  3001               	movlw	1
  8419  109A  00B9               	movwf	??_memcmp
  8420  109B  0839               	movf	??_memcmp,w
  8421  109C  07BB               	addwf	memcmp@s1,f
  8422  109D  3001               	movlw	1
  8423  109E  07B5               	addwf	memcmp@s2,f
  8424  109F  1803               	skipnc
  8425  10A0  0AB6               	incf	memcmp@s2+1,f
  8426  10A1  2864               	goto	l856
  8427  10A2                     l4219:	
  8428  10A2  01B5               	clrf	?_memcmp
  8429  10A3  01B6               	clrf	?_memcmp+1
  8430  10A4  0008               	return
  8431  10A5                     __end_of_memcmp:	
  8432                           
  8433                           	psect	text32
  8434  0A32                     __ptext32:	
  8435 ;; *************** function _help *****************
  8436 ;; Defined at:
  8437 ;;		line 151 in file "main.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;		None
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;		None
  8442 ;; Return value:  Size  Location     Type
  8443 ;;                  1    wreg      void 
  8444 ;; Registers used:
  8445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8446 ;; Tracked objects:
  8447 ;;		On entry : 0/0
  8448 ;;		On exit  : 0/0
  8449 ;;		Unchanged: 0/0
  8450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8451 ;;      Params:         0       0       0       0       0
  8452 ;;      Locals:         0       0       0       0       0
  8453 ;;      Temps:          0       0       0       0       0
  8454 ;;      Totals:         0       0       0       0       0
  8455 ;;Total ram usage:        0 bytes
  8456 ;; Hardware stack levels used:    1
  8457 ;; Hardware stack levels required when called:    7
  8458 ;; This function calls:
  8459 ;;		_USARTGotoNewLine
  8460 ;;		_USARTWriteLine
  8461 ;; This function is called by:
  8462 ;;		_main
  8463 ;;		_choice
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           
  8468                           ;psect for function _help
  8469  0A32                     _help:	
  8470                           
  8471                           ;main.c: 153: USARTWriteLine("**********************************************************
      +                          **********************************");
  8472                           
  8473                           ;incstack = 0
  8474                           ; Regs used in _help: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8475  0A32  301D               	movlw	low ((STR_35+1)| (0+32768))
  8476  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  8477  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  8478  0A35  00B8               	movwf	USARTWriteLine@str
  8479  0A36  3081               	movlw	high ((STR_35+1)| (0+32768))
  8480  0A37  00B9               	movwf	USARTWriteLine@str+1
  8481  0A38  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8482                           
  8483                           ;main.c: 154: USARTWriteLine("        Welcome to the Inverted Pendulum Plant!");
  8484  0A3D  30CD               	movlw	low (STR_3| (0+32768))
  8485  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  8486  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  8487  0A40  00B8               	movwf	USARTWriteLine@str
  8488  0A41  3083               	movlw	high (STR_3| (0+32768))
  8489  0A42  00B9               	movwf	USARTWriteLine@str+1
  8490  0A43  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8491                           
  8492                           ;main.c: 155: USARTWriteLine("        To operate the system, type on options in below.")
      +                          ;
  8493  0A48  305C               	movlw	low (STR_4| (0+32768))
  8494  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  8495  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  8496  0A4B  00B8               	movwf	USARTWriteLine@str
  8497  0A4C  3083               	movlw	high (STR_4| (0+32768))
  8498  0A4D  00B9               	movwf	USARTWriteLine@str+1
  8499  0A4E  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8500                           
  8501                           ;main.c: 156: USARTGotoNewLine();
  8502  0A53  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8503                           
  8504                           ;main.c: 157: USARTWriteLine("        Example 0:");
  8505  0A58  3027               	movlw	low (STR_5| (0+32768))
  8506  0A59  1283               	bcf	3,5	;RP0=0, select bank0
  8507  0A5A  1303               	bcf	3,6	;RP1=0, select bank0
  8508  0A5B  00B8               	movwf	USARTWriteLine@str
  8509  0A5C  3085               	movlw	high (STR_5| (0+32768))
  8510  0A5D  00B9               	movwf	USARTWriteLine@str+1
  8511  0A5E  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8512                           
  8513                           ;main.c: 158: USARTWriteLine("        If you want give a step with 100% of duty-cycle, u
      +                          ntil you type anything, type:");
  8514  0A63  307A               	movlw	low (STR_6| (0+32768))
  8515  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  8516  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  8517  0A66  00B8               	movwf	USARTWriteLine@str
  8518  0A67  3081               	movlw	high (STR_6| (0+32768))
  8519  0A68  00B9               	movwf	USARTWriteLine@str+1
  8520  0A69  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8521                           
  8522                           ;main.c: 159: USARTWriteLine("        step()");
  8523  0A6E  30F7               	movlw	low (STR_7| (0+32768))
  8524  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  8525  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  8526  0A71  00B8               	movwf	USARTWriteLine@str
  8527  0A72  3085               	movlw	high (STR_7| (0+32768))
  8528  0A73  00B9               	movwf	USARTWriteLine@str+1
  8529  0A74  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8530                           
  8531                           ;main.c: 160: USARTGotoNewLine();
  8532  0A79  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8533                           
  8534                           ;main.c: 161: USARTWriteLine("        Example 1:");
  8535  0A7E  303A               	movlw	low (STR_8| (0+32768))
  8536  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  8537  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  8538  0A81  00B8               	movwf	USARTWriteLine@str
  8539  0A82  3085               	movlw	high (STR_8| (0+32768))
  8540  0A83  00B9               	movwf	USARTWriteLine@str+1
  8541  0A84  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8542                           
  8543                           ;main.c: 162: USARTWriteLine("        If you want give a step with 100% of duty-cycle, f
      +                          or 200 milliseconds, type:");
  8544  0A89  30D2               	movlw	low (STR_9| (0+32768))
  8545  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  8546  0A8B  1303               	bcf	3,6	;RP1=0, select bank0
  8547  0A8C  00B8               	movwf	USARTWriteLine@str
  8548  0A8D  3081               	movlw	high (STR_9| (0+32768))
  8549  0A8E  00B9               	movwf	USARTWriteLine@str+1
  8550  0A8F  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8551                           
  8552                           ;main.c: 163: USARTWriteLine("        step(200)");
  8553  0A94  30E5               	movlw	low (STR_10| (0+32768))
  8554  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  8555  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  8556  0A97  00B8               	movwf	USARTWriteLine@str
  8557  0A98  3085               	movlw	high (STR_10| (0+32768))
  8558  0A99  00B9               	movwf	USARTWriteLine@str+1
  8559  0A9A  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8560                           
  8561                           ;main.c: 164: USARTGotoNewLine();
  8562  0A9F  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8563                           
  8564                           ;main.c: 165: USARTWriteLine("        Example 2:");
  8565  0AA4  304D               	movlw	low (STR_11| (0+32768))
  8566  0AA5  1283               	bcf	3,5	;RP0=0, select bank0
  8567  0AA6  1303               	bcf	3,6	;RP1=0, select bank0
  8568  0AA7  00B8               	movwf	USARTWriteLine@str
  8569  0AA8  3085               	movlw	high (STR_11| (0+32768))
  8570  0AA9  00B9               	movwf	USARTWriteLine@str+1
  8571  0AAA  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8572                           
  8573                           ;main.c: 166: USARTWriteLine("        If you want give a step with 50% of duty-cycle,for
      +                           300 milliseconds, type:");
  8574  0AAF  3027               	movlw	low (STR_12| (0+32768))
  8575  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  8576  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  8577  0AB2  00B8               	movwf	USARTWriteLine@str
  8578  0AB3  3082               	movlw	high (STR_12| (0+32768))
  8579  0AB4  00B9               	movwf	USARTWriteLine@str+1
  8580  0AB5  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8581                           
  8582                           ;main.c: 167: USARTWriteLine("        step(50,300)");
  8583  0ABA  30B3               	movlw	low (STR_13| (0+32768))
  8584  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  8585  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  8586  0ABD  00B8               	movwf	USARTWriteLine@str
  8587  0ABE  3084               	movlw	high (STR_13| (0+32768))
  8588  0ABF  00B9               	movwf	USARTWriteLine@str+1
  8589  0AC0  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8590                           
  8591                           ;main.c: 168: USARTGotoNewLine();
  8592  0AC5  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8593                           
  8594                           ;main.c: 169: USARTWriteLine("        Example 3:");
  8595  0ACA  3060               	movlw	low (STR_14| (0+32768))
  8596  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  8597  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  8598  0ACD  00B8               	movwf	USARTWriteLine@str
  8599  0ACE  3085               	movlw	high (STR_14| (0+32768))
  8600  0ACF  00B9               	movwf	USARTWriteLine@str+1
  8601  0AD0  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8602                           
  8603                           ;main.c: 170: USARTWriteLine("        If you want operate the system continually with 10
      +                          0% of duty-cycle, type:");
  8604  0AD5  307A               	movlw	low (STR_15| (0+32768))
  8605  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  8606  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  8607  0AD8  00B8               	movwf	USARTWriteLine@str
  8608  0AD9  3082               	movlw	high (STR_15| (0+32768))
  8609  0ADA  00B9               	movwf	USARTWriteLine@str+1
  8610  0ADB  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8611                           
  8612                           ;main.c: 171: USARTWriteLine("        run()     ");
  8613  0AE0  30C8               	movlw	low (STR_16| (0+32768))
  8614  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  8615  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  8616  0AE3  00B8               	movwf	USARTWriteLine@str
  8617  0AE4  3084               	movlw	high (STR_16| (0+32768))
  8618  0AE5  00B9               	movwf	USARTWriteLine@str+1
  8619  0AE6  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8620                           
  8621                           ;main.c: 172: USARTGotoNewLine();
  8622  0AEB  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8623                           
  8624                           ;main.c: 173: USARTWriteLine("        Example 4:");
  8625  0AF0  3073               	movlw	low (STR_17| (0+32768))
  8626  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  8627  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  8628  0AF3  00B8               	movwf	USARTWriteLine@str
  8629  0AF4  3085               	movlw	high (STR_17| (0+32768))
  8630  0AF5  00B9               	movwf	USARTWriteLine@str+1
  8631  0AF6  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8632                           
  8633                           ;main.c: 174: USARTWriteLine("        If you want to identify the system parsing a RBS s
      +                          inal, type:");
  8634  0AFB  3016               	movlw	low (STR_18| (0+32768))
  8635  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  8636  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  8637  0AFE  00B8               	movwf	USARTWriteLine@str
  8638  0AFF  3083               	movlw	high (STR_18| (0+32768))
  8639  0B00  00B9               	movwf	USARTWriteLine@str+1
  8640  0B01  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8641                           
  8642                           ;main.c: 175: USARTWriteLine("        sys(max_duty_cicle)");
  8643  0B06  3066               	movlw	low (STR_19| (0+32768))
  8644  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  8645  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  8646  0B09  00B8               	movwf	USARTWriteLine@str
  8647  0B0A  3084               	movlw	high (STR_19| (0+32768))
  8648  0B0B  00B9               	movwf	USARTWriteLine@str+1
  8649  0B0C  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8650                           
  8651                           ;main.c: 176: USARTGotoNewLine();
  8652  0B11  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8653                           
  8654                           ;main.c: 177: USARTWriteLine("        Example 5:");
  8655  0B16  3086               	movlw	low (STR_20| (0+32768))
  8656  0B17  1283               	bcf	3,5	;RP0=0, select bank0
  8657  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  8658  0B19  00B8               	movwf	USARTWriteLine@str
  8659  0B1A  3085               	movlw	high (STR_20| (0+32768))
  8660  0B1B  00B9               	movwf	USARTWriteLine@str+1
  8661  0B1C  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8662                           
  8663                           ;main.c: 178: USARTWriteLine("        If you want a help, type:");
  8664  0B21  3028               	movlw	low (STR_21| (0+32768))
  8665  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  8666  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  8667  0B24  00B8               	movwf	USARTWriteLine@str
  8668  0B25  3084               	movlw	high (STR_21| (0+32768))
  8669  0B26  00B9               	movwf	USARTWriteLine@str+1
  8670  0B27  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8671                           
  8672                           ;main.c: 179: USARTWriteLine("        help()    ");
  8673  0B2C  30DB               	movlw	low (STR_22| (0+32768))
  8674  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  8675  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  8676  0B2F  00B8               	movwf	USARTWriteLine@str
  8677  0B30  3084               	movlw	high (STR_22| (0+32768))
  8678  0B31  00B9               	movwf	USARTWriteLine@str+1
  8679  0B32  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8680                           
  8681                           ;main.c: 180: USARTGotoNewLine();
  8682  0B37  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8683                           
  8684                           ;main.c: 181: USARTWriteLine("        Example 6:");
  8685  0B3C  3099               	movlw	low (STR_23| (0+32768))
  8686  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
  8687  0B3E  1303               	bcf	3,6	;RP1=0, select bank0
  8688  0B3F  00B8               	movwf	USARTWriteLine@str
  8689  0B40  3085               	movlw	high (STR_23| (0+32768))
  8690  0B41  00B9               	movwf	USARTWriteLine@str+1
  8691  0B42  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8692                           
  8693                           ;main.c: 182: USARTWriteLine("        If you want stop the system, type:");
  8694  0B47  30FD               	movlw	low (STR_24| (0+32768))
  8695  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  8696  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  8697  0B4A  00B8               	movwf	USARTWriteLine@str
  8698  0B4B  3083               	movlw	high (STR_24| (0+32768))
  8699  0B4C  00B9               	movwf	USARTWriteLine@str+1
  8700  0B4D  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8701                           
  8702                           ;main.c: 183: USARTWriteLine("        stop()    ");
  8703  0B52  30EE               	movlw	low (STR_25| (0+32768))
  8704  0B53  1283               	bcf	3,5	;RP0=0, select bank0
  8705  0B54  1303               	bcf	3,6	;RP1=0, select bank0
  8706  0B55  00B8               	movwf	USARTWriteLine@str
  8707  0B56  3084               	movlw	high (STR_25| (0+32768))
  8708  0B57  00B9               	movwf	USARTWriteLine@str+1
  8709  0B58  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8710                           
  8711                           ;main.c: 184: USARTGotoNewLine();
  8712  0B5D  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8713                           
  8714                           ;main.c: 185: USARTWriteLine("        Example 7:");
  8715  0B62  30AC               	movlw	low (STR_26| (0+32768))
  8716  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  8717  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  8718  0B65  00B8               	movwf	USARTWriteLine@str
  8719  0B66  3085               	movlw	high (STR_26| (0+32768))
  8720  0B67  00B9               	movwf	USARTWriteLine@str+1
  8721  0B68  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8722                           
  8723                           ;main.c: 186: USARTWriteLine("        If you want acquire the data obtained by sensors o
      +                          f system, type:");
  8724  0B6D  30CC               	movlw	low (STR_27| (0+32768))
  8725  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  8726  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  8727  0B70  00B8               	movwf	USARTWriteLine@str
  8728  0B71  3082               	movlw	high (STR_27| (0+32768))
  8729  0B72  00B9               	movwf	USARTWriteLine@str+1
  8730  0B73  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8731                           
  8732                           ;main.c: 187: USARTWriteLine("        acquire() ");
  8733  0B78  3014               	movlw	low (STR_28| (0+32768))
  8734  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  8735  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  8736  0B7B  00B8               	movwf	USARTWriteLine@str
  8737  0B7C  3085               	movlw	high (STR_28| (0+32768))
  8738  0B7D  00B9               	movwf	USARTWriteLine@str+1
  8739  0B7E  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8740                           
  8741                           ;main.c: 188: USARTWriteLine("        Example 8:");
  8742  0B83  30BF               	movlw	low (STR_29| (0+32768))
  8743  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  8744  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  8745  0B86  00B8               	movwf	USARTWriteLine@str
  8746  0B87  3085               	movlw	high (STR_29| (0+32768))
  8747  0B88  00B9               	movwf	USARTWriteLine@str+1
  8748  0B89  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8749                           
  8750                           ;main.c: 189: USARTWriteLine("        If you want to know the status of system, type:");
  8751  0B8E  3095               	movlw	low (STR_30| (0+32768))
  8752  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  8753  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  8754  0B91  00B8               	movwf	USARTWriteLine@str
  8755  0B92  3083               	movlw	high (STR_30| (0+32768))
  8756  0B93  00B9               	movwf	USARTWriteLine@str+1
  8757  0B94  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8758                           
  8759                           ;main.c: 190: USARTWriteLine("        status()  ");
  8760  0B99  3001               	movlw	low (STR_31| (0+32768))
  8761  0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  8762  0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  8763  0B9C  00B8               	movwf	USARTWriteLine@str
  8764  0B9D  3085               	movlw	high (STR_31| (0+32768))
  8765  0B9E  00B9               	movwf	USARTWriteLine@str+1
  8766  0B9F  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8767                           
  8768                           ;main.c: 191: USARTGotoNewLine();
  8769  0BA4  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8770                           
  8771                           ;main.c: 192: USARTWriteLine("        Example 9:");
  8772  0BA9  30D2               	movlw	low (STR_32| (0+32768))
  8773  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  8774  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  8775  0BAC  00B8               	movwf	USARTWriteLine@str
  8776  0BAD  3085               	movlw	high (STR_32| (0+32768))
  8777  0BAE  00B9               	movwf	USARTWriteLine@str+1
  8778  0BAF  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8779                           
  8780                           ;main.c: 193: USARTWriteLine("        If you want a help, type:");
  8781  0BB4  3028               	movlw	low (STR_21| (0+32768))
  8782  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  8783  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  8784  0BB7  00B8               	movwf	USARTWriteLine@str
  8785  0BB8  3084               	movlw	high (STR_21| (0+32768))
  8786  0BB9  00B9               	movwf	USARTWriteLine@str+1
  8787  0BBA  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8788                           
  8789                           ;main.c: 194: USARTWriteLine("        help()    ");
  8790  0BBF  30DB               	movlw	low (STR_22| (0+32768))
  8791  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  8792  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  8793  0BC2  00B8               	movwf	USARTWriteLine@str
  8794  0BC3  3084               	movlw	high (STR_22| (0+32768))
  8795  0BC4  00B9               	movwf	USARTWriteLine@str+1
  8796  0BC5  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8797                           
  8798                           ;main.c: 195: USARTWriteLine("**********************************************************
      +                          ***********************************");
  8799  0BCA  301C               	movlw	low (STR_35| (0+32768))
  8800  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  8801  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  8802  0BCD  00B8               	movwf	USARTWriteLine@str
  8803  0BCE  3081               	movlw	high (STR_35| (0+32768))
  8804  0BCF  00B9               	movwf	USARTWriteLine@str+1
  8805  0BD0  160A  118A  200A  120A  158A  	fcall	_USARTWriteLine
  8806                           
  8807                           ;main.c: 196: USARTGotoNewLine();
  8808  0BD5  120A  158A  2001  120A  158A  	fcall	_USARTGotoNewLine
  8809                           
  8810                           ;main.c: 197: USARTGotoNewLine();
  8811  0BDA  120A  158A  2001   	fcall	_USARTGotoNewLine
  8812  0BDD  0008               	return
  8813  0BDE                     __end_of_help:	
  8814                           
  8815                           	psect	text33
  8816  100A                     __ptext33:	
  8817 ;; *************** function _USARTWriteLine *****************
  8818 ;; Defined at:
  8819 ;;		line 87 in file "usart_pic16.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;  str             2   24[BANK0 ] PTR const unsigned char 
  8822 ;;		 -> STR_72(7), STR_71(35), status@output(25), STR_57(7), 
  8823 ;;		 -> STR_56(35), STR_55(7), STR_54(35), strBuffer(25), 
  8824 ;;		 -> STR_50(28), STR_35(94), STR_34(19), STR_33(34), 
  8825 ;;		 -> STR_32(19), STR_31(19), STR_30(56), STR_29(19), 
  8826 ;;		 -> STR_28(19), STR_27(74), STR_26(19), STR_25(19), 
  8827 ;;		 -> STR_24(43), STR_23(19), STR_22(19), STR_21(34), 
  8828 ;;		 -> STR_20(19), STR_19(28), STR_18(70), STR_17(19), 
  8829 ;;		 -> STR_16(19), STR_15(82), STR_14(19), STR_13(21), 
  8830 ;;		 -> STR_12(83), STR_11(19), STR_10(18), STR_9(85), 
  8831 ;;		 -> STR_8(19), STR_7(15), STR_6(88), STR_5(19), 
  8832 ;;		 -> STR_4(57), STR_3(48), STR_2(93), 
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;		None
  8835 ;; Return value:  Size  Location     Type
  8836 ;;                  1    wreg      void 
  8837 ;; Registers used:
  8838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8844 ;;      Params:         0       2       0       0       0
  8845 ;;      Locals:         0       0       0       0       0
  8846 ;;      Temps:          0       0       0       0       0
  8847 ;;      Totals:         0       2       0       0       0
  8848 ;;Total ram usage:        2 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    6
  8851 ;; This function calls:
  8852 ;;		_USARTWriteChar
  8853 ;;		_USARTWriteString
  8854 ;; This function is called by:
  8855 ;;		_help
  8856 ;;		_choice
  8857 ;;		_step
  8858 ;;		_run
  8859 ;;		_status
  8860 ;;		_sys
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           
  8865                           ;psect for function _USARTWriteLine
  8866  100A                     _USARTWriteLine:	
  8867                           
  8868                           ;usart_pic16.c: 89: USARTWriteChar('\r');
  8869                           
  8870                           ;incstack = 0
  8871                           ; Regs used in _USARTWriteLine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8872  100A  300D               	movlw	13
  8873  100B  160A  158A  2457  160A  118A  	fcall	_USARTWriteChar
  8874                           
  8875                           ;usart_pic16.c: 90: USARTWriteChar('\n');
  8876  1010  300A               	movlw	10
  8877  1011  160A  158A  2457  160A  118A  	fcall	_USARTWriteChar
  8878                           
  8879                           ;usart_pic16.c: 92: USARTWriteString(str);
  8880  1016  1283               	bcf	3,5	;RP0=0, select bank0
  8881  1017  1303               	bcf	3,6	;RP1=0, select bank0
  8882  1018  0838               	movf	USARTWriteLine@str,w
  8883  1019  00B6               	movwf	USARTWriteString@str
  8884  101A  0839               	movf	USARTWriteLine@str+1,w
  8885  101B  00B7               	movwf	USARTWriteString@str+1
  8886  101C  160A  158A  25CE   	fcall	_USARTWriteString
  8887  101F  0008               	return
  8888  1020                     __end_of_USARTWriteLine:	
  8889                           
  8890                           	psect	text34
  8891  1DCE                     __ptext34:	
  8892 ;; *************** function _USARTWriteString *****************
  8893 ;; Defined at:
  8894 ;;		line 78 in file "usart_pic16.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;  str             2   22[BANK0 ] PTR const unsigned char 
  8897 ;;		 -> STR_72(7), STR_71(35), STR_69(8), STR_67(9), 
  8898 ;;		 -> STR_65(9), STR_63(22), STR_61(22), status@output(25), 
  8899 ;;		 -> STR_57(7), STR_56(35), STR_55(7), STR_54(35), 
  8900 ;;		 -> strBuffer(25), STR_51(2), STR_50(28), STR_35(94), 
  8901 ;;		 -> STR_34(19), STR_33(34), STR_32(19), STR_31(19), 
  8902 ;;		 -> STR_30(56), STR_29(19), STR_28(19), STR_27(74), 
  8903 ;;		 -> STR_26(19), STR_25(19), STR_24(43), STR_23(19), 
  8904 ;;		 -> STR_22(19), STR_21(34), STR_20(19), STR_19(28), 
  8905 ;;		 -> STR_18(70), STR_17(19), STR_16(19), STR_15(82), 
  8906 ;;		 -> STR_14(19), STR_13(21), STR_12(83), STR_11(19), 
  8907 ;;		 -> STR_10(18), STR_9(85), STR_8(19), STR_7(15), 
  8908 ;;		 -> STR_6(88), STR_5(19), STR_4(57), STR_3(48), 
  8909 ;;		 -> STR_2(93), STR_1(2), 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;		None
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  1    wreg      void 
  8914 ;; Registers used:
  8915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8921 ;;      Params:         0       2       0       0       0
  8922 ;;      Locals:         0       0       0       0       0
  8923 ;;      Temps:          0       0       0       0       0
  8924 ;;      Totals:         0       2       0       0       0
  8925 ;;Total ram usage:        2 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    5
  8928 ;; This function calls:
  8929 ;;		_USARTWriteChar
  8930 ;; This function is called by:
  8931 ;;		_USARTWriteLine
  8932 ;;		_main
  8933 ;;		_choice
  8934 ;;		_acquire
  8935 ;;		_adReadA0
  8936 ;;		_sys
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           
  8941                           ;psect for function _USARTWriteString
  8942  1DCE                     _USARTWriteString:	
  8943  1DCE                     l3841:	
  8944                           ;usart_pic16.c: 80: while(*str!='\0')
  8945                           
  8946                           ;incstack = 0
  8947 ;; using string table level
  8948                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8949                           
  8950  1DCE  1283               	bcf	3,5	;RP0=0, select bank0
  8951  1DCF  1303               	bcf	3,6	;RP1=0, select bank0
  8952  1DD0  0837               	movf	USARTWriteString@str+1,w
  8953  1DD1  00FF               	movwf	127
  8954  1DD2  0836               	movf	USARTWriteString@str,w
  8955  1DD3  0084               	movwf	4
  8956  1DD4  120A  118A  2100  160A  158A  	fcall	stringtab
  8957  1DD9  3A00               	xorlw	0
  8958  1DDA  1903               	btfsc	3,2
  8959  1DDB  0008               	return
  8960                           
  8961                           ;usart_pic16.c: 81: {
  8962                           ;usart_pic16.c: 82: USARTWriteChar(*str);
  8963  1DDC  1283               	bcf	3,5	;RP0=0, select bank0
  8964  1DDD  1303               	bcf	3,6	;RP1=0, select bank0
  8965  1DDE  0837               	movf	USARTWriteString@str+1,w
  8966  1DDF  00FF               	movwf	127
  8967  1DE0  0836               	movf	USARTWriteString@str,w
  8968  1DE1  0084               	movwf	4
  8969  1DE2  120A  118A  2100  160A  158A  	fcall	stringtab
  8970  1DE7  160A  158A  2457  160A  158A  	fcall	_USARTWriteChar
  8971                           
  8972                           ;usart_pic16.c: 83: str++;
  8973  1DEC  3001               	movlw	1
  8974  1DED  1283               	bcf	3,5	;RP0=0, select bank0
  8975  1DEE  1303               	bcf	3,6	;RP1=0, select bank0
  8976  1DEF  07B6               	addwf	USARTWriteString@str,f
  8977  1DF0  1803               	skipnc
  8978  1DF1  0AB7               	incf	USARTWriteString@str+1,f
  8979  1DF2  2DCE               	goto	l3841
  8980  1DF3                     __end_of_USARTWriteString:	
  8981                           
  8982                           	psect	text35
  8983  0801                     __ptext35:	
  8984 ;; *************** function _USARTGotoNewLine *****************
  8985 ;; Defined at:
  8986 ;;		line 202 in file "usart_pic16.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, status,2, status,0, pclath, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9000 ;;      Params:         0       0       0       0       0
  9001 ;;      Locals:         0       0       0       0       0
  9002 ;;      Temps:          0       0       0       0       0
  9003 ;;      Totals:         0       0       0       0       0
  9004 ;;Total ram usage:        0 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    5
  9007 ;; This function calls:
  9008 ;;		_USARTWriteChar
  9009 ;; This function is called by:
  9010 ;;		_help
  9011 ;;		_choice
  9012 ;;		_status
  9013 ;;		_acquire
  9014 ;;		_sys
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           
  9019                           ;psect for function _USARTGotoNewLine
  9020  0801                     _USARTGotoNewLine:	
  9021                           
  9022                           ;usart_pic16.c: 204: USARTWriteChar('\r');
  9023                           
  9024                           ;incstack = 0
  9025                           ; Regs used in _USARTGotoNewLine: [wreg+status,2+status,0+pclath+cstack]
  9026  0801  300D               	movlw	13
  9027  0802  160A  158A  2457  120A  158A  	fcall	_USARTWriteChar
  9028                           
  9029                           ;usart_pic16.c: 205: USARTWriteChar('\n');
  9030  0807  300A               	movlw	10
  9031  0808  160A  158A  2457   	fcall	_USARTWriteChar
  9032  080B  0008               	return
  9033  080C                     __end_of_USARTGotoNewLine:	
  9034                           
  9035                           	psect	text36
  9036  1C57                     __ptext36:	
  9037 ;; *************** function _USARTWriteChar *****************
  9038 ;; Defined at:
  9039 ;;		line 71 in file "usart_pic16.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  ch              1    wreg     unsigned char 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  ch              1   21[BANK0 ] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      void 
  9046 ;; Registers used:
  9047 ;;		wreg
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9053 ;;      Params:         0       0       0       0       0
  9054 ;;      Locals:         0       1       0       0       0
  9055 ;;      Temps:          0       0       0       0       0
  9056 ;;      Totals:         0       1       0       0       0
  9057 ;;Total ram usage:        1 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    4
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_USARTWriteString
  9064 ;;		_USARTWriteLine
  9065 ;;		_USARTGotoNewLine
  9066 ;;		_getData
  9067 ;;		_USARTWriteInt
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function _USARTWriteChar
  9073  1C57                     _USARTWriteChar:	
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in _USARTWriteChar: [wreg]
  9077                           ;USARTWriteChar@ch stored from wreg
  9078  1C57  1283               	bcf	3,5	;RP0=0, select bank0
  9079  1C58  1303               	bcf	3,6	;RP1=0, select bank0
  9080  1C59  00B5               	movwf	USARTWriteChar@ch
  9081  1C5A                     l38:	
  9082                           ;usart_pic16.c: 73: while(!PIR1bits.TXIF);
  9083                           
  9084  1C5A  1E0C               	btfss	12,4	;volatile
  9085  1C5B  2C5A               	goto	l38
  9086                           
  9087                           ;usart_pic16.c: 75: TXREG=ch;
  9088  1C5C  0835               	movf	USARTWriteChar@ch,w
  9089  1C5D  0099               	movwf	25	;volatile
  9090  1C5E  0008               	return
  9091  1C5F                     __end_of_USARTWriteChar:	
  9092                           
  9093                           	psect	text37
  9094  136C                     __ptext37:	
  9095 ;; *************** function _atoi *****************
  9096 ;; Defined at:
  9097 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  9098 ;; Parameters:    Size  Location     Type
  9099 ;;  s               1    wreg     PTR const unsigned char 
  9100 ;;		 -> choice@duty_562(10), choice@duty_555(10), choice@time(10), choice@duty(10), 
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;  s               1   34[BANK0 ] PTR const unsigned char 
  9103 ;;		 -> choice@duty_562(10), choice@duty_555(10), choice@time(10), choice@duty(10), 
  9104 ;;  a               2   32[BANK0 ] int 
  9105 ;;  sign            1   31[BANK0 ] unsigned char 
  9106 ;; Return value:  Size  Location     Type
  9107 ;;                  2   27[BANK0 ] int 
  9108 ;; Registers used:
  9109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9115 ;;      Params:         0       2       0       0       0
  9116 ;;      Locals:         0       4       0       0       0
  9117 ;;      Temps:          0       2       0       0       0
  9118 ;;      Totals:         0       8       0       0       0
  9119 ;;Total ram usage:        8 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; Hardware stack levels required when called:    5
  9122 ;; This function calls:
  9123 ;;		___wmul
  9124 ;;		_isdigit
  9125 ;; This function is called by:
  9126 ;;		_choice
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           
  9131                           ;psect for function _atoi
  9132  136C                     _atoi:	
  9133                           
  9134                           ;incstack = 0
  9135                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9136                           ;atoi@s stored from wreg
  9137  136C  1283               	bcf	3,5	;RP0=0, select bank0
  9138  136D  1303               	bcf	3,6	;RP1=0, select bank0
  9139  136E  00C2               	movwf	atoi@s
  9140  136F                     l4247:	
  9141  136F  0842               	movf	atoi@s,w
  9142  1370  0084               	movwf	4
  9143  1371  3020               	movlw	32
  9144  1372  1783               	bsf	3,7	;select IRP bank2
  9145  1373  0600               	xorwf	0,w
  9146  1374  1D03               	btfss	3,2
  9147  1375  2B7B               	goto	l4249
  9148  1376                     l4245:	
  9149  1376  3001               	movlw	1
  9150  1377  00BD               	movwf	??_atoi
  9151  1378  083D               	movf	??_atoi,w
  9152  1379  07C2               	addwf	atoi@s,f
  9153  137A  2B6F               	goto	l4247
  9154  137B                     l4249:	
  9155  137B  0842               	movf	atoi@s,w
  9156  137C  0084               	movwf	4
  9157  137D  3009               	movlw	9
  9158  137E  0600               	xorwf	0,w
  9159  137F  1903               	btfsc	3,2
  9160  1380  2B76               	goto	l4245
  9161  1381  01C0               	clrf	atoi@a
  9162  1382  01C1               	clrf	atoi@a+1
  9163  1383  01BF               	clrf	atoi@sign
  9164  1384  0842               	movf	atoi@s,w
  9165  1385  0084               	movwf	4
  9166  1386  302D               	movlw	45
  9167  1387  0600               	xorwf	0,w
  9168  1388  1D03               	btfss	3,2
  9169  1389  2B8F               	goto	l4257
  9170  138A  3001               	movlw	1
  9171  138B  00BD               	movwf	??_atoi
  9172  138C  083D               	movf	??_atoi,w
  9173  138D  07BF               	addwf	atoi@sign,f
  9174  138E  2B95               	goto	l4263
  9175  138F                     l4257:	
  9176  138F  0842               	movf	atoi@s,w
  9177  1390  0084               	movwf	4
  9178  1391  302B               	movlw	43
  9179  1392  0600               	xorwf	0,w
  9180  1393  1D03               	btfss	3,2
  9181  1394  2B99               	goto	l4265
  9182  1395                     l4263:	
  9183  1395  3001               	movlw	1
  9184  1396  00BD               	movwf	??_atoi
  9185  1397  083D               	movf	??_atoi,w
  9186  1398  07C2               	addwf	atoi@s,f
  9187  1399                     l4265:	
  9188  1399  0842               	movf	atoi@s,w
  9189  139A  0084               	movwf	4
  9190  139B  0800               	movf	0,w
  9191  139C  160A  158A  2480  160A  118A  	fcall	_isdigit
  9192  13A1  1C03               	btfss	3,0
  9193  13A2  2BC7               	goto	l4267
  9194  13A3  1283               	bcf	3,5	;RP0=0, select bank0
  9195  13A4  1303               	bcf	3,6	;RP1=0, select bank0
  9196  13A5  0841               	movf	atoi@a+1,w
  9197  13A6  00B6               	movwf	___wmul@multiplier+1
  9198  13A7  0840               	movf	atoi@a,w
  9199  13A8  00B5               	movwf	___wmul@multiplier
  9200  13A9  300A               	movlw	10
  9201  13AA  00B7               	movwf	___wmul@multiplicand
  9202  13AB  3000               	movlw	0
  9203  13AC  00B8               	movwf	___wmul@multiplicand+1
  9204  13AD  160A  158A  2541  160A  118A  	fcall	___wmul
  9205  13B2  1283               	bcf	3,5	;RP0=0, select bank0
  9206  13B3  1303               	bcf	3,6	;RP1=0, select bank0
  9207  13B4  0842               	movf	atoi@s,w
  9208  13B5  0084               	movwf	4
  9209  13B6  1783               	bsf	3,7	;select IRP bank2
  9210  13B7  0800               	movf	0,w
  9211  13B8  0735               	addwf	?___wmul,w
  9212  13B9  00BD               	movwf	??_atoi
  9213  13BA  0836               	movf	?___wmul+1,w
  9214  13BB  1803               	skipnc
  9215  13BC  0A36               	incf	?___wmul+1,w
  9216  13BD  00BE               	movwf	??_atoi+1
  9217  13BE  083D               	movf	??_atoi,w
  9218  13BF  3ED0               	addlw	208
  9219  13C0  00C0               	movwf	atoi@a
  9220  13C1  083E               	movf	??_atoi+1,w
  9221  13C2  1803               	skipnc
  9222  13C3  3E01               	addlw	1
  9223  13C4  3EFF               	addlw	255
  9224  13C5  00C1               	movwf	atoi@a+1
  9225  13C6  2B95               	goto	l4263
  9226  13C7                     l4267:	
  9227  13C7  1283               	bcf	3,5	;RP0=0, select bank0
  9228  13C8  1303               	bcf	3,6	;RP1=0, select bank0
  9229  13C9  083F               	movf	atoi@sign,w
  9230  13CA  1903               	btfsc	3,2
  9231  13CB  2BD8               	goto	l4273
  9232  13CC  0940               	comf	atoi@a,w
  9233  13CD  00BD               	movwf	??_atoi
  9234  13CE  0941               	comf	atoi@a+1,w
  9235  13CF  00BE               	movwf	??_atoi+1
  9236  13D0  0ABD               	incf	??_atoi,f
  9237  13D1  1903               	skipnz
  9238  13D2  0ABE               	incf	??_atoi+1,f
  9239  13D3  083D               	movf	??_atoi,w
  9240  13D4  00BB               	movwf	?_atoi
  9241  13D5  083E               	movf	??_atoi+1,w
  9242  13D6  00BC               	movwf	?_atoi+1
  9243  13D7  0008               	return
  9244  13D8                     l4273:	
  9245  13D8  0841               	movf	atoi@a+1,w
  9246  13D9  00BC               	movwf	?_atoi+1
  9247  13DA  0840               	movf	atoi@a,w
  9248  13DB  00BB               	movwf	?_atoi
  9249  13DC  0008               	return
  9250  13DD                     __end_of_atoi:	
  9251                           
  9252                           	psect	text38
  9253  1C80                     __ptext38:	
  9254 ;; *************** function _isdigit *****************
  9255 ;; Defined at:
  9256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;  c               1    wreg     unsigned char 
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;  c               1   22[BANK0 ] unsigned char 
  9261 ;; Return value:  Size  Location     Type
  9262 ;;		None               void
  9263 ;; Registers used:
  9264 ;;		wreg, status,2, status,0
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9270 ;;      Params:         0       0       0       0       0
  9271 ;;      Locals:         0       2       0       0       0
  9272 ;;      Temps:          0       0       0       0       0
  9273 ;;      Totals:         0       2       0       0       0
  9274 ;;Total ram usage:        2 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    4
  9277 ;; This function calls:
  9278 ;;		Nothing
  9279 ;; This function is called by:
  9280 ;;		_atoi
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function _isdigit
  9286  1C80                     _isdigit:	
  9287                           
  9288                           ;incstack = 0
  9289                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9290                           ;isdigit@c stored from wreg
  9291  1C80  1283               	bcf	3,5	;RP0=0, select bank0
  9292  1C81  1303               	bcf	3,6	;RP1=0, select bank0
  9293  1C82  00B6               	movwf	isdigit@c
  9294  1C83  01B5               	clrf	_isdigit$852
  9295  1C84  303A               	movlw	58
  9296  1C85  0236               	subwf	isdigit@c,w
  9297  1C86  1803               	skipnc
  9298  1C87  2C8E               	goto	l4051
  9299  1C88  3030               	movlw	48
  9300  1C89  0236               	subwf	isdigit@c,w
  9301  1C8A  1C03               	skipc
  9302  1C8B  2C8E               	goto	l4051
  9303  1C8C  01B5               	clrf	_isdigit$852
  9304  1C8D  0AB5               	incf	_isdigit$852,f
  9305  1C8E                     l4051:	
  9306  1C8E  0C35               	rrf	_isdigit$852,w
  9307  1C8F  0008               	return
  9308  1C90                     __end_of_isdigit:	
  9309                           
  9310                           	psect	text39
  9311  1D41                     __ptext39:	
  9312 ;; *************** function ___wmul *****************
  9313 ;; Defined at:
  9314 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  multiplier      2   21[BANK0 ] unsigned int 
  9317 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;  product         2   25[BANK0 ] unsigned int 
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  2   21[BANK0 ] unsigned int 
  9322 ;; Registers used:
  9323 ;;		wreg, status,2, status,0
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9329 ;;      Params:         0       4       0       0       0
  9330 ;;      Locals:         0       2       0       0       0
  9331 ;;      Temps:          0       0       0       0       0
  9332 ;;      Totals:         0       6       0       0       0
  9333 ;;Total ram usage:        6 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    4
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		_sys
  9340 ;;		_atoi
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           
  9345                           ;psect for function ___wmul
  9346  1D41                     ___wmul:	
  9347                           
  9348                           ;incstack = 0
  9349                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9350  1D41  1283               	bcf	3,5	;RP0=0, select bank0
  9351  1D42  1303               	bcf	3,6	;RP1=0, select bank0
  9352  1D43  01B9               	clrf	___wmul@product
  9353  1D44  01BA               	clrf	___wmul@product+1
  9354  1D45                     l4031:	
  9355  1D45  1C35               	btfss	___wmul@multiplier,0
  9356  1D46  2D4D               	goto	l479
  9357  1D47  0837               	movf	___wmul@multiplicand,w
  9358  1D48  07B9               	addwf	___wmul@product,f
  9359  1D49  1803               	skipnc
  9360  1D4A  0ABA               	incf	___wmul@product+1,f
  9361  1D4B  0838               	movf	___wmul@multiplicand+1,w
  9362  1D4C  07BA               	addwf	___wmul@product+1,f
  9363  1D4D                     l479:	
  9364  1D4D  3001               	movlw	1
  9365  1D4E                     u4935:	
  9366  1D4E  1003               	clrc
  9367  1D4F  0DB7               	rlf	___wmul@multiplicand,f
  9368  1D50  0DB8               	rlf	___wmul@multiplicand+1,f
  9369  1D51  3EFF               	addlw	-1
  9370  1D52  1D03               	skipz
  9371  1D53  2D4E               	goto	u4935
  9372  1D54  3001               	movlw	1
  9373  1D55                     u4945:	
  9374  1D55  1003               	clrc
  9375  1D56  0CB6               	rrf	___wmul@multiplier+1,f
  9376  1D57  0CB5               	rrf	___wmul@multiplier,f
  9377  1D58  3EFF               	addlw	-1
  9378  1D59  1D03               	skipz
  9379  1D5A  2D55               	goto	u4945
  9380  1D5B  0835               	movf	___wmul@multiplier,w
  9381  1D5C  0436               	iorwf	___wmul@multiplier+1,w
  9382  1D5D  1D03               	btfss	3,2
  9383  1D5E  2D45               	goto	l4031
  9384  1D5F  083A               	movf	___wmul@product+1,w
  9385  1D60  00B6               	movwf	?___wmul+1
  9386  1D61  0839               	movf	___wmul@product,w
  9387  1D62  00B5               	movwf	?___wmul
  9388  1D63  0008               	return
  9389  1D64                     __end_of___wmul:	
  9390                           
  9391                           	psect	text40
  9392  1D1E                     __ptext40:	
  9393 ;; *************** function _USARTReadData *****************
  9394 ;; Defined at:
  9395 ;;		line 124 in file "usart_pic16.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;		None
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;  data            1   22[BANK0 ] unsigned char 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  1    wreg      unsigned char 
  9402 ;; Registers used:
  9403 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9409 ;;      Params:         0       0       0       0       0
  9410 ;;      Locals:         0       1       0       0       0
  9411 ;;      Temps:          0       1       0       0       0
  9412 ;;      Totals:         0       2       0       0       0
  9413 ;;Total ram usage:        2 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    4
  9416 ;; This function calls:
  9417 ;;		Nothing
  9418 ;; This function is called by:
  9419 ;;		_getData
  9420 ;;		_USARTReadBuffer
  9421 ;;		_USARTFlushBuffer
  9422 ;; This function uses a non-reentrant model
  9423 ;;
  9424                           
  9425                           
  9426                           ;psect for function _USARTReadData
  9427  1D1E                     _USARTReadData:	
  9428                           
  9429                           ;usart_pic16.c: 126: char data;
  9430                           ;usart_pic16.c: 129: if(UQFront==-1)
  9431                           
  9432                           ;incstack = 0
  9433                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
  9434  1D1E  1283               	bcf	3,5	;RP0=0, select bank0
  9435  1D1F  1303               	bcf	3,6	;RP1=0, select bank0
  9436  1D20  0A5A               	incf	_UQFront,w	;volatile
  9437  1D21  1D03               	btfss	3,2
  9438  1D22  2D25               	goto	l3071
  9439                           
  9440                           ;usart_pic16.c: 130: return 0;
  9441  1D23  3000               	movlw	0
  9442  1D24  0008               	return
  9443  1D25                     l3071:	
  9444                           
  9445                           ;usart_pic16.c: 132: data=URBuff[UQFront];
  9446  1D25  085A               	movf	_UQFront,w
  9447  1D26  3E10               	addlw	(low (_URBuff| (0+256)))& (0+255)
  9448  1D27  0084               	movwf	4
  9449  1D28  1783               	bsf	3,7	;select IRP bank2
  9450  1D29  0800               	movf	0,w
  9451  1D2A  00B5               	movwf	??_USARTReadData
  9452  1D2B  0835               	movf	??_USARTReadData,w
  9453  1D2C  00B6               	movwf	USARTReadData@data
  9454                           
  9455                           ;usart_pic16.c: 134: if(UQFront==UQEnd)
  9456  1D2D  085A               	movf	_UQFront,w	;volatile
  9457  1D2E  0659               	xorwf	_UQEnd,w	;volatile
  9458  1D2F  1D03               	skipz
  9459  1D30  2D37               	goto	l3077
  9460                           
  9461                           ;usart_pic16.c: 135: {
  9462                           ;usart_pic16.c: 138: UQFront=UQEnd=-1;
  9463  1D31  30FF               	movlw	255
  9464  1D32  00D9               	movwf	_UQEnd	;volatile
  9465  1D33  00B5               	movwf	??_USARTReadData
  9466  1D34  0835               	movf	??_USARTReadData,w
  9467  1D35  00DA               	movwf	_UQFront	;volatile
  9468                           
  9469                           ;usart_pic16.c: 139: }
  9470  1D36  2D3F               	goto	l3081
  9471  1D37                     l3077:	
  9472                           
  9473                           ;usart_pic16.c: 140: else
  9474                           ;usart_pic16.c: 141: {
  9475                           ;usart_pic16.c: 142: UQFront++;
  9476  1D37  3001               	movlw	1
  9477  1D38  00B5               	movwf	??_USARTReadData
  9478  1D39  0835               	movf	??_USARTReadData,w
  9479  1D3A  07DA               	addwf	_UQFront,f	;volatile
  9480                           
  9481                           ;usart_pic16.c: 144: if(UQFront==64)
  9482  1D3B  3040               	movlw	64
  9483  1D3C  065A               	xorwf	_UQFront,w	;volatile
  9484  1D3D  1903               	btfsc	3,2
  9485                           
  9486                           ;usart_pic16.c: 145: UQFront=0;
  9487  1D3E  01DA               	clrf	_UQFront	;volatile
  9488  1D3F                     l3081:	
  9489                           
  9490                           ;usart_pic16.c: 146: }
  9491                           ;usart_pic16.c: 148: return data;
  9492  1D3F  0836               	movf	USARTReadData@data,w
  9493  1D40  0008               	return
  9494  1D41                     __end_of_USARTReadData:	
  9495                           
  9496                           	psect	text41
  9497  1176                     __ptext41:	
  9498 ;; *************** function _USARTInit *****************
  9499 ;; Defined at:
  9500 ;;		line 31 in file "usart_pic16.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;  baud_rate       2   21[BANK0 ] unsigned int 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;		None
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      void 
  9507 ;; Registers used:
  9508 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9514 ;;      Params:         0       2       0       0       0
  9515 ;;      Locals:         0       0       0       0       0
  9516 ;;      Temps:          0       1       0       0       0
  9517 ;;      Totals:         0       3       0       0       0
  9518 ;;Total ram usage:        3 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    4
  9521 ;; This function calls:
  9522 ;;		Nothing
  9523 ;; This function is called by:
  9524 ;;		_main
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           
  9529                           ;psect for function _USARTInit
  9530  1176                     _USARTInit:	
  9531                           
  9532                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
  9533                           
  9534                           ;incstack = 0
  9535                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  9536  1176  30FF               	movlw	255
  9537  1177  1283               	bcf	3,5	;RP0=0, select bank0
  9538  1178  1303               	bcf	3,6	;RP1=0, select bank0
  9539  1179  00D9               	movwf	_UQEnd	;volatile
  9540  117A  00B7               	movwf	??_USARTInit
  9541  117B  0837               	movf	??_USARTInit,w
  9542  117C  00DA               	movwf	_UQFront	;volatile
  9543                           
  9544                           ;usart_pic16.c: 37: switch(baud_rate)
  9545  117D  2989               	goto	l3295
  9546  117E                     l3285:	
  9547                           ;usart_pic16.c: 38: {
  9548                           ;usart_pic16.c: 39: case 9600:
  9549                           
  9550                           
  9551                           ;usart_pic16.c: 40: SPBRG=129;
  9552  117E  3081               	movlw	129
  9553  117F  2985               	goto	L4
  9554  1180                     l3287:	
  9555                           ;usart_pic16.c: 42: case 19200:
  9556                           
  9557                           ;usart_pic16.c: 41: break;
  9558                           
  9559                           
  9560                           ;usart_pic16.c: 43: SPBRG=64;
  9561  1180  3040               	movlw	64
  9562  1181  2985               	goto	L4
  9563  1182                     l3289:	
  9564                           ;usart_pic16.c: 45: case 28800:
  9565                           
  9566                           ;usart_pic16.c: 44: break;
  9567                           
  9568                           
  9569                           ;usart_pic16.c: 46: SPBRG=42;
  9570  1182  302A               	movlw	42
  9571  1183  2985               	goto	L4
  9572  1184                     l3291:	
  9573                           ;usart_pic16.c: 48: case 33600:
  9574                           
  9575                           ;usart_pic16.c: 47: break;
  9576                           
  9577                           
  9578                           ;usart_pic16.c: 49: SPBRG=36;
  9579  1184  3024               	movlw	36
  9580  1185                     L4:	
  9581  1185  1683               	bsf	3,5	;RP0=1, select bank1
  9582  1186  1303               	bcf	3,6	;RP1=0, select bank1
  9583  1187  0099               	movwf	25	;volatile
  9584                           
  9585                           ;usart_pic16.c: 51: }
  9586                           
  9587                           ;usart_pic16.c: 50: break;
  9588  1188  29AC               	goto	l31
  9589  1189                     l3295:	
  9590                           
  9591                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  9592                           ; Switch size 1, requested type "space"
  9593                           ; Number of cases is 4, Range of values is 37 to 131
  9594                           ; switch strategies available:
  9595                           ; Name         Instructions Cycles
  9596                           ; simple_byte           13     7 (average)
  9597                           ; jumptable            263     9 (fixed)
  9598                           ;	Chosen strategy is simple_byte
  9599  1189  1283               	bcf	3,5	;RP0=0, select bank0
  9600  118A  0836               	movf	USARTInit@baud_rate+1,w
  9601  118B  3A25               	xorlw	37	; case 37
  9602  118C  1903               	skipnz
  9603  118D  2998               	goto	l4733
  9604  118E  3A6E               	xorlw	110	; case 75
  9605  118F  1903               	skipnz
  9606  1190  299D               	goto	l4735
  9607  1191  3A3B               	xorlw	59	; case 112
  9608  1192  1903               	skipnz
  9609  1193  29A2               	goto	l4737
  9610  1194  3AF3               	xorlw	243	; case 131
  9611  1195  1903               	skipnz
  9612  1196  29A7               	goto	l4739
  9613  1197  29AC               	goto	l31
  9614  1198                     l4733:	
  9615                           
  9616                           ; Switch size 1, requested type "space"
  9617                           ; Number of cases is 1, Range of values is 128 to 128
  9618                           ; switch strategies available:
  9619                           ; Name         Instructions Cycles
  9620                           ; simple_byte            4     3 (average)
  9621                           ; direct_byte           14    11 (fixed)
  9622                           ; jumptable            263     9 (fixed)
  9623                           ;	Chosen strategy is simple_byte
  9624  1198  0835               	movf	USARTInit@baud_rate,w
  9625  1199  3A80               	xorlw	128	; case 128
  9626  119A  1903               	skipnz
  9627  119B  297E               	goto	l3285
  9628  119C  29AC               	goto	l31
  9629  119D                     l4735:	
  9630                           
  9631                           ; Switch size 1, requested type "space"
  9632                           ; Number of cases is 1, Range of values is 0 to 0
  9633                           ; switch strategies available:
  9634                           ; Name         Instructions Cycles
  9635                           ; simple_byte            4     3 (average)
  9636                           ; direct_byte           11     8 (fixed)
  9637                           ; jumptable            260     6 (fixed)
  9638                           ;	Chosen strategy is simple_byte
  9639  119D  0835               	movf	USARTInit@baud_rate,w
  9640  119E  3A00               	xorlw	0	; case 0
  9641  119F  1903               	skipnz
  9642  11A0  2980               	goto	l3287
  9643  11A1  29AC               	goto	l31
  9644  11A2                     l4737:	
  9645                           
  9646                           ; Switch size 1, requested type "space"
  9647                           ; Number of cases is 1, Range of values is 128 to 128
  9648                           ; switch strategies available:
  9649                           ; Name         Instructions Cycles
  9650                           ; simple_byte            4     3 (average)
  9651                           ; direct_byte           14    11 (fixed)
  9652                           ; jumptable            263     9 (fixed)
  9653                           ;	Chosen strategy is simple_byte
  9654  11A2  0835               	movf	USARTInit@baud_rate,w
  9655  11A3  3A80               	xorlw	128	; case 128
  9656  11A4  1903               	skipnz
  9657  11A5  2982               	goto	l3289
  9658  11A6  29AC               	goto	l31
  9659  11A7                     l4739:	
  9660                           
  9661                           ; Switch size 1, requested type "space"
  9662                           ; Number of cases is 1, Range of values is 64 to 64
  9663                           ; switch strategies available:
  9664                           ; Name         Instructions Cycles
  9665                           ; simple_byte            4     3 (average)
  9666                           ; direct_byte           14    11 (fixed)
  9667                           ; jumptable            263     9 (fixed)
  9668                           ;	Chosen strategy is simple_byte
  9669  11A7  0835               	movf	USARTInit@baud_rate,w
  9670  11A8  3A40               	xorlw	64	; case 64
  9671  11A9  1903               	skipnz
  9672  11AA  2984               	goto	l3291
  9673  11AB  29AC               	goto	l31
  9674  11AC                     l31:	
  9675                           
  9676                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
  9677  11AC  1683               	bsf	3,5	;RP0=1, select bank1
  9678  11AD  1303               	bcf	3,6	;RP1=0, select bank1
  9679  11AE  1318               	bcf	24,6	;volatile
  9680                           
  9681                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
  9682  11AF  1698               	bsf	24,5	;volatile
  9683                           
  9684                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
  9685  11B0  1218               	bcf	24,4	;volatile
  9686                           
  9687                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
  9688  11B1  1518               	bsf	24,2	;volatile
  9689                           
  9690                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
  9691  11B2  1283               	bcf	3,5	;RP0=0, select bank0
  9692  11B3  1303               	bcf	3,6	;RP1=0, select bank0
  9693  11B4  1798               	bsf	24,7	;volatile
  9694                           
  9695                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
  9696  11B5  1318               	bcf	24,6	;volatile
  9697                           
  9698                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
  9699  11B6  1618               	bsf	24,4	;volatile
  9700                           
  9701                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
  9702  11B7  1198               	bcf	24,3	;volatile
  9703                           
  9704                           ;usart_pic16.c: 65: RCIE=1;
  9705  11B8  1683               	bsf	3,5	;RP0=1, select bank1
  9706  11B9  1303               	bcf	3,6	;RP1=0, select bank1
  9707  11BA  168C               	bsf	12,5	;volatile
  9708                           
  9709                           ;usart_pic16.c: 66: PEIE=1;
  9710  11BB  170B               	bsf	11,6	;volatile
  9711                           
  9712                           ;usart_pic16.c: 68: (GIE = 1);
  9713  11BC  178B               	bsf	11,7	;volatile
  9714  11BD  0008               	return
  9715  11BE                     __end_of_USARTInit:	
  9716                           
  9717                           	psect	text42
  9718  10E9                     __ptext42:	
  9719 ;; *************** function _ISR *****************
  9720 ;; Defined at:
  9721 ;;		line 99 in file "main.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;		None
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;		None
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      void 
  9728 ;; Registers used:
  9729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9735 ;;      Params:         0       0       0       0       0
  9736 ;;      Locals:         0       0       0       0       0
  9737 ;;      Temps:          0       5       0       0       0
  9738 ;;      Totals:         0       5       0       0       0
  9739 ;;Total ram usage:        5 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    3
  9742 ;; This function calls:
  9743 ;;		_USARTHandleRxInt
  9744 ;;		i1_acquire
  9745 ;; This function is called by:
  9746 ;;		Interrupt level 1
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function _ISR
  9752  10E9                     _ISR:	
  9753                           
  9754                           ;main.c: 101: if (RCIE && RCIF) {
  9755  10E9  1683               	bsf	3,5	;RP0=1, select bank1
  9756  10EA  1303               	bcf	3,6	;RP1=0, select bank1
  9757  10EB  1E8C               	btfss	12,5	;volatile
  9758  10EC  28F7               	goto	i1l254
  9759  10ED  1283               	bcf	3,5	;RP0=0, select bank0
  9760  10EE  1303               	bcf	3,6	;RP1=0, select bank0
  9761  10EF  1E8C               	btfss	12,5	;volatile
  9762  10F0  28F7               	goto	i1l254
  9763                           
  9764                           ;main.c: 102: USARTHandleRxInt();
  9765  10F1  160A  118A  21BE  160A  118A  	fcall	_USARTHandleRxInt
  9766                           
  9767                           ;main.c: 103: return;
  9768  10F6  2922               	goto	i1l255
  9769  10F7                     i1l254:	
  9770                           
  9771                           ;main.c: 104: }
  9772                           ;main.c: 106: if(INTCONbits.TMR0IF){
  9773  10F7  1D0B               	btfss	11,2	;volatile
  9774  10F8  291A               	goto	i1l4631
  9775                           
  9776                           ;main.c: 107: INTCONbits.TMR0IF = 0;
  9777  10F9  110B               	bcf	11,2	;volatile
  9778                           
  9779                           ;main.c: 108: count++;
  9780  10FA  3001               	movlw	1
  9781  10FB  1283               	bcf	3,5	;RP0=0, select bank0
  9782  10FC  07D1               	addwf	_count,f
  9783  10FD  1803               	skipnc
  9784  10FE  0AD2               	incf	_count+1,f
  9785  10FF  3000               	movlw	0
  9786  1100  07D2               	addwf	_count+1,f
  9787                           
  9788                           ;main.c: 109: if(count>=max_counters && stepEnable){
  9789  1101  0852               	movf	_count+1,w
  9790  1102  3A80               	xorlw	128
  9791  1103  00B0               	movwf	??_ISR
  9792  1104  0850               	movf	_max_counters+1,w
  9793  1105  3A80               	xorlw	128
  9794  1106  0230               	subwf	??_ISR,w
  9795  1107  1D03               	skipz
  9796  1108  290B               	goto	u577_25
  9797  1109  084F               	movf	_max_counters,w
  9798  110A  0251               	subwf	_count,w
  9799  110B                     u577_25:	
  9800  110B  1C03               	skipc
  9801  110C  291A               	goto	i1l4631
  9802  110D  1283               	bcf	3,5	;RP0=0, select bank0
  9803  110E  1303               	bcf	3,6	;RP1=0, select bank0
  9804  110F  0853               	movf	_stepEnable,w
  9805  1110  1903               	btfsc	3,2
  9806  1111  291A               	goto	i1l4631
  9807                           
  9808                           ;main.c: 110: CCPR1L = 0b00000000;
  9809  1112  0195               	clrf	21	;volatile
  9810                           
  9811                           ;main.c: 111: CCPR2L = 0b00000000;
  9812  1113  019B               	clrf	27	;volatile
  9813                           
  9814                           ;main.c: 112: CCP1CONbits.CCP1Y = 0b00000000;
  9815  1114  1217               	bcf	23,4	;volatile
  9816                           
  9817                           ;main.c: 113: CCP1CONbits.CCP1X = 0b00000000;
  9818  1115  1297               	bcf	23,5	;volatile
  9819                           
  9820                           ;main.c: 114: CCP2CONbits.CCP2Y = 0b00000000;
  9821  1116  121D               	bcf	29,4	;volatile
  9822                           
  9823                           ;main.c: 115: CCP2CONbits.CCP2X = 0b00000000;
  9824  1117  129D               	bcf	29,5	;volatile
  9825                           
  9826                           ;main.c: 116: acquirement = 0;
  9827  1118  01D8               	clrf	_acquirement
  9828                           
  9829                           ;main.c: 117: stepEnable = 0;
  9830  1119  01D3               	clrf	_stepEnable
  9831  111A                     i1l4631:	
  9832                           
  9833                           ;main.c: 118: }
  9834                           ;main.c: 119: }
  9835                           ;main.c: 121: if(INTCONbits.INTF){
  9836  111A  1C8B               	btfss	11,1	;volatile
  9837  111B  2922               	goto	i1l255
  9838                           
  9839                           ;main.c: 122: INTCONbits.INTF = 0;
  9840  111C  108B               	bcf	11,1	;volatile
  9841                           
  9842                           ;main.c: 123: acquire();
  9843  111D  160A  118A  2207  160A  118A  	fcall	i1_acquire
  9844  1122                     i1l255:	
  9845  1122  1283               	bcf	3,5	;RP0=0, select bank0
  9846  1123  1303               	bcf	3,6	;RP1=0, select bank0
  9847  1124  0834               	movf	??_ISR+4,w
  9848  1125  00FF               	movwf	127
  9849  1126  0833               	movf	??_ISR+3,w
  9850  1127  008A               	movwf	10
  9851  1128  0832               	movf	??_ISR+2,w
  9852  1129  0084               	movwf	4
  9853  112A  0E31               	swapf	(??_ISR+1)^0,w
  9854  112B  0083               	movwf	3
  9855  112C  0EFE               	swapf	126,f
  9856  112D  0E7E               	swapf	126,w
  9857  112E  0009               	retfie
  9858  112F                     __end_of_ISR:	
  9859                           
  9860                           	psect	intentry
  9861  0004                     __pintentry:	
  9862                           ;incstack = 0
  9863 ;; hardware stack exceeded
  9864                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9865                           
  9866  0004                     interrupt_function:	
  9867  007E                     saved_w	set	btemp
  9868  0004  00FE               	movwf	btemp
  9869  0005  0E03               	swapf	3,w
  9870  0006  1283               	bcf	3,5	;RP0=0, select bank0
  9871  0007  1303               	bcf	3,6	;RP1=0, select bank0
  9872  0008  00B1               	movwf	??_ISR+1
  9873  0009  0804               	movf	4,w
  9874  000A  00B2               	movwf	??_ISR+2
  9875  000B  080A               	movf	10,w
  9876  000C  00B3               	movwf	??_ISR+3
  9877  000D  087F               	movf	btemp+1,w
  9878  000E  00B4               	movwf	??_ISR+4
  9879  000F  160A  118A  28E9   	ljmp	_ISR
  9880                           
  9881                           	psect	text43
  9882  1207                     __ptext43:	
  9883 ;; *************** function i1_acquire *****************
  9884 ;; Defined at:
  9885 ;;		line 391 in file "main.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;		None
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;  acquire         2   14[BANK0 ] unsigned int 
  9890 ;; Return value:  Size  Location     Type
  9891 ;;                  1    wreg      void 
  9892 ;; Registers used:
  9893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9899 ;;      Params:         0       0       0       0       0
  9900 ;;      Locals:         0       2       0       0       0
  9901 ;;      Temps:          0       0       0       0       0
  9902 ;;      Totals:         0       2       0       0       0
  9903 ;;Total ram usage:        2 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    2
  9906 ;; This function calls:
  9907 ;;		i1_USARTDataAvailable
  9908 ;;		i1_USARTGotoNewLine
  9909 ;;		i1_USARTWriteString
  9910 ;;		i1_sampling
  9911 ;;		i1_sprintf
  9912 ;; This function is called by:
  9913 ;;		_ISR
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           
  9918                           ;psect for function i1_acquire
  9919  1207                     i1_acquire:	
  9920                           
  9921                           ;main.c: 392: USARTGotoNewLine();
  9922                           
  9923                           ;incstack = 0
  9924 ;; hardware stack exceeded
  9925                           ; Regs used in i1_acquire: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9926  1207  160A  158A  2467  160A  118A  	fcall	i1_USARTGotoNewLine
  9927                           
  9928                           ;main.c: 393: acquirement = 1;
  9929  120C  1283               	bcf	3,5	;RP0=0, select bank0
  9930  120D  1303               	bcf	3,6	;RP1=0, select bank0
  9931  120E  01D8               	clrf	_acquirement
  9932  120F  0AD8               	incf	_acquirement,f
  9933  1210                     i1l4545:	
  9934                           ;main.c: 394: while(USARTDataAvailable() == 0 &&acquirement){
  9935                           
  9936  1210  160A  158A  24D8  160A  118A  	fcall	i1_USARTDataAvailable
  9937  1215  3A00               	xorlw	0
  9938  1216  1D03               	skipz
  9939  1217  0008               	return
  9940  1218  1283               	bcf	3,5	;RP0=0, select bank0
  9941  1219  1303               	bcf	3,6	;RP1=0, select bank0
  9942  121A  0858               	movf	_acquirement,w
  9943  121B  1903               	btfsc	3,2
  9944  121C  0008               	return
  9945                           
  9946                           ;main.c: 395: unsigned int valueAD = sampling();
  9947  121D  160A  158A  2490  160A  118A  	fcall	i1_sampling
  9948  1222  0871               	movf	?i1_sampling+1,w
  9949  1223  1283               	bcf	3,5	;RP0=0, select bank0
  9950  1224  1303               	bcf	3,6	;RP1=0, select bank0
  9951  1225  00AF               	movwf	i1acquire@valueAD+1
  9952  1226  0870               	movf	?i1_sampling,w
  9953  1227  00AE               	movwf	i1acquire@valueAD
  9954                           
  9955                           ;main.c: 396: if(valueAD<=1023 && valueAD >= 0){
  9956  1228  3004               	movlw	4
  9957  1229  022F               	subwf	i1acquire@valueAD+1,w
  9958  122A  3000               	movlw	0
  9959  122B  1903               	skipnz
  9960  122C  022E               	subwf	i1acquire@valueAD,w
  9961  122D  1803               	skipnc
  9962  122E  2A10               	goto	i1l4545
  9963                           
  9964                           ;main.c: 397: USARTWriteString("The analog value is: ");
  9965  122F  309D               	movlw	low (STR_61| (0+32768))
  9966  1230  00F1               	movwf	i1USARTWriteString@str
  9967  1231  3084               	movlw	high (STR_61| (0+32768))
  9968  1232  00F2               	movwf	i1USARTWriteString@str+1
  9969  1233  160A  158A  24FB  160A  118A  	fcall	i1_USARTWriteString
  9970                           
  9971                           ;main.c: 398: sprintf(strBuffer,"%d",valueAD);
  9972  1238  3051               	movlw	low (STR_52| (0+32768))
  9973  1239  1283               	bcf	3,5	;RP0=0, select bank0
  9974  123A  1303               	bcf	3,6	;RP1=0, select bank0
  9975  123B  00A0               	movwf	i1sprintf@f
  9976  123C  3086               	movlw	high (STR_52| (0+32768))
  9977  123D  00A1               	movwf	i1sprintf@f+1
  9978  123E  082F               	movf	i1acquire@valueAD+1,w
  9979  123F  00A3               	movwf	?i1_sprintf+3
  9980  1240  082E               	movf	i1acquire@valueAD,w
  9981  1241  00A2               	movwf	?i1_sprintf+2
  9982  1242  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  9983  1243  160A  118A  24FE  160A  118A  	fcall	i1_sprintf
  9984                           
  9985                           ;main.c: 399: USARTWriteString(strBuffer);
  9986  1248  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  9987  1249  00F1               	movwf	i1USARTWriteString@str
  9988  124A  3001               	movlw	1
  9989  124B  00F2               	movwf	i1USARTWriteString@str+1
  9990  124C  160A  158A  24FB  160A  118A  	fcall	i1_USARTWriteString
  9991                           
  9992                           ;main.c: 400: USARTGotoNewLine();
  9993  1251  160A  158A  2467  160A  118A  	fcall	i1_USARTGotoNewLine
  9994  1256  2A10               	goto	i1l4545
  9995  1257                     __end_ofi1_acquire:	
  9996                           
  9997                           	psect	text44
  9998  14FE                     __ptext44:	
  9999 ;; *************** function i1_sprintf *****************
 10000 ;; Defined at:
 10001 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;  sp              1    wreg     PTR unsigned char 
 10004 ;;		 -> strBuffer(25), 
 10005 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 10006 ;;		 -> STR_70(3), STR_68(3), STR_66(3), STR_64(3), 
 10007 ;;		 -> STR_62(3), STR_59(3), STR_53(3), STR_52(3), 
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;  sp              1   12[BANK0 ] PTR unsigned char 
 10010 ;;		 -> strBuffer(25), 
 10011 ;;  sprintf         4    0        struct .
 10012 ;;  sprintf         2   10[BANK0 ] unsigned int 
 10013 ;;  sprintf         2    0        PTR const unsigned char 
 10014 ;;  sprintf         2    0        unsigned int 
 10015 ;;  sprintf         1   13[BANK0 ] char 
 10016 ;;  sprintf         1    9[BANK0 ] char 
 10017 ;;  sprintf         1    8[BANK0 ] unsigned char 
 10018 ;;  sprintf         1    7[BANK0 ] PTR void [1]
 10019 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  2    0[BANK0 ] int 
 10022 ;; Registers used:
 10023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10029 ;;      Params:         0       4       0       0       0
 10030 ;;      Locals:         0       7       0       0       0
 10031 ;;      Temps:          0       3       0       0       0
 10032 ;;      Totals:         0      14       0       0       0
 10033 ;;Total ram usage:       14 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    1
 10036 ;; This function calls:
 10037 ;;		i1___lwdiv
 10038 ;;		i1___lwmod
 10039 ;; This function is called by:
 10040 ;;		i1_acquire
 10041 ;; This function uses a non-reentrant model
 10042 ;;
 10043                           
 10044                           
 10045                           ;psect for function i1_sprintf
 10046  14FE                     i1_sprintf:	
 10047                           
 10048                           ;incstack = 0
 10049 ;; hardware stack exceeded
 10050                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10051                           ;i1sprintf@sp stored from wreg
 10052  14FE  1283               	bcf	3,5	;RP0=0, select bank0
 10053  14FF  1303               	bcf	3,6	;RP1=0, select bank0
 10054  1500  00AC               	movwf	i1sprintf@sp
 10055                           
 10056                           ;doprnt.c: 494: va_list ap;
 10057                           ;doprnt.c: 499: signed char c;
 10058                           ;doprnt.c: 506: signed char prec;
 10059                           ;doprnt.c: 508: unsigned char flag;
 10060                           ;doprnt.c: 523: union {
 10061                           ;doprnt.c: 524: unsigned long vd;
 10062                           ;doprnt.c: 525: double integ;
 10063                           ;doprnt.c: 526: } tmpval;
 10064                           ;doprnt.c: 528: unsigned int val;
 10065                           ;doprnt.c: 529: unsigned len;
 10066                           ;doprnt.c: 530: const char * cp;
 10067                           ;doprnt.c: 533: *ap = __va_start();
 10068  1501  3022               	movlw	(low ((?i1_sprintf| 0+2)))& (0+255)
 10069  1502  00A4               	movwf	??i1_sprintf
 10070  1503  0824               	movf	??i1_sprintf,w
 10071  1504  00A7               	movwf	i1sprintf@ap
 10072  1505                     i1l3277:	
 10073                           ;doprnt.c: 536: while(c = *f++) {
 10074                           
 10075  1505  0821               	movf	i1sprintf@f+1,w
 10076  1506  00A5               	movwf	??i1_sprintf+1
 10077  1507  0820               	movf	i1sprintf@f,w
 10078  1508  00A4               	movwf	??i1_sprintf
 10079  1509  0AA0               	incf	i1sprintf@f,f
 10080  150A  1903               	skipnz
 10081  150B  0AA1               	incf	i1sprintf@f+1,f
 10082  150C  0825               	movf	??i1_sprintf+1,w
 10083  150D  00FF               	movwf	127
 10084  150E  0824               	movf	??i1_sprintf,w
 10085  150F  0084               	movwf	4
 10086  1510  120A  118A  2100  160A  118A  	fcall	stringtab
 10087  1515  00A6               	movwf	??i1_sprintf+2
 10088  1516  0826               	movf	??i1_sprintf+2,w
 10089  1517  00AD               	movwf	i1sprintf@c
 10090  1518  082D               	movf	i1sprintf@c,w
 10091  1519  1903               	btfsc	3,2
 10092  151A  2DE1               	goto	i1l3279
 10093                           
 10094                           ;doprnt.c: 538: if(c != '%')
 10095  151B  3025               	movlw	37
 10096  151C  062D               	xorwf	i1sprintf@c,w
 10097  151D  1903               	btfsc	3,2
 10098  151E  2D2B               	goto	i1l3233
 10099                           
 10100                           ;doprnt.c: 540: {
 10101                           ;doprnt.c: 541: ((*sp++ = (c)));
 10102  151F  082D               	movf	i1sprintf@c,w
 10103  1520  00A4               	movwf	??i1_sprintf
 10104  1521  082C               	movf	i1sprintf@sp,w
 10105  1522  0084               	movwf	4
 10106  1523  0824               	movf	??i1_sprintf,w
 10107  1524  1783               	bsf	3,7	;select IRP bank2
 10108  1525  0080               	movwf	0
 10109  1526  3001               	movlw	1
 10110  1527  00A4               	movwf	??i1_sprintf
 10111  1528  0824               	movf	??i1_sprintf,w
 10112  1529  07AC               	addwf	i1sprintf@sp,f
 10113                           
 10114                           ;doprnt.c: 542: continue;
 10115  152A  2D05               	goto	i1l3277
 10116  152B                     i1l3233:	
 10117                           
 10118                           ;doprnt.c: 543: }
 10119                           ;doprnt.c: 548: flag = 0;
 10120  152B  01A8               	clrf	i1sprintf@flag
 10121                           
 10122                           ;doprnt.c: 822: }
 10123                           
 10124                           ;doprnt.c: 813: continue;
 10125                           
 10126                           ;doprnt.c: 802: default:
 10127                           
 10128                           ;doprnt.c: 698: case 'i':
 10129                           ;doprnt.c: 699: break;
 10130                           
 10131                           ;doprnt.c: 697: case 'd':
 10132                           
 10133                           ;doprnt.c: 638: goto alldone;
 10134                           
 10135                           ;doprnt.c: 637: case 0:
 10136                           
 10137                           ;doprnt.c: 635: switch(c = *f++) {
 10138  152C  0821               	movf	i1sprintf@f+1,w
 10139  152D  00A5               	movwf	??i1_sprintf+1
 10140  152E  0820               	movf	i1sprintf@f,w
 10141  152F  00A4               	movwf	??i1_sprintf
 10142  1530  0AA0               	incf	i1sprintf@f,f
 10143  1531  1903               	skipnz
 10144  1532  0AA1               	incf	i1sprintf@f+1,f
 10145  1533  0825               	movf	??i1_sprintf+1,w
 10146  1534  00FF               	movwf	127
 10147  1535  0824               	movf	??i1_sprintf,w
 10148  1536  0084               	movwf	4
 10149  1537  120A  118A  2100  160A  118A  	fcall	stringtab
 10150  153C  00AD               	movwf	i1sprintf@c
 10151                           
 10152                           ; Switch size 1, requested type "space"
 10153                           ; Number of cases is 3, Range of values is 0 to 105
 10154                           ; switch strategies available:
 10155                           ; Name         Instructions Cycles
 10156                           ; simple_byte           10     6 (average)
 10157                           ; jumptable            260     6 (fixed)
 10158                           ;	Chosen strategy is simple_byte
 10159  153D  3A00               	xorlw	0	; case 0
 10160  153E  1903               	skipnz
 10161  153F  2DE1               	goto	i1l3279
 10162  1540  3A64               	xorlw	100	; case 100
 10163  1541  1903               	skipnz
 10164  1542  2D47               	goto	i1l3239
 10165  1543  3A0D               	xorlw	13	; case 105
 10166  1544  1903               	skipnz
 10167  1545  2D47               	goto	i1l3239
 10168  1546  2D05               	goto	i1l3277
 10169  1547                     i1l3239:	
 10170                           
 10171                           ;doprnt.c: 1253: {
 10172                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10173  1547  0827               	movf	i1sprintf@ap,w
 10174  1548  0084               	movwf	4
 10175  1549  1383               	bcf	3,7	;select IRP bank0
 10176  154A  0800               	movf	0,w
 10177  154B  00AA               	movwf	i1sprintf@val
 10178  154C  0A84               	incf	4,f
 10179  154D  0800               	movf	0,w
 10180  154E  00AB               	movwf	i1sprintf@val+1
 10181  154F  3002               	movlw	2
 10182  1550  00A4               	movwf	??i1_sprintf
 10183  1551  0824               	movf	??i1_sprintf,w
 10184  1552  07A7               	addwf	i1sprintf@ap,f
 10185                           
 10186                           ;doprnt.c: 1261: if((int)val < 0) {
 10187  1553  1FAB               	btfss	i1sprintf@val+1,7
 10188  1554  2D5E               	goto	i1l3249
 10189                           
 10190                           ;doprnt.c: 1262: flag |= 0x03;
 10191  1555  3003               	movlw	3
 10192  1556  00A4               	movwf	??i1_sprintf
 10193  1557  0824               	movf	??i1_sprintf,w
 10194  1558  04A8               	iorwf	i1sprintf@flag,f
 10195                           
 10196                           ;doprnt.c: 1263: val = -val;
 10197  1559  09AA               	comf	i1sprintf@val,f
 10198  155A  09AB               	comf	i1sprintf@val+1,f
 10199  155B  0AAA               	incf	i1sprintf@val,f
 10200  155C  1903               	skipnz
 10201  155D  0AAB               	incf	i1sprintf@val+1,f
 10202  155E                     i1l3249:	
 10203                           
 10204                           ;doprnt.c: 1264: }
 10205                           ;doprnt.c: 1266: }
 10206                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10207  155E  01AD               	clrf	i1sprintf@c
 10208  155F  0AAD               	incf	i1sprintf@c,f
 10209  1560  3005               	movlw	5
 10210  1561  062D               	xorwf	i1sprintf@c,w
 10211  1562  1903               	btfsc	3,2
 10212  1563  2D89               	goto	i1l3261
 10213  1564                     i1l3255:	
 10214                           
 10215                           ;doprnt.c: 1306: if(val < dpowers[c])
 10216  1564  082D               	movf	i1sprintf@c,w
 10217  1565  00A4               	movwf	??i1_sprintf
 10218  1566  0724               	addwf	??i1_sprintf,w
 10219  1567  3E12               	addlw	low (_dpowers| (0+32768))
 10220  1568  0084               	movwf	4
 10221  1569  3081               	movlw	high (_dpowers| (0+32768))
 10222  156A  1803               	skipnc
 10223  156B  3E01               	addlw	1
 10224  156C  00FF               	movwf	127
 10225  156D  120A  118A  2100  160A  118A  	fcall	stringtab
 10226  1572  00A5               	movwf	??i1_sprintf+1
 10227  1573  120A  118A  2100  160A  118A  	fcall	stringtab
 10228  1578  00A6               	movwf	??i1_sprintf+2
 10229  1579  0826               	movf	??i1_sprintf+2,w
 10230  157A  022B               	subwf	i1sprintf@val+1,w
 10231  157B  1D03               	skipz
 10232  157C  2D7F               	goto	u369_25
 10233  157D  0825               	movf	??i1_sprintf+1,w
 10234  157E  022A               	subwf	i1sprintf@val,w
 10235  157F                     u369_25:	
 10236  157F  1C03               	btfss	3,0
 10237  1580  2D89               	goto	i1l3261
 10238                           
 10239                           ;doprnt.c: 1307: break;
 10240  1581  3001               	movlw	1
 10241  1582  00A4               	movwf	??i1_sprintf
 10242  1583  0824               	movf	??i1_sprintf,w
 10243  1584  07AD               	addwf	i1sprintf@c,f
 10244  1585  3005               	movlw	5
 10245  1586  062D               	xorwf	i1sprintf@c,w
 10246  1587  1D03               	btfss	3,2
 10247  1588  2D64               	goto	i1l3255
 10248  1589                     i1l3261:	
 10249                           
 10250                           ;doprnt.c: 1422: {
 10251                           ;doprnt.c: 1438: if(flag & 0x03)
 10252  1589  0828               	movf	i1sprintf@flag,w
 10253  158A  3903               	andlw	3
 10254  158B  1903               	btfsc	3,2
 10255  158C  2D98               	goto	i1l3267
 10256                           
 10257                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10258  158D  302D               	movlw	45
 10259  158E  00A4               	movwf	??i1_sprintf
 10260  158F  082C               	movf	i1sprintf@sp,w
 10261  1590  0084               	movwf	4
 10262  1591  0824               	movf	??i1_sprintf,w
 10263  1592  1783               	bsf	3,7	;select IRP bank2
 10264  1593  0080               	movwf	0
 10265  1594  3001               	movlw	1
 10266  1595  00A4               	movwf	??i1_sprintf
 10267  1596  0824               	movf	??i1_sprintf,w
 10268  1597  07AC               	addwf	i1sprintf@sp,f
 10269  1598                     i1l3267:	
 10270                           
 10271                           ;doprnt.c: 1469: }
 10272                           ;doprnt.c: 1472: prec = c;
 10273  1598  082D               	movf	i1sprintf@c,w
 10274  1599  00A4               	movwf	??i1_sprintf
 10275  159A  0824               	movf	??i1_sprintf,w
 10276  159B  00A9               	movwf	i1sprintf@prec
 10277  159C                     i1l3275:	
 10278                           ;doprnt.c: 1474: while(prec--) {
 10279                           
 10280  159C  30FF               	movlw	255
 10281  159D  00A4               	movwf	??i1_sprintf
 10282  159E  0824               	movf	??i1_sprintf,w
 10283  159F  07A9               	addwf	i1sprintf@prec,f
 10284  15A0  0A29               	incf	i1sprintf@prec,w
 10285  15A1  1903               	btfsc	3,2
 10286  15A2  2D05               	goto	i1l3277
 10287                           
 10288                           ;doprnt.c: 1478: {
 10289                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10290  15A3  300A               	movlw	10
 10291  15A4  00F8               	movwf	i1___lwmod@divisor
 10292  15A5  3000               	movlw	0
 10293  15A6  00F9               	movwf	i1___lwmod@divisor+1
 10294  15A7  0829               	movf	i1sprintf@prec,w
 10295  15A8  00A4               	movwf	??i1_sprintf
 10296  15A9  0724               	addwf	??i1_sprintf,w
 10297  15AA  3E12               	addlw	low (_dpowers| (0+32768))
 10298  15AB  0084               	movwf	4
 10299  15AC  3081               	movlw	high (_dpowers| (0+32768))
 10300  15AD  1803               	skipnc
 10301  15AE  3E01               	addlw	1
 10302  15AF  00FF               	movwf	127
 10303  15B0  120A  118A  2100  160A  118A  	fcall	stringtab
 10304  15B5  00F0               	movwf	i1___lwdiv@divisor
 10305  15B6  120A  118A  2100  160A  118A  	fcall	stringtab
 10306  15BB  00F1               	movwf	i1___lwdiv@divisor+1
 10307  15BC  082B               	movf	i1sprintf@val+1,w
 10308  15BD  00F3               	movwf	i1___lwdiv@dividend+1
 10309  15BE  082A               	movf	i1sprintf@val,w
 10310  15BF  00F2               	movwf	i1___lwdiv@dividend
 10311  15C0  160A  158A  2749  160A  118A  	fcall	i1___lwdiv
 10312  15C5  0871               	movf	?i1___lwdiv+1,w
 10313  15C6  00FB               	movwf	i1___lwmod@dividend+1
 10314  15C7  0870               	movf	?i1___lwdiv,w
 10315  15C8  00FA               	movwf	i1___lwmod@dividend
 10316  15C9  160A  158A  2675  160A  118A  	fcall	i1___lwmod
 10317  15CE  0878               	movf	?i1___lwmod,w
 10318  15CF  3E30               	addlw	48
 10319  15D0  1283               	bcf	3,5	;RP0=0, select bank0
 10320  15D1  1303               	bcf	3,6	;RP1=0, select bank0
 10321  15D2  00A5               	movwf	??i1_sprintf+1
 10322  15D3  0825               	movf	??i1_sprintf+1,w
 10323  15D4  00AD               	movwf	i1sprintf@c
 10324                           
 10325                           ;doprnt.c: 1523: }
 10326                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10327  15D5  082D               	movf	i1sprintf@c,w
 10328  15D6  00A4               	movwf	??i1_sprintf
 10329  15D7  082C               	movf	i1sprintf@sp,w
 10330  15D8  0084               	movwf	4
 10331  15D9  0824               	movf	??i1_sprintf,w
 10332  15DA  1783               	bsf	3,7	;select IRP bank2
 10333  15DB  0080               	movwf	0
 10334  15DC  3001               	movlw	1
 10335  15DD  00A4               	movwf	??i1_sprintf
 10336  15DE  0824               	movf	??i1_sprintf,w
 10337  15DF  07AC               	addwf	i1sprintf@sp,f
 10338  15E0  2D9C               	goto	i1l3275
 10339  15E1                     i1l3279:	
 10340                           ;doprnt.c: 1525: }
 10341                           ;doprnt.c: 1533: }
 10342                           ;doprnt.c: 1535: alldone:
 10343                           
 10344                           
 10345                           ;doprnt.c: 1538: *sp = 0;
 10346  15E1  082C               	movf	i1sprintf@sp,w
 10347  15E2  0084               	movwf	4
 10348  15E3  1783               	bsf	3,7	;select IRP bank2
 10349  15E4  0180               	clrf	0
 10350  15E5  0008               	return
 10351  15E6                     __end_ofi1_sprintf:	
 10352                           ;doprnt.c: 1540: return 0;
 10353                           ;	Return value of i1_sprintf is never used
 10354                           
 10355                           
 10356                           	psect	text45
 10357  1E75                     __ptext45:	
 10358 ;; *************** function i1___lwmod *****************
 10359 ;; Defined at:
 10360 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;  divisor         2    8[COMMON] unsigned int 
 10363 ;;  dividend        2   10[COMMON] unsigned int 
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;  __lwmod         1   13[COMMON] unsigned char 
 10366 ;; Return value:  Size  Location     Type
 10367 ;;                  2    8[COMMON] unsigned int 
 10368 ;; Registers used:
 10369 ;;		wreg, status,2, status,0
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10375 ;;      Params:         4       0       0       0       0
 10376 ;;      Locals:         1       0       0       0       0
 10377 ;;      Temps:          1       0       0       0       0
 10378 ;;      Totals:         6       0       0       0       0
 10379 ;;Total ram usage:        6 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; This function calls:
 10382 ;;		Nothing
 10383 ;; This function is called by:
 10384 ;;		i1_sprintf
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function i1___lwmod
 10390  1E75                     i1___lwmod:	
 10391                           
 10392                           ;incstack = 0
 10393 ;; hardware stack exceeded
 10394                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
 10395  1E75  0878               	movf	i1___lwmod@divisor,w
 10396  1E76  0479               	iorwf	i1___lwmod@divisor+1,w
 10397  1E77  1903               	btfsc	3,2
 10398  1E78  2EA2               	goto	i1l3061
 10399  1E79  01FD               	clrf	i1___lwmod@counter
 10400  1E7A  0AFD               	incf	i1___lwmod@counter,f
 10401  1E7B                     i1l3051:	
 10402  1E7B  1BF9               	btfsc	i1___lwmod@divisor+1,7
 10403  1E7C  2E89               	goto	i1l3053
 10404  1E7D  3001               	movlw	1
 10405  1E7E                     u334_25:	
 10406  1E7E  1003               	clrc
 10407  1E7F  0DF8               	rlf	i1___lwmod@divisor,f
 10408  1E80  0DF9               	rlf	i1___lwmod@divisor+1,f
 10409  1E81  3EFF               	addlw	-1
 10410  1E82  1D03               	skipz
 10411  1E83  2E7E               	goto	u334_25
 10412  1E84  3001               	movlw	1
 10413  1E85  00FC               	movwf	??i1___lwmod
 10414  1E86  087C               	movf	??i1___lwmod,w
 10415  1E87  07FD               	addwf	i1___lwmod@counter,f
 10416  1E88  2E7B               	goto	i1l3051
 10417  1E89                     i1l3053:	
 10418  1E89  0879               	movf	i1___lwmod@divisor+1,w
 10419  1E8A  027B               	subwf	i1___lwmod@dividend+1,w
 10420  1E8B  1D03               	skipz
 10421  1E8C  2E8F               	goto	u336_25
 10422  1E8D  0878               	movf	i1___lwmod@divisor,w
 10423  1E8E  027A               	subwf	i1___lwmod@dividend,w
 10424  1E8F                     u336_25:	
 10425  1E8F  1C03               	skipc
 10426  1E90  2E97               	goto	i1l3057
 10427  1E91  0878               	movf	i1___lwmod@divisor,w
 10428  1E92  02FA               	subwf	i1___lwmod@dividend,f
 10429  1E93  0879               	movf	i1___lwmod@divisor+1,w
 10430  1E94  1C03               	skipc
 10431  1E95  03FB               	decf	i1___lwmod@dividend+1,f
 10432  1E96  02FB               	subwf	i1___lwmod@dividend+1,f
 10433  1E97                     i1l3057:	
 10434  1E97  3001               	movlw	1
 10435  1E98                     u337_25:	
 10436  1E98  1003               	clrc
 10437  1E99  0CF9               	rrf	i1___lwmod@divisor+1,f
 10438  1E9A  0CF8               	rrf	i1___lwmod@divisor,f
 10439  1E9B  3EFF               	addlw	-1
 10440  1E9C  1D03               	skipz
 10441  1E9D  2E98               	goto	u337_25
 10442  1E9E  3001               	movlw	1
 10443  1E9F  02FD               	subwf	i1___lwmod@counter,f
 10444  1EA0  1D03               	btfss	3,2
 10445  1EA1  2E89               	goto	i1l3053
 10446  1EA2                     i1l3061:	
 10447  1EA2  087B               	movf	i1___lwmod@dividend+1,w
 10448  1EA3  00F9               	movwf	?i1___lwmod+1
 10449  1EA4  087A               	movf	i1___lwmod@dividend,w
 10450  1EA5  00F8               	movwf	?i1___lwmod
 10451  1EA6  0008               	return
 10452  1EA7                     __end_ofi1___lwmod:	
 10453                           
 10454                           	psect	text46
 10455  1F49                     __ptext46:	
 10456 ;; *************** function i1___lwdiv *****************
 10457 ;; Defined at:
 10458 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;  divisor         2    0[COMMON] unsigned int 
 10461 ;;  dividend        2    2[COMMON] unsigned int 
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;  __lwdiv         2    5[COMMON] unsigned int 
 10464 ;;  __lwdiv         1    7[COMMON] unsigned char 
 10465 ;; Return value:  Size  Location     Type
 10466 ;;                  2    0[COMMON] unsigned int 
 10467 ;; Registers used:
 10468 ;;		wreg, status,2, status,0
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10474 ;;      Params:         4       0       0       0       0
 10475 ;;      Locals:         3       0       0       0       0
 10476 ;;      Temps:          1       0       0       0       0
 10477 ;;      Totals:         8       0       0       0       0
 10478 ;;Total ram usage:        8 bytes
 10479 ;; Hardware stack levels used:    1
 10480 ;; This function calls:
 10481 ;;		Nothing
 10482 ;; This function is called by:
 10483 ;;		i1_sprintf
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           
 10488                           ;psect for function i1___lwdiv
 10489  1F49                     i1___lwdiv:	
 10490                           
 10491                           ;incstack = 0
 10492 ;; hardware stack exceeded
 10493                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10494  1F49  01F5               	clrf	i1___lwdiv@quotient
 10495  1F4A  01F6               	clrf	i1___lwdiv@quotient+1
 10496  1F4B  0870               	movf	i1___lwdiv@divisor,w
 10497  1F4C  0471               	iorwf	i1___lwdiv@divisor+1,w
 10498  1F4D  1903               	btfsc	3,2
 10499  1F4E  2F80               	goto	i1l3039
 10500  1F4F  01F7               	clrf	i1___lwdiv@counter
 10501  1F50  0AF7               	incf	i1___lwdiv@counter,f
 10502  1F51                     i1l3027:	
 10503  1F51  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10504  1F52  2F5F               	goto	i1l3029
 10505  1F53  3001               	movlw	1
 10506  1F54                     u327_25:	
 10507  1F54  1003               	clrc
 10508  1F55  0DF0               	rlf	i1___lwdiv@divisor,f
 10509  1F56  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10510  1F57  3EFF               	addlw	-1
 10511  1F58  1D03               	skipz
 10512  1F59  2F54               	goto	u327_25
 10513  1F5A  3001               	movlw	1
 10514  1F5B  00F4               	movwf	??i1___lwdiv
 10515  1F5C  0874               	movf	??i1___lwdiv,w
 10516  1F5D  07F7               	addwf	i1___lwdiv@counter,f
 10517  1F5E  2F51               	goto	i1l3027
 10518  1F5F                     i1l3029:	
 10519  1F5F  3001               	movlw	1
 10520  1F60                     u329_25:	
 10521  1F60  1003               	clrc
 10522  1F61  0DF5               	rlf	i1___lwdiv@quotient,f
 10523  1F62  0DF6               	rlf	i1___lwdiv@quotient+1,f
 10524  1F63  3EFF               	addlw	-1
 10525  1F64  1D03               	skipz
 10526  1F65  2F60               	goto	u329_25
 10527  1F66  0871               	movf	i1___lwdiv@divisor+1,w
 10528  1F67  0273               	subwf	i1___lwdiv@dividend+1,w
 10529  1F68  1D03               	skipz
 10530  1F69  2F6C               	goto	u330_25
 10531  1F6A  0870               	movf	i1___lwdiv@divisor,w
 10532  1F6B  0272               	subwf	i1___lwdiv@dividend,w
 10533  1F6C                     u330_25:	
 10534  1F6C  1C03               	skipc
 10535  1F6D  2F75               	goto	i1l3035
 10536  1F6E  0870               	movf	i1___lwdiv@divisor,w
 10537  1F6F  02F2               	subwf	i1___lwdiv@dividend,f
 10538  1F70  0871               	movf	i1___lwdiv@divisor+1,w
 10539  1F71  1C03               	skipc
 10540  1F72  03F3               	decf	i1___lwdiv@dividend+1,f
 10541  1F73  02F3               	subwf	i1___lwdiv@dividend+1,f
 10542  1F74  1475               	bsf	i1___lwdiv@quotient,0
 10543  1F75                     i1l3035:	
 10544  1F75  3001               	movlw	1
 10545  1F76                     u331_25:	
 10546  1F76  1003               	clrc
 10547  1F77  0CF1               	rrf	i1___lwdiv@divisor+1,f
 10548  1F78  0CF0               	rrf	i1___lwdiv@divisor,f
 10549  1F79  3EFF               	addlw	-1
 10550  1F7A  1D03               	skipz
 10551  1F7B  2F76               	goto	u331_25
 10552  1F7C  3001               	movlw	1
 10553  1F7D  02F7               	subwf	i1___lwdiv@counter,f
 10554  1F7E  1D03               	btfss	3,2
 10555  1F7F  2F5F               	goto	i1l3029
 10556  1F80                     i1l3039:	
 10557  1F80  0876               	movf	i1___lwdiv@quotient+1,w
 10558  1F81  00F1               	movwf	?i1___lwdiv+1
 10559  1F82  0875               	movf	i1___lwdiv@quotient,w
 10560  1F83  00F0               	movwf	?i1___lwdiv
 10561  1F84  0008               	return
 10562  1F85                     __end_ofi1___lwdiv:	
 10563                           
 10564                           	psect	text47
 10565  1C90                     __ptext47:	
 10566 ;; *************** function i1_sampling *****************
 10567 ;; Defined at:
 10568 ;;		line 384 in file "main.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;		None
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;		None
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  2    0[COMMON] unsigned int 
 10575 ;; Registers used:
 10576 ;;		wreg
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10582 ;;      Params:         2       0       0       0       0
 10583 ;;      Locals:         0       0       0       0       0
 10584 ;;      Temps:          1       0       0       0       0
 10585 ;;      Totals:         3       0       0       0       0
 10586 ;;Total ram usage:        3 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; This function calls:
 10589 ;;		Nothing
 10590 ;; This function is called by:
 10591 ;;		i1_acquire
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           
 10596                           ;psect for function i1_sampling
 10597  1C90                     i1_sampling:	
 10598                           
 10599                           ;main.c: 385: _delay((unsigned long)((100)*(20000000/4000000.0)));
 10600                           
 10601                           ;incstack = 0
 10602 ;; hardware stack exceeded
 10603                           ; Regs used in i1_sampling: [wreg]
 10604  1C90  30A6               	movlw	166
 10605  1C91  00F2               	movwf	??i1_sampling
 10606  1C92                     u581_27:	
 10607  1C92  0BF2               	decfsz	??i1_sampling,f
 10608  1C93  2C92               	goto	u581_27
 10609  1C94  0000               	nop
 10610                           
 10611                           ;main.c: 386: ADCON0bits.GO_nDONE = 1;
 10612  1C95  1283               	bcf	3,5	;RP0=0, select bank0
 10613  1C96  1303               	bcf	3,6	;RP1=0, select bank0
 10614  1C97  151F               	bsf	31,2	;volatile
 10615  1C98                     i1l342:	
 10616                           ;main.c: 387: while(ADCON0bits.GO_nDONE){}
 10617                           
 10618  1C98  191F               	btfsc	31,2	;volatile
 10619  1C99  2C98               	goto	i1l342
 10620                           
 10621                           ;main.c: 388: return (int)(ADRESH << 8) + (ADRESL);
 10622  1C9A  081E               	movf	30,w	;volatile
 10623  1C9B  00F1               	movwf	?i1_sampling+1
 10624  1C9C  1683               	bsf	3,5	;RP0=1, select bank1
 10625  1C9D  1303               	bcf	3,6	;RP1=0, select bank1
 10626  1C9E  081E               	movf	30,w	;volatile
 10627  1C9F  00F0               	movwf	?i1_sampling
 10628  1CA0  0008               	return
 10629  1CA1                     __end_ofi1_sampling:	
 10630                           
 10631                           	psect	text48
 10632  1CFB                     __ptext48:	
 10633 ;; *************** function i1_USARTWriteString *****************
 10634 ;; Defined at:
 10635 ;;		line 78 in file "usart_pic16.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;  str             2    1[COMMON] PTR const unsigned char 
 10638 ;;		 -> STR_72(7), STR_71(35), STR_69(8), STR_67(9), 
 10639 ;;		 -> STR_65(9), STR_63(22), STR_61(22), status@output(25), 
 10640 ;;		 -> STR_57(7), STR_56(35), STR_55(7), STR_54(35), 
 10641 ;;		 -> strBuffer(25), STR_51(2), STR_50(28), STR_35(94), 
 10642 ;;		 -> STR_34(19), STR_33(34), STR_32(19), STR_31(19), 
 10643 ;;		 -> STR_30(56), STR_29(19), STR_28(19), STR_27(74), 
 10644 ;;		 -> STR_26(19), STR_25(19), STR_24(43), STR_23(19), 
 10645 ;;		 -> STR_22(19), STR_21(34), STR_20(19), STR_19(28), 
 10646 ;;		 -> STR_18(70), STR_17(19), STR_16(19), STR_15(82), 
 10647 ;;		 -> STR_14(19), STR_13(21), STR_12(83), STR_11(19), 
 10648 ;;		 -> STR_10(18), STR_9(85), STR_8(19), STR_7(15), 
 10649 ;;		 -> STR_6(88), STR_5(19), STR_4(57), STR_3(48), 
 10650 ;;		 -> STR_2(93), STR_1(2), 
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;		None
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10662 ;;      Params:         2       0       0       0       0
 10663 ;;      Locals:         0       0       0       0       0
 10664 ;;      Temps:          0       0       0       0       0
 10665 ;;      Totals:         2       0       0       0       0
 10666 ;;Total ram usage:        2 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:    1
 10669 ;; This function calls:
 10670 ;;		i1_USARTWriteChar
 10671 ;; This function is called by:
 10672 ;;		i1_acquire
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           
 10677                           ;psect for function i1_USARTWriteString
 10678  1CFB                     i1_USARTWriteString:	
 10679  1CFB                     i1l4499:	
 10680                           ;usart_pic16.c: 80: while(*str!='\0')
 10681                           
 10682                           ;incstack = 0
 10683 ;; hardware stack exceeded
 10684                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10685                           
 10686  1CFB  0872               	movf	i1USARTWriteString@str+1,w
 10687  1CFC  1283               	bcf	3,5	;RP0=0, select bank0
 10688  1CFD  1303               	bcf	3,6	;RP1=0, select bank0
 10689  1CFE  00FF               	movwf	127
 10690  1CFF  0871               	movf	i1USARTWriteString@str,w
 10691  1D00  0084               	movwf	4
 10692  1D01  120A  118A  2100  160A  158A  	fcall	stringtab
 10693  1D06  3A00               	xorlw	0
 10694  1D07  1903               	btfsc	3,2
 10695  1D08  0008               	return
 10696                           
 10697                           ;usart_pic16.c: 81: {
 10698                           ;usart_pic16.c: 82: USARTWriteChar(*str);
 10699  1D09  0872               	movf	i1USARTWriteString@str+1,w
 10700  1D0A  1283               	bcf	3,5	;RP0=0, select bank0
 10701  1D0B  1303               	bcf	3,6	;RP1=0, select bank0
 10702  1D0C  00FF               	movwf	127
 10703  1D0D  0871               	movf	i1USARTWriteString@str,w
 10704  1D0E  0084               	movwf	4
 10705  1D0F  120A  118A  2100  160A  158A  	fcall	stringtab
 10706  1D14  160A  158A  244F  160A  158A  	fcall	i1_USARTWriteChar
 10707                           
 10708                           ;usart_pic16.c: 83: str++;
 10709  1D19  3001               	movlw	1
 10710  1D1A  07F1               	addwf	i1USARTWriteString@str,f
 10711  1D1B  1803               	skipnc
 10712  1D1C  0AF2               	incf	i1USARTWriteString@str+1,f
 10713  1D1D  2CFB               	goto	i1l4499
 10714  1D1E                     __end_ofi1_USARTWriteString:	
 10715                           
 10716                           	psect	text49
 10717  1C67                     __ptext49:	
 10718 ;; *************** function i1_USARTGotoNewLine *****************
 10719 ;; Defined at:
 10720 ;;		line 202 in file "usart_pic16.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;		None
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;		None
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      void 
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0, pclath, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10734 ;;      Params:         0       0       0       0       0
 10735 ;;      Locals:         0       0       0       0       0
 10736 ;;      Temps:          0       0       0       0       0
 10737 ;;      Totals:         0       0       0       0       0
 10738 ;;Total ram usage:        0 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    1
 10741 ;; This function calls:
 10742 ;;		i1_USARTWriteChar
 10743 ;; This function is called by:
 10744 ;;		i1_acquire
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           
 10749                           ;psect for function i1_USARTGotoNewLine
 10750  1C67                     i1_USARTGotoNewLine:	
 10751                           
 10752                           ;usart_pic16.c: 204: USARTWriteChar('\r');
 10753                           
 10754                           ;incstack = 0
 10755 ;; hardware stack exceeded
 10756                           ; Regs used in i1_USARTGotoNewLine: [wreg+status,2+status,0+pclath+cstack]
 10757  1C67  300D               	movlw	13
 10758  1C68  160A  158A  244F  160A  158A  	fcall	i1_USARTWriteChar
 10759                           
 10760                           ;usart_pic16.c: 205: USARTWriteChar('\n');
 10761  1C6D  300A               	movlw	10
 10762  1C6E  160A  158A  244F   	fcall	i1_USARTWriteChar
 10763  1C71  0008               	return
 10764  1C72                     __end_ofi1_USARTGotoNewLine:	
 10765                           
 10766                           	psect	text50
 10767  1C4F                     __ptext50:	
 10768 ;; *************** function i1_USARTWriteChar *****************
 10769 ;; Defined at:
 10770 ;;		line 71 in file "usart_pic16.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;  ch              1    wreg     unsigned char 
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;  ch              1    0[COMMON] unsigned char 
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10784 ;;      Params:         0       0       0       0       0
 10785 ;;      Locals:         1       0       0       0       0
 10786 ;;      Temps:          0       0       0       0       0
 10787 ;;      Totals:         1       0       0       0       0
 10788 ;;Total ram usage:        1 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; This function calls:
 10791 ;;		Nothing
 10792 ;; This function is called by:
 10793 ;;		i1_USARTWriteString
 10794 ;;		i1_USARTGotoNewLine
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function i1_USARTWriteChar
 10800  1C4F                     i1_USARTWriteChar:	
 10801                           
 10802                           ;incstack = 0
 10803 ;; hardware stack exceeded
 10804                           ; Regs used in i1_USARTWriteChar: [wreg]
 10805                           ;i1USARTWriteChar@ch stored from wreg
 10806  1C4F  00F0               	movwf	i1USARTWriteChar@ch
 10807  1C50                     i1l38:	
 10808                           ;usart_pic16.c: 73: while(!PIR1bits.TXIF);
 10809                           
 10810  1C50  1283               	bcf	3,5	;RP0=0, select bank0
 10811  1C51  1303               	bcf	3,6	;RP1=0, select bank0
 10812  1C52  1E0C               	btfss	12,4	;volatile
 10813  1C53  2C50               	goto	i1l38
 10814                           
 10815                           ;usart_pic16.c: 75: TXREG=ch;
 10816  1C54  0870               	movf	i1USARTWriteChar@ch,w
 10817  1C55  0099               	movwf	25	;volatile
 10818  1C56  0008               	return
 10819  1C57                     __end_ofi1_USARTWriteChar:	
 10820                           
 10821                           	psect	text51
 10822  1CD8                     __ptext51:	
 10823 ;; *************** function i1_USARTDataAvailable *****************
 10824 ;; Defined at:
 10825 ;;		line 151 in file "usart_pic16.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;		None
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;		None
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  1    wreg      unsigned char 
 10832 ;; Registers used:
 10833 ;;		wreg, status,2, status,0
 10834 ;; Tracked objects:
 10835 ;;		On entry : 0/0
 10836 ;;		On exit  : 0/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10839 ;;      Params:         0       0       0       0       0
 10840 ;;      Locals:         0       0       0       0       0
 10841 ;;      Temps:          1       0       0       0       0
 10842 ;;      Totals:         1       0       0       0       0
 10843 ;;Total ram usage:        1 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; This function calls:
 10846 ;;		Nothing
 10847 ;; This function is called by:
 10848 ;;		i1_acquire
 10849 ;; This function uses a non-reentrant model
 10850 ;;
 10851                           
 10852                           
 10853                           ;psect for function i1_USARTDataAvailable
 10854  1CD8                     i1_USARTDataAvailable:	
 10855                           
 10856                           ;usart_pic16.c: 153: if(UQFront==-1) return 0;
 10857                           
 10858                           ;incstack = 0
 10859 ;; hardware stack exceeded
 10860                           ; Regs used in i1_USARTDataAvailable: [wreg+status,2+status,0]
 10861  1CD8  1283               	bcf	3,5	;RP0=0, select bank0
 10862  1CD9  1303               	bcf	3,6	;RP1=0, select bank0
 10863  1CDA  0A5A               	incf	_UQFront,w	;volatile
 10864  1CDB  1D03               	btfss	3,2
 10865  1CDC  2CDF               	goto	i1l3195
 10866  1CDD  3000               	movlw	0
 10867  1CDE  0008               	return
 10868  1CDF                     i1l3195:	
 10869                           
 10870                           ;usart_pic16.c: 154: if(UQFront<UQEnd)
 10871  1CDF  085A               	movf	_UQFront,w	;volatile
 10872  1CE0  3A80               	xorlw	128
 10873  1CE1  00F0               	movwf	??i1_USARTDataAvailable
 10874  1CE2  0859               	movf	_UQEnd,w	;volatile
 10875  1CE3  3A80               	xorlw	128
 10876  1CE4  02F0               	subwf	??i1_USARTDataAvailable,f
 10877  1CE5  1803               	skipnc
 10878  1CE6  2CEC               	goto	i1l3203
 10879                           
 10880                           ;usart_pic16.c: 155: return(UQEnd-UQFront+1);
 10881  1CE7  035A               	decf	_UQFront,w	;volatile
 10882  1CE8  3AFF               	xorlw	255
 10883  1CE9  0759               	addwf	_UQEnd,w	;volatile
 10884  1CEA  3E01               	addlw	1
 10885  1CEB  0008               	return
 10886  1CEC                     i1l3203:	
 10887                           
 10888                           ;usart_pic16.c: 156: else if(UQFront>UQEnd)
 10889  1CEC  0859               	movf	_UQEnd,w	;volatile
 10890  1CED  3A80               	xorlw	128
 10891  1CEE  00F0               	movwf	??i1_USARTDataAvailable
 10892  1CEF  085A               	movf	_UQFront,w	;volatile
 10893  1CF0  3A80               	xorlw	128
 10894  1CF1  02F0               	subwf	??i1_USARTDataAvailable,f
 10895  1CF2  1803               	skipnc
 10896  1CF3  2CF9               	goto	i1l3211
 10897                           
 10898                           ;usart_pic16.c: 157: return (64-UQFront+UQEnd+1);
 10899  1CF4  035A               	decf	_UQFront,w	;volatile
 10900  1CF5  3AFF               	xorlw	255
 10901  1CF6  0759               	addwf	_UQEnd,w	;volatile
 10902  1CF7  3E41               	addlw	65
 10903  1CF8  0008               	return
 10904  1CF9                     i1l3211:	
 10905                           
 10906                           ;usart_pic16.c: 158: else
 10907                           ;usart_pic16.c: 159: return 1;
 10908  1CF9  3001               	movlw	1
 10909  1CFA  0008               	return
 10910  1CFB                     __end_ofi1_USARTDataAvailable:	
 10911                           
 10912                           	psect	text52
 10913  11BE                     __ptext52:	
 10914 ;; *************** function _USARTHandleRxInt *****************
 10915 ;; Defined at:
 10916 ;;		line 95 in file "usart_pic16.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;		None
 10919 ;; Auto vars:     Size  Location     Type
 10920 ;;  data            1    4[COMMON] unsigned char 
 10921 ;; Return value:  Size  Location     Type
 10922 ;;                  1    wreg      void 
 10923 ;; Registers used:
 10924 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10925 ;; Tracked objects:
 10926 ;;		On entry : 0/0
 10927 ;;		On exit  : 0/0
 10928 ;;		Unchanged: 0/0
 10929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10930 ;;      Params:         0       0       0       0       0
 10931 ;;      Locals:         1       0       0       0       0
 10932 ;;      Temps:          4       0       0       0       0
 10933 ;;      Totals:         5       0       0       0       0
 10934 ;;Total ram usage:        5 bytes
 10935 ;; Hardware stack levels used:    1
 10936 ;; This function calls:
 10937 ;;		Nothing
 10938 ;; This function is called by:
 10939 ;;		_ISR
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           
 10944                           ;psect for function _USARTHandleRxInt
 10945  11BE                     _USARTHandleRxInt:	
 10946                           
 10947                           ;usart_pic16.c: 97: if(RB1==1)
 10948                           
 10949                           ;incstack = 0
 10950 ;; hardware stack exceeded
 10951                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
 10952  11BE  1283               	bcf	3,5	;RP0=0, select bank0
 10953  11BF  1303               	bcf	3,6	;RP1=0, select bank0
 10954  11C0  1C86               	btfss	6,1	;volatile
 10955  11C1  29C4               	goto	i1l53
 10956                           
 10957                           ;usart_pic16.c: 98: RB1=0;
 10958  11C2  1086               	bcf	6,1	;volatile
 10959  11C3  29C5               	goto	i1l3317
 10960  11C4                     i1l53:	
 10961                           
 10962                           ;usart_pic16.c: 99: else
 10963                           ;usart_pic16.c: 100: RB1=1;
 10964  11C4  1486               	bsf	6,1	;volatile
 10965  11C5                     i1l3317:	
 10966                           
 10967                           ;usart_pic16.c: 103: char data=RCREG;
 10968  11C5  081A               	movf	26,w	;volatile
 10969  11C6  00F0               	movwf	??_USARTHandleRxInt
 10970  11C7  0870               	movf	??_USARTHandleRxInt,w
 10971  11C8  00F4               	movwf	USARTHandleRxInt@data
 10972                           
 10973                           ;usart_pic16.c: 106: if(((UQEnd==64-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 10974  11C9  303F               	movlw	63
 10975  11CA  0659               	xorwf	_UQEnd,w	;volatile
 10976  11CB  1903               	btfsc	3,2
 10977  11CC  085A               	movf	_UQFront,w	;volatile
 10978  11CD  1903               	btfsc	3,2
 10979  11CE  29E4               	goto	i1l3325
 10980  11CF  085A               	movf	_UQFront,w	;volatile
 10981  11D0  00F0               	movwf	??_USARTHandleRxInt
 10982  11D1  01F1               	clrf	??_USARTHandleRxInt+1
 10983  11D2  1BF0               	btfsc	??_USARTHandleRxInt,7
 10984  11D3  03F1               	decf	??_USARTHandleRxInt+1,f
 10985  11D4  3001               	movlw	1
 10986  11D5  0759               	addwf	_UQEnd,w	;volatile
 10987  11D6  00F2               	movwf	??_USARTHandleRxInt+2
 10988  11D7  01F3               	clrf	??_USARTHandleRxInt+3
 10989  11D8  1803               	skipnc
 10990  11D9  0AF3               	incf	??_USARTHandleRxInt+3,f
 10991  11DA  1BD9               	btfsc	_UQEnd,7	;volatile
 10992  11DB  03F3               	decf	??_USARTHandleRxInt+3,f
 10993  11DC  0871               	movf	??_USARTHandleRxInt+1,w
 10994  11DD  0673               	xorwf	??_USARTHandleRxInt+3,w
 10995  11DE  1D03               	skipz
 10996  11DF  29E2               	goto	u378_25
 10997  11E0  0870               	movf	??_USARTHandleRxInt,w
 10998  11E1  0672               	xorwf	??_USARTHandleRxInt+2,w
 10999  11E2                     u378_25:	
 11000  11E2  1D03               	skipz
 11001  11E3  29EE               	goto	i1l3329
 11002  11E4                     i1l3325:	
 11003                           
 11004                           ;usart_pic16.c: 107: {
 11005                           ;usart_pic16.c: 109: UQFront++;
 11006  11E4  3001               	movlw	1
 11007  11E5  00F0               	movwf	??_USARTHandleRxInt
 11008  11E6  0870               	movf	??_USARTHandleRxInt,w
 11009  11E7  1283               	bcf	3,5	;RP0=0, select bank0
 11010  11E8  1303               	bcf	3,6	;RP1=0, select bank0
 11011  11E9  07DA               	addwf	_UQFront,f	;volatile
 11012                           
 11013                           ;usart_pic16.c: 110: if(UQFront==64) UQFront=0;
 11014  11EA  3040               	movlw	64
 11015  11EB  065A               	xorwf	_UQFront,w	;volatile
 11016  11EC  1903               	btfsc	3,2
 11017  11ED  01DA               	clrf	_UQFront	;volatile
 11018  11EE                     i1l3329:	
 11019                           
 11020                           ;usart_pic16.c: 111: }
 11021                           ;usart_pic16.c: 113: if(UQEnd==64-1)
 11022  11EE  303F               	movlw	63
 11023  11EF  1283               	bcf	3,5	;RP0=0, select bank0
 11024  11F0  1303               	bcf	3,6	;RP1=0, select bank0
 11025  11F1  0659               	xorwf	_UQEnd,w	;volatile
 11026  11F2  1D03               	btfss	3,2
 11027  11F3  29F6               	goto	i1l3333
 11028                           
 11029                           ;usart_pic16.c: 114: UQEnd=0;
 11030  11F4  01D9               	clrf	_UQEnd	;volatile
 11031  11F5  29FA               	goto	i1l3335
 11032  11F6                     i1l3333:	
 11033                           
 11034                           ;usart_pic16.c: 115: else
 11035                           ;usart_pic16.c: 116: UQEnd++;
 11036  11F6  3001               	movlw	1
 11037  11F7  00F0               	movwf	??_USARTHandleRxInt
 11038  11F8  0870               	movf	??_USARTHandleRxInt,w
 11039  11F9  07D9               	addwf	_UQEnd,f	;volatile
 11040  11FA                     i1l3335:	
 11041                           
 11042                           ;usart_pic16.c: 118: URBuff[UQEnd]=data;
 11043  11FA  0874               	movf	USARTHandleRxInt@data,w
 11044  11FB  00F0               	movwf	??_USARTHandleRxInt
 11045  11FC  0859               	movf	_UQEnd,w
 11046  11FD  3E10               	addlw	(low (_URBuff| (0+256)))& (0+255)
 11047  11FE  0084               	movwf	4
 11048  11FF  0870               	movf	??_USARTHandleRxInt,w
 11049  1200  1783               	bsf	3,7	;select IRP bank2
 11050  1201  0080               	movwf	0
 11051                           
 11052                           ;usart_pic16.c: 120: if(UQFront==-1) UQFront=0;
 11053  1202  0A5A               	incf	_UQFront,w	;volatile
 11054  1203  1D03               	btfss	3,2
 11055  1204  0008               	return
 11056  1205  01DA               	clrf	_UQFront	;volatile
 11057  1206  0008               	return
 11058  1207                     __end_of_USARTHandleRxInt:	
 11059  007E                     btemp	set	126	;btemp
 11060  007E                     wtemp0	set	126


Data Sizes:
    Strings     1342
    Constant    10
    Data        5
    BSS         127
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      59
    BANK1            80     46      74
    BANK3            96     70      95
    BANK2            96     26      90

Pointer List with Targets:

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), 
		 -> STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 25
		 -> choice@duty_562(BANK3[10]), choice@duty_555(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 
		 -> content(BANK1[25]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 25
		 -> choice@duty_562(BANK3[10]), choice@duty_555(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 
		 -> content(BANK1[25]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), 
		 -> STR_41(CODE[2]), STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), 
		 -> STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 25
		 -> content(BANK1[25]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_58(CODE[27]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_60(CODE[2]), strBuffer(BANK3[25]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    memcmp@s2	PTR const void  size(2) Largest target is 10
		 -> STR_49(CODE[7]), STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[7]), 
		 -> STR_43(CODE[5]), STR_40(CODE[5]), STR_36(CODE[6]), 

    memcmp@s1	PTR const void  size(1) Largest target is 25
		 -> content(BANK1[25]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 10
		 -> choice@duty_562(BANK3[10]), choice@duty_555(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_70(CODE[3]), STR_68(CODE[3]), STR_66(CODE[3]), STR_64(CODE[3]), 
		 -> STR_62(CODE[3]), STR_59(CODE[3]), STR_53(CODE[3]), STR_52(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 25
		 -> strBuffer(BANK3[25]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i1_sprintf(BANK0[2]), ?_sprintf(BANK1[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    USARTWriteLine@str	PTR const unsigned char  size(2) Largest target is 94
		 -> STR_72(CODE[7]), STR_71(CODE[35]), status@output(BANK3[25]), STR_57(CODE[7]), 
		 -> STR_56(CODE[35]), STR_55(CODE[7]), STR_54(CODE[35]), strBuffer(BANK3[25]), 
		 -> STR_50(CODE[28]), STR_35(CODE[94]), STR_34(CODE[19]), STR_33(CODE[34]), 
		 -> STR_32(CODE[19]), STR_31(CODE[19]), STR_30(CODE[56]), STR_29(CODE[19]), 
		 -> STR_28(CODE[19]), STR_27(CODE[74]), STR_26(CODE[19]), STR_25(CODE[19]), 
		 -> STR_24(CODE[43]), STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[34]), 
		 -> STR_20(CODE[19]), STR_19(CODE[28]), STR_18(CODE[70]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[82]), STR_14(CODE[19]), STR_13(CODE[21]), 
		 -> STR_12(CODE[83]), STR_11(CODE[19]), STR_10(CODE[18]), STR_9(CODE[85]), 
		 -> STR_8(CODE[19]), STR_7(CODE[15]), STR_6(CODE[88]), STR_5(CODE[19]), 
		 -> STR_4(CODE[57]), STR_3(CODE[48]), STR_2(CODE[93]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 94
		 -> STR_72(CODE[7]), STR_71(CODE[35]), STR_69(CODE[8]), STR_67(CODE[9]), 
		 -> STR_65(CODE[9]), STR_63(CODE[22]), STR_61(CODE[22]), status@output(BANK3[25]), 
		 -> STR_57(CODE[7]), STR_56(CODE[35]), STR_55(CODE[7]), STR_54(CODE[35]), 
		 -> strBuffer(BANK3[25]), STR_51(CODE[2]), STR_50(CODE[28]), STR_35(CODE[94]), 
		 -> STR_34(CODE[19]), STR_33(CODE[34]), STR_32(CODE[19]), STR_31(CODE[19]), 
		 -> STR_30(CODE[56]), STR_29(CODE[19]), STR_28(CODE[19]), STR_27(CODE[74]), 
		 -> STR_26(CODE[19]), STR_25(CODE[19]), STR_24(CODE[43]), STR_23(CODE[19]), 
		 -> STR_22(CODE[19]), STR_21(CODE[34]), STR_20(CODE[19]), STR_19(CODE[28]), 
		 -> STR_18(CODE[70]), STR_17(CODE[19]), STR_16(CODE[19]), STR_15(CODE[82]), 
		 -> STR_14(CODE[19]), STR_13(CODE[21]), STR_12(CODE[83]), STR_11(CODE[19]), 
		 -> STR_10(CODE[18]), STR_9(CODE[85]), STR_8(CODE[19]), STR_7(CODE[15]), 
		 -> STR_6(CODE[88]), STR_5(CODE[19]), STR_4(CODE[57]), STR_3(CODE[48]), 
		 -> STR_2(CODE[93]), STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    i1_USARTWriteString->i1_USARTWriteChar
    i1_USARTGotoNewLine->i1_USARTWriteChar

Critical Paths under _main in BANK0

    _sys->___awmod
    _sys->___lwmod
    _srand->___wmul
    _rand->___lmul
    ___awmod->_rand
    _strcspn->_strchr
    ___ftdiv->___awtoft
    _set_pwm->___ftmul
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _sprintf->___lwmod
    ___lwmod->_rand
    _help->_USARTWriteLine
    _USARTWriteLine->_USARTWriteString
    _USARTWriteString->_USARTWriteChar
    _USARTGotoNewLine->_USARTWriteChar
    _atoi->___wmul

Critical Paths under _ISR in BANK0

    _ISR->i1_acquire
    i1_acquire->i1_sprintf

Critical Paths under _main in BANK1

    _main->_getData
    _getData->_choice
    _choice->_sys
    _sys->_set_pwm
    _step->_set_pwm
    _stop->_set_pwm
    _status->___fttol
    _adReadA0->_sprintf
    _run->_set_pwm
    _set_pwm->___fttol
    ___fttol->___ftmul
    _acquire->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _getData->_choice
    _choice->_status

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    _getData->_choice

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  117774
                          _USARTInit
                   _USARTWriteString
                            _getData
                               _help
                               _init
                               _stop
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getData                                              5     5      0  105258
                                             41 BANK1      5     5      0
                 _USARTDataAvailable
                      _USARTReadData
                     _USARTWriteChar
                             _choice
 ---------------------------------------------------------------------------------
 (2) _choice                                              69    69      0  105006
                                             36 BANK1      5     5      0
                                             32 BANK3     38    38      0
                                              0 BANK2     26    26      0
                   _USARTGotoNewLine
                     _USARTWriteLine
                   _USARTWriteString
                            _acquire
                               _atoi
                               _help
                             _memcmp
                                _run
                             _status
                               _step
                               _stop
                            _strcspn
                             _strlen
                                _sys
 ---------------------------------------------------------------------------------
 (3) _sys                                                  8     6      2   17432
                                             28 BANK1      8     6      2
                 _USARTDataAvailable
                   _USARTGotoNewLine
                     _USARTWriteLine
                   _USARTWriteString
                            ___awmod
                            ___lwmod
                             ___wmul
                               _atoi (ARG)
                               _rand
                           _sampling
                            _set_pwm
                            _sprintf
                              _srand
 ---------------------------------------------------------------------------------
 (4) _srand                                                2     0      2     108
                                             27 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     290
                                             34 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     290
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     741
                                             41 BANK0      1     1      0
                                              0 BANK1      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     424
                                             21 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     5      2    1181
                                             27 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               6     2      4     278
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _step                                                 6     0      6   24615
                                             28 BANK1      6     0      6
                     _USARTWriteLine
                            _acquire
                            _set_pwm
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 0     0      0    6755
                            _set_pwm
 ---------------------------------------------------------------------------------
 (3) _status                                              32    32      0   21093
                                              0 BANK3     32    32      0
                   _USARTGotoNewLine
                     _USARTWriteLine
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           _adReadA0
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               5     3      2     219
                                             21 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _strcat                                               5     3      2     363
                                             21 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _adReadA0                                             2     2      0    3673
                                             21 BANK1      2     2      0
                   _USARTWriteString
                           _sampling
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2978
                                             35 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _run                                                  2     0      2   15182
                                             28 BANK1      2     0      2
                     _USARTWriteLine
                            _acquire
                               _atoi (ARG)
                            _set_pwm
 ---------------------------------------------------------------------------------
 (2) _set_pwm                                              4     2      2    6755
                                             24 BANK1      4     2      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     525
                                             10 BANK1     14    10      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3200
                                             35 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2691
                                             29 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2404
                                             21 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _acquire                                              2     2      0    3704
                                             21 BANK1      2     2      0
                 _USARTDataAvailable
                   _USARTGotoNewLine
                   _USARTWriteString
                           _sampling
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             24    18      6    2511
                                              5 BANK1     16    10      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     540
                                             41 BANK0      1     1      0
                                              0 BANK1      5     1      4
                            ___lwdiv (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     395
                                             21 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _sampling                                             3     1      2       0
                                             21 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _USARTDataAvailable                                   1     1      0       0
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _memcmp                                               7     3      4    1470
                                             21 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _help                                                 0     0      0    4578
                   _USARTGotoNewLine
                     _USARTWriteLine
 ---------------------------------------------------------------------------------
 (2) _USARTWriteLine                                       2     0      2    4547
                                             24 BANK0      2     0      2
                     _USARTWriteChar
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2    1097
                                             22 BANK0      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (2) _USARTGotoNewLine                                     0     0      0      31
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2    1009
                                             27 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     444
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _USARTReadData                                        2     2      0      23
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      86
                                             21 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  5     5      0    1213
                                             16 BANK0      5     5      0
                   _USARTHandleRxInt
                          i1_acquire
 ---------------------------------------------------------------------------------
 (9) i1_acquire                                            2     2      0    1190
                                             14 BANK0      2     2      0
               i1_USARTDataAvailable
                 i1_USARTGotoNewLine
                 i1_USARTWriteString
                         i1_sampling
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (10) i1_sprintf                                          22    18      4     928
                                              0 BANK0     14    10      4
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (11) i1___lwmod                                           6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (10) i1_sampling                                          3     1      2       0
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (10) i1_USARTWriteString                                  2     0      2     166
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (10) i1_USARTGotoNewLine                                  0     0      0      31
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (11) i1_USARTWriteChar                                    1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_USARTDataAvailable                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTInit
   _USARTWriteString
     _USARTWriteChar
   _getData
     _USARTDataAvailable
     _USARTReadData
     _USARTWriteChar
     _choice
       _USARTGotoNewLine
         _USARTWriteChar
       _USARTWriteLine
         _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
       _USARTWriteString
         _USARTWriteChar
       _acquire
         _USARTDataAvailable
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
         _sampling
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
       _atoi
         ___wmul
         _isdigit
       _help
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
       _memcmp
       _run
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _acquire
           _USARTDataAvailable
           _USARTGotoNewLine
             _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
         _atoi (ARG)
           ___wmul
           _isdigit
         _set_pwm (ARG)
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _status
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _adReadA0
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
         _strcat
         _strcpy
       _step
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _acquire
           _USARTDataAvailable
           _USARTGotoNewLine
             _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
         _set_pwm
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
         _stop
           _set_pwm
             ___awtoft
               ___ftpack
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
       _stop
         _set_pwm
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _strcspn
         _strchr
       _strlen
       _sys
         _USARTDataAvailable
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
         ___awmod
           _rand (ARG)
             ___lmul
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
         ___wmul
         _atoi (ARG)
           ___wmul
           _isdigit
         _rand (ARG)
           ___lmul
         _sampling (ARG)
         _set_pwm (ARG)
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _sprintf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
         _srand (ARG)
           ___wmul (ARG)
   _help
     _USARTGotoNewLine
       _USARTWriteChar
     _USARTWriteLine
       _USARTWriteChar
       _USARTWriteString
         _USARTWriteChar
   _init
   _stop
     _set_pwm
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _ISR (ROOT)
   _USARTHandleRxInt
   i1_acquire
     i1_USARTDataAvailable
     i1_USARTGotoNewLine
       i1_USARTWriteChar
     i1_USARTWriteString
       i1_USARTWriteChar
     i1_sampling
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     46      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     1A      5A      11       93.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2E      4A       7       92.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     14C      12        0.0%
ABS                  0      0     14C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Nov 11 21:07:54 2018

                            pc 0002                    __CFG_CP$OFF 0000                             l31 11AC  
                           l38 1C5A                             fsr 0004            ___wmul@multiplicand 0037  
           USARTInit@baud_rate 0035                            l323 14D2                            l342 1CAB  
                          l662 134B                            l902 1DAA                            l479 1D4D  
                          l663 1353                            l655 1336           ??_USARTDataAvailable 0035  
                          l746 1451                            l856 1064                            _GIE 005F  
                          _RB1 0031                            _PR2 0092                   __CFG_CPD$OFF 0000  
                          _ISR 10E9                 ?_USARTReadData 0070                            fsr0 0004  
                          _pwm 00CE                            _run 10A5                            _sys 08F9  
                          indf 0000                   ___awmod@sign 00A5                   __CFG_FOSC$HS 0000  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 00A4  
                 ___ftdiv@sign 00A9                           l4011 1E32                           l4005 1E1F  
                         l3071 1D25                           l4031 1D45                           l4007 1E2A  
                         l3081 1D3F                           l4105 162D                           l4051 1C8E  
                         l3077 1D37                           l4215 1099                           l4311 10B7  
                         l4127 16B3                           l4119 1690                           l4231 1ED5  
                         l4063 1263                           l4225 1EAD                           l4081 1290  
                         l3291 1184                           l4219 10A2                           l4315 10C1  
                         l4227 1EB7                           l4075 1270                           l4067 126A  
                         l4331 0913                           l4411 0CC5                           l3285 117E  
                         l4245 1376                           l3701 067E                           l4237 1D8D  
                         l4077 1282                           l4085 129B                           l4421 0C3E  
                         l3287 1180                           l3295 1189                           l4263 1395  
                         l4247 136F                           l4239 1D9A                           l4423 0D3C  
                         l4415 0D13                           l4407 0CA5                           l4431 0D96  
                         l3289 1182                           l4273 13D8                           l4265 1399  
                         l4257 138F                           l4249 137B                           l4281 147C  
                         l4089 12A3                           l4337 096D                           l4361 0A10  
                         l4441 0E45                           l4267 13C7                           l3651 1308  
                         l3731 073B                           l3723 0720                           l3707 06A1  
                         l4099 160A                           l4451 0E86                           l4419 0D33  
                         l3805 1FF0                           l3821 1F19                           l4373 081B  
                         l4365 0A1D                           l4461 0F35                           l4445 0E65  
                         l4429 0D75                           l3823 1F2B                           l3831 1F44  
                         l3655 130F                           l3735 075D                           l3719 06FE  
                         l3751 13F7                           l4471 0F76                           l4447 0DDE  
                         l4527 12E6                           l3841 1DCE                           l3809 1FFB  
                         l3921 1791                           l3665 133B                           l3657 131B  
                         l4465 0F55                           l4449 0E6E                           l3827 1F39  
                         l3915 1764                           l3667 1345                           l3659 1320  
                         l3691 1DFF                           l3771 1439                           l4379 0833  
                         l4483 0FCA                           l4475 0F92                           l4467 0ECE  
                         l4651 1E6F                           l4733 1198                           l3909 175E  
                         l4469 0F5E                           l4735 119D                           l3935 17A4  
                         l3927 17A0                           l3783 1462                           l4487 0FE6  
                         l4479 0FAE                           l4737 11A2                           l3865 1D85  
                         l3857 1D78                           l3849 1D6B                           l3937 16F5  
                         l3777 1446                           l3769 1429                           l3953 102A  
                         l4489 0FF1                           l4739 11A7                           l3939 17FB  
                         l3779 1454                           l3797 1FCC                           l3893 1723  
                         l3981 07A9                           l3957 1040                           l3799 1FDA  
                         l3899 1747                           l3999 1CBD                           STR_1 0658  
                         ?_run 00BC                           STR_2 011D                           STR_3 03CD  
                         STR_4 035C                           STR_5 0527                           STR_6 017A  
                         STR_7 05F7                           STR_8 053A                           STR_9 01D2  
                         ?_sys 00BC                           u4215 133E                           u5015 1273  
                         u5105 166B                           u4315 06BB                           u5115 1691  
                         u5035 1288                           u4405 075E                           u4341 0711  
                         u4325 06D9                           u5125 16A4                           u5045 1291  
                         u4342 071C                           u4255 135A                           u4175 1314  
                         u4415 0767                           u5135 16B4                           u4505 1448  
                         u5305 10B0                           u4195 132F                           u4355 0721  
                         _PEIE 005E                           u4365 072A                           u4445 13FE  
                         u5325 0967                           u5405 0CBE                           u4615 1F1C  
                         u4391 074E                           u5095 164D                           u5415 0CFA  
                         u4392 0759                           u4545 1FCF                           u5505 0F1C  
                         u5425 0D2C                           u4635 1F31                           u4475 142A  
                         u5355 0819                           u5515 0F4E                           u5435 0C57  
                         _RCIE 0465                           _RCIF 0065                           i1l53 11C4  
                         u4565 1FDB                           u4645 1F3A                           u5365 0831  
                         u5285 1476                           u5525 0EE7                           u5605 12D6  
                         i1l38 1C50                           u4575 1FE7                           u4735 1787  
                         u4815 1042                           u4585 1FF1                           u4825 104A  
                         u5465 0E2C                           u4915 1168                           u5475 0E5E  
                         u5395 0C8C                           u5485 0DF7                           u4935 1D4E  
                         u5807 1CA5                           u4945 1D55                           _TMR0 0001  
                 __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 1C5F         __end_of_USARTWriteLine 1020  
                         _help 0A32                           _atoi 136C                           _main 1E45  
                 ___ftpack@arg 0035                           _init 1EDA                           _rand 112F  
                 ___ftpack@exp 0038                           _step 146B                           btemp 007E  
                         _stop 1C72                     i1_sampling 1C90              USARTReadData@data 0036  
                __CFG_BOREN$ON 0000                           start 0012                   ___ftmul@cntr 00A8  
                 ___ftmul@sign 00A9                          ??_ISR 0030                   ___fttol@exp1 00B7  
                 ___fttol@lval 00B3                          ??_run 004A                          ??_sys 00BE  
            ?_USARTHandleRxInt 0070                          ?_help 0070                          ?_atoi 003B  
                        ?_main 0070                          ?_init 0070                          ?_rand 0042  
           ??_USARTHandleRxInt 0070                          STR_10 05E5                          STR_11 054D  
                        STR_20 0586                          STR_12 0227                          STR_13 04B3  
                        STR_21 0428                          STR_14 0560                          STR_22 04DB  
                        STR_30 0395                          STR_23 0599                          STR_31 0501  
                        STR_15 027A                          STR_40 0647                          STR_32 05D2  
                        STR_16 04C8                          STR_24 03FD                          STR_41 064A  
                        STR_33 0428                          STR_17 0573                          STR_25 04EE  
                __CFG_WDTE$OFF 0000                          STR_34 04DB                          STR_42 060E  
                        STR_26 05AC                          STR_50 044A                          STR_18 0316  
                        STR_51 0658                          STR_43 064C                          STR_19 0466  
                        STR_27 02CC                          STR_35 011C                          STR_44 064A  
                        STR_60 0654                          STR_52 0651                          STR_36 0641  
                        STR_28 0514                __end_of___awmod 12A8                          STR_37 064A  
                        STR_45 060E                          STR_53 0651                          STR_29 05BF  
                        STR_61 049D                          STR_54 0405                          STR_70 0651  
                        STR_62 0651                          STR_38 0656                          STR_46 063A  
                        STR_63 049D                          STR_39 060E                          STR_55 063A  
                        STR_71 0405                          STR_47 0622                          STR_72 063A  
                        STR_56 0405                          STR_64 0651                          STR_48 0606  
                        STR_57 063A                          STR_49 0633                          STR_65 0610  
                        STR_66 0651                          STR_58 0482                          STR_59 0651  
                        STR_67 0619                          STR_68 0651                          STR_69 062B  
    __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 16EE                          ?_step 00BC  
             USARTWriteChar@ch 0035                          ?_stop 0070                __end_of___ftmul 07A0  
              __end_of___fttol 146B                          _T2CON 0012                __end_of___lwdiv 2000  
                        i1l342 1C98                          i1l254 10F7                          i1l255 1122  
              __end_of___lwmod 1F49                          _RCREG 001A                          _SPBRG 0099  
                        _PORTA 0005                          _PORTB 0006                          _PORTC 0007  
                        _PORTD 0008                          _TRISA 0085                          _TRISB 0086  
                        _TRISC 0087                          _TRISD 0088                          _TXREG 0019  
                        _UQEnd 0059                __end_of_acquire 07FA                __end_of_getData 12FE  
          ___lmul@multiplicand 0039                  __CFG_PWRTE$ON 0000             i1___lwmod@dividend 007A  
                ___awtoft@sign 0042                __end_of_dpowers 011C                          _count 0051  
              __end_of_isdigit 1C90                          _randx 0054                  ___ftpack@sign 0039  
                        atoi@a 0040                          _srand 1001                          atoi@s 0042  
                        pclath 000A                __end_of_set_pwm 00FD             __size_of_USARTInit 0048  
              ?_USARTWriteChar 0070                ?_USARTWriteLine 0038                          status 0003  
                        wtemp0 007E                __end_of_sprintf 1800                __end_of_strcspn 1EDA  
             i1acquire@valueAD 002E             __size_ofi1___lwdiv 003C             __size_ofi1___lwmod 0032  
           __size_ofi1_acquire 0050                __initialization 0015                   __end_of_help 0BDE  
                 __end_of_atoi 13DD                   __end_of_main 1E75                   __end_of_init 1F11  
                 __end_of_rand 1176                   __end_of_step 14FE                   __end_of_stop 1C80  
                   i1sprintf@c 002D                     i1sprintf@f 0020                ??_USARTReadData 0035  
                       ??_help 003A                         ??_atoi 003D                         ??_main 004A  
                ___fttol@sign1 00B2                         ??_init 0035                         ??_rand 0044  
                       ??_step 004A                         ??_stop 0049             __size_ofi1_sprintf 00E8  
           i1_USARTWriteString 1CFB               __end_of_adReadA0 1FC2                         _ADCON0 001F  
                       _ADCON1 009F                         _ADRESH 001E                         _ADRESL 009E  
                       _CCPR1L 0015                         _CCPR2L 001B                         ?_srand 003B  
             __end_of___awtoft 1E18               __end_of___ftpack 136C            ?i1_USARTWriteString 0071  
                       i1l3211 1CF9                         i1l3203 1CEC                         i1l3035 1F75  
                       i1l3027 1F51                         i1l3051 1E7B                         i1l3029 1F5F  
                       i1l3053 1E89                         i1l3061 1EA2                         i1l3039 1F80  
                       i1l3057 1E97                         i1l3233 152B                         i1l3333 11F6  
                       i1l3325 11E4                         i1l3317 11C5                         i1l3261 1589  
                       i1l3335 11FA                         i1l3255 1564                         i1l3239 1547  
                       i1l3329 11EE                         i1l3249 155E                         i1l3195 1CDF  
                       i1l3275 159C                         i1l3267 1598                         i1l3277 1505  
                       i1l3279 15E1                         i1l4631 111A                         i1l4545 1210  
                       i1l4499 1CFB                         _INTCON 000B                         u330_25 1F6C  
                       u331_25 1F76                         u334_25 1E7E                         u327_25 1F54  
                       u336_25 1E8F                         u329_25 1F60                         u337_25 1E98  
                       u369_25 157F                         u378_25 11E2                         u581_27 1C92  
                       u577_25 110B                    ?i1_sampling 0070                  i1sprintf@flag 0028  
                       _URBuff 0110                  i1sprintf@prec 0029              USARTWriteLine@str 0038  
            ?_USARTGotoNewLine 0070                         ___lmul 1020                         ___wmul 1D41  
                    ??___awmod 0049                      ??___ftdiv 00A0                      ??___ftmul 00A0  
                       _choice 0BDE                      ??___fttol 00AE                      ??___lwdiv 0039  
         ??i1_USARTWriteString 0073                      ??___lwmod 0049                         _buffer 00D0  
           ??_USARTGotoNewLine 0036       __end_of_USARTWriteString 1DF3                         _memcmp 1061  
                    ??_acquire 004A                ___awmod@divisor 00A0                      ??_getData 00C9  
              ___awmod@counter 00A4                 choice@duty_562 01C4                 choice@duty_555 01BA  
            __end_of_USARTInit 11BE                         _status 080C                         _strcat 1E18  
                       _strchr 1DAA                         _strcpy 1CB6                         _strlen 1D87  
        ___ftmul@f3_as_product 00A5               __end_of_sampling 1CB6              __end_ofi1___lwdiv 1F85  
            __end_ofi1___lwmod 1EA7                      ??_isdigit 0035                         saved_w 007E  
            __end_ofi1_acquire 1257                      ??_set_pwm 00BA                         srand@x 003B  
__size_ofi1_USARTDataAvailable 0023                      ??_sprintf 00AB                      ??_strcspn 003D  
      __end_of__initialization 0053              __end_ofi1_sprintf 15E6                     ___ftdiv@f1 0046  
                   ___ftdiv@f2 0043                     ___ftdiv@f3 00A5                     ___awtoft@c 003D  
                 status@output 0190                     ___ftmul@f1 0043                     ___ftmul@f2 0046  
  __size_ofi1_USARTGotoNewLine 000B                     ___fttol@f1 00AA                 __pcstackCOMMON 0070  
           i1USARTWriteChar@ch 0070                   __pidataBANK0 07FA                  __end_of_srand 100A  
             i1_USARTWriteChar 1C4F            __size_ofi1_sampling 0011                    i1sprintf@ap 0027  
                  i1sprintf@sp 002C                        ??_srand 003D                     __pbssBANK0 004A  
                   __pbssBANK1 00CE                     __pbssBANK2 0110                     __pbssBANK3 01D6  
                   __pmaintext 1E45                        ?___lmul 0035                        ?___wmul 0035  
                    ?_adReadA0 0070                        ?_choice 0070                     __pintentry 0004  
                      _CCP1CON 0017                        _CCP2CON 001D                        ?_memcmp 0035  
               ___lmul@product 003E                      ?___awtoft 003D                      ?___ftpack 0035  
                      ?_status 0070                        ?_strcat 0035                        ?_strchr 0035  
                      ?_strcpy 0035                        ?_strlen 0035    __size_of_USARTDataAvailable 0023  
             ??_USARTWriteChar 0035               ??_USARTWriteLine 003A             USARTWriteInt@F1155 004A  
    __size_of_USARTHandleRxInt 0049                     __stringtab 0100                        _UQFront 005A  
                    ?_sampling 0035                     ??_adReadA0 004A          i1USARTWriteString@str 0071  
              __size_of___lmul 0041                        ___awmod 1257                        ___ftdiv 15E6  
              __size_of___wmul 0023                        ___ftmul 065A                        ___fttol 13DD  
                      ___lwdiv 1FC2                        ___lwmod 1F11                __size_of_choice 0422  
              __size_of_memcmp 0044                        _acquire 07A0                     ??___awtoft 0040  
                   ??___ftpack 003A                        _getData 12A8                        __ptext1 1EDA  
                      __ptext2 12A8                        __ptext3 0BDE                        __ptext4 08F9  
                      __ptext5 1001                        __ptext6 112F                        __ptext7 1020  
                      __ptext8 1257                        __ptext9 1D87                __size_of_status 00ED  
              __size_of_strcat 002D                        _content 00D1                __size_of_strchr 0024  
              __size_of_strcpy 0022                __size_of_strlen 0023                   __size_of_ISR 0046  
                      _dpowers 0112              i1___lwdiv@divisor 0070                        _isdigit 1C80  
            i1___lwdiv@counter 0077                   __size_of_run 0044                   __size_of_sys 0139  
             ___awmod@dividend 00A2                        choice@i 0168                        _set_pwm 0057  
                      _sprintf 16EE                        clrloop0 1C60                        _strcspn 1EA7  
         end_of_initialization 0053                        memcmp@n 0037                     choice@duty 01B0  
                   choice@time 0150                   ??i1_sampling 0072                     ??_sampling 0037  
                      run@duty 00BC                      _RCSTAbits 0018                   __pstringtext 0100  
                      status@i 01AE                        sys@duty 00BC                        strlen@s 0035  
            ?_USARTWriteString 0036                      _PORTCbits 0007          __end_of_USARTReadData 1D41  
           ??_USARTWriteString 0038                     _stepEnable 0053             __end_ofi1_sampling 1CA1  
                    _USARTInit 1176      __size_of_USARTGotoNewLine 000B                      i1___lwdiv 1F49  
                    i1___lwmod 1E75                      i1_acquire 1207                    _CCP1CONbits 0017  
                  ___ftdiv@exp 00A8       __end_ofi1_USARTWriteChar 1C57                    _CCP2CONbits 001D  
                    _TXSTAbits 0098                    ___ftmul@exp 00A4   __end_ofi1_USARTDataAvailable 1CFB  
                    i1_sprintf 14FE                 __end_of___lmul 1061    __size_ofi1_USARTWriteString 0023  
               __end_of___wmul 1D64                 __end_of_choice 1000              i1___lwmod@divisor 0078  
               __end_of_memcmp 10A5              i1___lwmod@counter 007D                 __end_of_status 08F9  
               __end_of_strcat 1E45                 __end_of_strchr 1DCE                 __end_of_strcpy 1CD8  
               __end_of_strlen 1DAA            start_initialization 0015                     ?_USARTInit 0035  
                  __end_of_ISR 112F                    __end_of_run 10E9                    __end_of_sys 0A32  
                   ?i1___lwdiv 0070                     ?i1___lwmod 0078               _USARTHandleRxInt 11BE  
                   ?i1_acquire 0070     __end_ofi1_USARTGotoNewLine 1C72                   i1sprintf@val 002A  
                   ?i1_sprintf 0020                       ??___lmul 003D                       ??___wmul 0039  
                     ??_choice 00C4                    __pdataBANK0 0054                       ??_memcmp 0039  
                choice@secondP 0162              __size_of_adReadA0 003D                       ??_status 004A  
                     ??_strcat 0037                       ??_strchr 0039                       ??_strcpy 0037  
                     ??_strlen 0037                 set_pwm@percent 00B8              __size_of___awtoft 0025  
            __size_of___ftpack 006E                   _max_counters 004F                      ___latbits 0002  
                __pcstackBANK0 0020                  __pcstackBANK1 00A0                  __pcstackBANK2 0150  
                __pcstackBANK3 0190                    sys@max_duty 00C2                    _acquirement 0058  
                  sprintf@flag 00AF                    sprintf@prec 00B0                      __pnvBANK0 0059  
             ___lwdiv@dividend 0037                adReadA0@valueAD 00B5              __size_of_sampling 0015  
                     ?___awmod 00A0                       ?___ftdiv 0043                       ?___ftmul 0043  
                     ?___fttol 00AA                       ?___lwdiv 0035                       ?___lwmod 00A0  
   __end_of_USARTDataAvailable 1D87                       ?_acquire 0070                       ?_getData 0070  
                     ?_isdigit 0070                    ??_USARTInit 0037               _USARTGotoNewLine 0801  
                     ?_set_pwm 00B8               ___lwdiv@quotient 003B                    ??i1___lwdiv 0074  
                  ??i1___lwmod 007C           i1_USARTDataAvailable 1CD8                       ?_sprintf 00A5  
                     ?_strcspn 003B                 __size_of_srand 0009                    ??i1_acquire 007E  
            interrupt_function 0004                 ___wmul@product 0039                      clear_ram0 1C5F  
                     _PIR1bits 000C                    ??i1_sprintf 0024                      _strBuffer 01D6  
                   _ADCON0bits 001F                    __stringbase 0112              ___wmul@multiplier 0035  
        ?i1_USARTDataAvailable 0070              ___lmul@multiplier 0035      __size_of_USARTWriteString 0025  
            ?i1_USARTWriteChar 0070        __size_of_USARTWriteChar 0008        __size_of_USARTWriteLine 0016  
           ??i1_USARTWriteChar 0070                   choice@firstP 015A                   choice@duty_i 0160  
                     _adReadA0 1F85                   choice@time_1 01D4                   choice@thirdP 01CE  
     __end_of_USARTHandleRxInt 1207               __size_of___awmod 0051               __size_of___ftdiv 0108  
             __size_of___ftmul 0146               __size_of___fttol 008E                     status@duty 01AC  
             __size_of___lwdiv 003E               __size_of___lwmod 0038                       ___awtoft 1DF3  
                     ___ftpack 12FE             __end_of__stringtab 0112              choice@secondP_565 01D2  
            choice@secondP_558 01D0               __size_of_acquire 005A                    _isdigit$852 0035  
             __size_of_getData 0056                     sys@valueAD 00C0                     sprintf@val 00B1  
               acquire@valueAD 00B5                     strcat@from 0035               __size_of_isdigit 0010  
              ___lwdiv@divisor 0035                ___lwdiv@counter 003A                       __ptext10 1EA7  
                     __ptext11 1DAA                       __ptext20 0057                       __ptext12 146B  
                     __ptext21 13DD                       __ptext13 1C72                       __ptext30 1D64  
                     __ptext22 065A                       __ptext14 080C                       __ptext31 1061  
                     __ptext23 1DF3                       __ptext15 1CB6                       __ptext40 1D1E  
                     __ptext32 0A32                       __ptext24 12FE                       __ptext16 1E18  
                     __ptext41 1176                       __ptext33 100A                       __ptext25 07A0  
                     __ptext17 1F85                       __ptext50 1C4F                       __ptext42 10E9  
                     __ptext34 1DCE                       __ptext26 16EE                       __ptext18 15E6  
                     __ptext51 1CD8                       __ptext43 1207                       __ptext35 0801  
                     __ptext27 1F11                       __ptext19 10A5                       __ptext52 11BE  
                     __ptext44 14FE                       __ptext36 1C57                       __ptext28 1FC2  
                     __ptext45 1E75                       __ptext37 136C                       __ptext29 1CA1  
                     __ptext46 1F49                       __ptext38 1C80                       __ptext47 1C90  
                     __ptext39 1D41                       __ptext48 1CFB                       __ptext49 1C67  
             __size_of_set_pwm 00A6               __size_of_sprintf 0112               __size_of_strcspn 0033  
           i1___lwdiv@dividend 0072                     strcpy@from 0035               choice@firstP_563 015E  
             choice@firstP_556 015C                  __size_of_help 01AC                  __size_of_atoi 0071  
                __size_of_main 0030                  __size_of_init 0037                  __size_of_rand 0047  
                __size_of_step 0093                  __size_of_stop 000E                       getData@i 00CC  
                     getData@n 00CA         __size_of_USARTReadData 0023                       _sampling 1CA1  
   __end_ofi1_USARTWriteString 1D1E                       atoi@sign 003F             i1_USARTGotoNewLine 1C67  
           i1___lwdiv@quotient 0075                    getData@data 00CB                    choice@i_560 0164  
                  choice@i_567 0166                     _INTCONbits 000B                       memcmp@s1 003B  
                     memcmp@s2 0035         ??i1_USARTDataAvailable 0070            ?i1_USARTGotoNewLine 0070  
                     isdigit@c 0036                      status@aux 01A9                       intlevel1 0000  
                    sprintf@ap 00AE                      sprintf@sp 00B3                      strchr@chr 0037  
             ___lwmod@dividend 00A2                      strchr@ptr 0035                      strcspn@s1 0041  
                    strcspn@s2 003B                      stringcode 010A           ??i1_USARTGotoNewLine 0071  
     __end_of_USARTGotoNewLine 080C            USARTWriteString@str 0036                       step@duty 00BC  
                     step@time 00BE                     _OPTION_REG 0081                       sprintf@c 00B4  
                     sprintf@f 00A5                       strcat@cp 0039                       strcat@to 0038  
              ___lwmod@divisor 00A0                  _USARTReadData 1D1E                       strcpy@cp 0039  
                     strlen@cp 0039                       strcpy@to 0038                ___lwmod@counter 00A4  
                     strcspn@i 003F           USARTHandleRxInt@data 0074                       stringtab 0100  
           _USARTDataAvailable 1D64               _USARTWriteString 1DCE            ?_USARTDataAvailable 0070  
               _USARTWriteChar 1C57                 _USARTWriteLine 100A  
