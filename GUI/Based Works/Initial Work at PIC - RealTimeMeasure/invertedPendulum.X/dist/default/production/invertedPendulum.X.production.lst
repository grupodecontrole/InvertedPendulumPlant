

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jun 02 03:06:03 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     
    75                           ; Version 1.45
    76                           ; Generated 16/11/2017 GMT
    77                           ; 
    78                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC16F877A Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  0088                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0013                     	;# 
   190  0014                     	;# 
   191  0015                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  001D                     	;# 
   202  001E                     	;# 
   203  001F                     	;# 
   204  0081                     	;# 
   205  0085                     	;# 
   206  0086                     	;# 
   207  0087                     	;# 
   208  0088                     	;# 
   209  0089                     	;# 
   210  008C                     	;# 
   211  008D                     	;# 
   212  008E                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229                           
   230                           	psect	idataBANK0
   231  1C1F                     __pidataBANK0:	
   232                           
   233                           ;initializer for _randx
   234  1C1F  3401               	retlw	1
   235  1C20  3400               	retlw	0
   236  1C21  3400               	retlw	0
   237  1C22  3400               	retlw	0
   238                           
   239                           ;initializer for _acquirement
   240  1C23  3401               	retlw	1
   241                           
   242                           	psect	stringtext
   243  0100                     __pstringtext:	
   244  0100                     stringtab:	
   245  0100                     __stringtab:	
   246                           
   247                           ;	String table - string pointers are 2 bytes each
   248  0100  1BFF               	btfsc	btemp+1,7
   249  0101  290A               	ljmp	stringcode
   250  0102  1383               	bcf	3,7
   251  0103  187F               	btfsc	btemp+1,0
   252  0104  1783               	bsf	3,7
   253  0105  0800               	movf	0,w
   254  0106  0A84               	incf	4,f
   255  0107  1903               	skipnz
   256  0108  0AFF               	incf	btemp+1,f
   257  0109  0008               	return
   258  010A                     stringcode:	
   259  010A  087F               	movf	btemp+1,w
   260  010B  397F               	andlw	127
   261  010C  008A               	movwf	10
   262  010D  0804               	movf	4,w
   263  010E  0A84               	incf	4,f
   264  010F  1903               	skipnz
   265  0110  0AFF               	incf	btemp+1,f
   266  0111  0082               	movwf	2
   267  0112                     __stringbase:	
   268  0112                     __end_of__stringtab:	
   269  0112                     _dpowers:	
   270  0112  3401               	retlw	1
   271  0113  3400               	retlw	0
   272  0114  340A               	retlw	10
   273  0115  3400               	retlw	0
   274  0116  3464               	retlw	100
   275  0117  3400               	retlw	0
   276  0118  34E8               	retlw	232
   277  0119  3403               	retlw	3
   278  011A  3410               	retlw	16
   279  011B  3427               	retlw	39
   280  011C                     __end_of_dpowers:	
   281  011C                     STR_35:	
   282  011C  342A               	retlw	42	;'*'
   283  011D  342A               	retlw	42	;'*'
   284  011E  342A               	retlw	42	;'*'
   285  011F  342A               	retlw	42	;'*'
   286  0120  342A               	retlw	42	;'*'
   287  0121  342A               	retlw	42	;'*'
   288  0122  342A               	retlw	42	;'*'
   289  0123  342A               	retlw	42	;'*'
   290  0124  342A               	retlw	42	;'*'
   291  0125  342A               	retlw	42	;'*'
   292  0126  342A               	retlw	42	;'*'
   293  0127  342A               	retlw	42	;'*'
   294  0128  342A               	retlw	42	;'*'
   295  0129  342A               	retlw	42	;'*'
   296  012A  342A               	retlw	42	;'*'
   297  012B  342A               	retlw	42	;'*'
   298  012C  342A               	retlw	42	;'*'
   299  012D  342A               	retlw	42	;'*'
   300  012E  342A               	retlw	42	;'*'
   301  012F  342A               	retlw	42	;'*'
   302  0130  342A               	retlw	42	;'*'
   303  0131  342A               	retlw	42	;'*'
   304  0132  342A               	retlw	42	;'*'
   305  0133  342A               	retlw	42	;'*'
   306  0134  342A               	retlw	42	;'*'
   307  0135  342A               	retlw	42	;'*'
   308  0136  342A               	retlw	42	;'*'
   309  0137  342A               	retlw	42	;'*'
   310  0138  342A               	retlw	42	;'*'
   311  0139  342A               	retlw	42	;'*'
   312  013A  342A               	retlw	42	;'*'
   313  013B  342A               	retlw	42	;'*'
   314  013C  342A               	retlw	42	;'*'
   315  013D  342A               	retlw	42	;'*'
   316  013E  342A               	retlw	42	;'*'
   317  013F  342A               	retlw	42	;'*'
   318  0140  342A               	retlw	42	;'*'
   319  0141  342A               	retlw	42	;'*'
   320  0142  342A               	retlw	42	;'*'
   321  0143  342A               	retlw	42	;'*'
   322  0144  342A               	retlw	42	;'*'
   323  0145  342A               	retlw	42	;'*'
   324  0146  342A               	retlw	42	;'*'
   325  0147  342A               	retlw	42	;'*'
   326  0148  342A               	retlw	42	;'*'
   327  0149  342A               	retlw	42	;'*'
   328  014A  342A               	retlw	42	;'*'
   329  014B  342A               	retlw	42	;'*'
   330  014C  342A               	retlw	42	;'*'
   331  014D  342A               	retlw	42	;'*'
   332  014E  342A               	retlw	42	;'*'
   333  014F  342A               	retlw	42	;'*'
   334  0150  342A               	retlw	42	;'*'
   335  0151  342A               	retlw	42	;'*'
   336  0152  342A               	retlw	42	;'*'
   337  0153  342A               	retlw	42	;'*'
   338  0154  342A               	retlw	42	;'*'
   339  0155  342A               	retlw	42	;'*'
   340  0156  342A               	retlw	42	;'*'
   341  0157  342A               	retlw	42	;'*'
   342  0158  342A               	retlw	42	;'*'
   343  0159  342A               	retlw	42	;'*'
   344  015A  342A               	retlw	42	;'*'
   345  015B  342A               	retlw	42	;'*'
   346  015C  342A               	retlw	42	;'*'
   347  015D  342A               	retlw	42	;'*'
   348  015E  342A               	retlw	42	;'*'
   349  015F  342A               	retlw	42	;'*'
   350  0160  342A               	retlw	42	;'*'
   351  0161  342A               	retlw	42	;'*'
   352  0162  342A               	retlw	42	;'*'
   353  0163  342A               	retlw	42	;'*'
   354  0164  342A               	retlw	42	;'*'
   355  0165  342A               	retlw	42	;'*'
   356  0166  342A               	retlw	42	;'*'
   357  0167  342A               	retlw	42	;'*'
   358  0168  342A               	retlw	42	;'*'
   359  0169  342A               	retlw	42	;'*'
   360  016A  342A               	retlw	42	;'*'
   361  016B  342A               	retlw	42	;'*'
   362  016C  342A               	retlw	42	;'*'
   363  016D  342A               	retlw	42	;'*'
   364  016E  342A               	retlw	42	;'*'
   365  016F  342A               	retlw	42	;'*'
   366  0170  342A               	retlw	42	;'*'
   367  0171  342A               	retlw	42	;'*'
   368  0172  342A               	retlw	42	;'*'
   369  0173  342A               	retlw	42	;'*'
   370  0174  342A               	retlw	42	;'*'
   371  0175  342A               	retlw	42	;'*'
   372  0176  342A               	retlw	42	;'*'
   373  0177  342A               	retlw	42	;'*'
   374  0178  342A               	retlw	42	;'*'
   375  0179  3400               	retlw	0
   376  017A                     STR_6:	
   377  017A  3420               	retlw	32	;' '
   378  017B  3420               	retlw	32	;' '
   379  017C  3420               	retlw	32	;' '
   380  017D  3420               	retlw	32	;' '
   381  017E  3420               	retlw	32	;' '
   382  017F  3420               	retlw	32	;' '
   383  0180  3420               	retlw	32	;' '
   384  0181  3420               	retlw	32	;' '
   385  0182  3449               	retlw	73	;'I'
   386  0183  3466               	retlw	102	;'f'
   387  0184  3420               	retlw	32	;' '
   388  0185  3479               	retlw	121	;'y'
   389  0186  346F               	retlw	111	;'o'
   390  0187  3475               	retlw	117	;'u'
   391  0188  3420               	retlw	32	;' '
   392  0189  3477               	retlw	119	;'w'
   393  018A  3461               	retlw	97	;'a'
   394  018B  346E               	retlw	110	;'n'
   395  018C  3474               	retlw	116	;'t'
   396  018D  3420               	retlw	32	;' '
   397  018E  3467               	retlw	103	;'g'
   398  018F  3469               	retlw	105	;'i'
   399  0190  3476               	retlw	118	;'v'
   400  0191  3465               	retlw	101	;'e'
   401  0192  3420               	retlw	32	;' '
   402  0193  3461               	retlw	97	;'a'
   403  0194  3420               	retlw	32	;' '
   404  0195  3473               	retlw	115	;'s'
   405  0196  3474               	retlw	116	;'t'
   406  0197  3465               	retlw	101	;'e'
   407  0198  3470               	retlw	112	;'p'
   408  0199  3420               	retlw	32	;' '
   409  019A  3477               	retlw	119	;'w'
   410  019B  3469               	retlw	105	;'i'
   411  019C  3474               	retlw	116	;'t'
   412  019D  3468               	retlw	104	;'h'
   413  019E  3420               	retlw	32	;' '
   414  019F  3431               	retlw	49	;'1'
   415  01A0  3430               	retlw	48	;'0'
   416  01A1  3430               	retlw	48	;'0'
   417  01A2  3425               	retlw	37	;'%'
   418  01A3  3420               	retlw	32	;' '
   419  01A4  346F               	retlw	111	;'o'
   420  01A5  3466               	retlw	102	;'f'
   421  01A6  3420               	retlw	32	;' '
   422  01A7  3464               	retlw	100	;'d'
   423  01A8  3475               	retlw	117	;'u'
   424  01A9  3474               	retlw	116	;'t'
   425  01AA  3479               	retlw	121	;'y'
   426  01AB  342D               	retlw	45	;'-'
   427  01AC  3463               	retlw	99	;'c'
   428  01AD  3479               	retlw	121	;'y'
   429  01AE  3463               	retlw	99	;'c'
   430  01AF  346C               	retlw	108	;'l'
   431  01B0  3465               	retlw	101	;'e'
   432  01B1  342C               	retlw	44	;','
   433  01B2  3420               	retlw	32	;' '
   434  01B3  3475               	retlw	117	;'u'
   435  01B4  346E               	retlw	110	;'n'
   436  01B5  3474               	retlw	116	;'t'
   437  01B6  3469               	retlw	105	;'i'
   438  01B7  346C               	retlw	108	;'l'
   439  01B8  3420               	retlw	32	;' '
   440  01B9  3479               	retlw	121	;'y'
   441  01BA  346F               	retlw	111	;'o'
   442  01BB  3475               	retlw	117	;'u'
   443  01BC  3420               	retlw	32	;' '
   444  01BD  3474               	retlw	116	;'t'
   445  01BE  3479               	retlw	121	;'y'
   446  01BF  3470               	retlw	112	;'p'
   447  01C0  3465               	retlw	101	;'e'
   448  01C1  3420               	retlw	32	;' '
   449  01C2  3461               	retlw	97	;'a'
   450  01C3  346E               	retlw	110	;'n'
   451  01C4  3479               	retlw	121	;'y'
   452  01C5  3474               	retlw	116	;'t'
   453  01C6  3468               	retlw	104	;'h'
   454  01C7  3469               	retlw	105	;'i'
   455  01C8  346E               	retlw	110	;'n'
   456  01C9  3467               	retlw	103	;'g'
   457  01CA  342C               	retlw	44	;','
   458  01CB  3420               	retlw	32	;' '
   459  01CC  3474               	retlw	116	;'t'
   460  01CD  3479               	retlw	121	;'y'
   461  01CE  3470               	retlw	112	;'p'
   462  01CF  3465               	retlw	101	;'e'
   463  01D0  343A               	retlw	58	;':'
   464  01D1  3400               	retlw	0
   465  01D2                     STR_9:	
   466  01D2  3420               	retlw	32	;' '
   467  01D3  3420               	retlw	32	;' '
   468  01D4  3420               	retlw	32	;' '
   469  01D5  3420               	retlw	32	;' '
   470  01D6  3420               	retlw	32	;' '
   471  01D7  3420               	retlw	32	;' '
   472  01D8  3420               	retlw	32	;' '
   473  01D9  3420               	retlw	32	;' '
   474  01DA  3449               	retlw	73	;'I'
   475  01DB  3466               	retlw	102	;'f'
   476  01DC  3420               	retlw	32	;' '
   477  01DD  3479               	retlw	121	;'y'
   478  01DE  346F               	retlw	111	;'o'
   479  01DF  3475               	retlw	117	;'u'
   480  01E0  3420               	retlw	32	;' '
   481  01E1  3477               	retlw	119	;'w'
   482  01E2  3461               	retlw	97	;'a'
   483  01E3  346E               	retlw	110	;'n'
   484  01E4  3474               	retlw	116	;'t'
   485  01E5  3420               	retlw	32	;' '
   486  01E6  3467               	retlw	103	;'g'
   487  01E7  3469               	retlw	105	;'i'
   488  01E8  3476               	retlw	118	;'v'
   489  01E9  3465               	retlw	101	;'e'
   490  01EA  3420               	retlw	32	;' '
   491  01EB  3461               	retlw	97	;'a'
   492  01EC  3420               	retlw	32	;' '
   493  01ED  3473               	retlw	115	;'s'
   494  01EE  3474               	retlw	116	;'t'
   495  01EF  3465               	retlw	101	;'e'
   496  01F0  3470               	retlw	112	;'p'
   497  01F1  3420               	retlw	32	;' '
   498  01F2  3477               	retlw	119	;'w'
   499  01F3  3469               	retlw	105	;'i'
   500  01F4  3474               	retlw	116	;'t'
   501  01F5  3468               	retlw	104	;'h'
   502  01F6  3420               	retlw	32	;' '
   503  01F7  3431               	retlw	49	;'1'
   504  01F8  3430               	retlw	48	;'0'
   505  01F9  3430               	retlw	48	;'0'
   506  01FA  3425               	retlw	37	;'%'
   507  01FB  3420               	retlw	32	;' '
   508  01FC  346F               	retlw	111	;'o'
   509  01FD  3466               	retlw	102	;'f'
   510  01FE  3420               	retlw	32	;' '
   511  01FF  3464               	retlw	100	;'d'
   512  0200  3475               	retlw	117	;'u'
   513  0201  3474               	retlw	116	;'t'
   514  0202  3479               	retlw	121	;'y'
   515  0203  342D               	retlw	45	;'-'
   516  0204  3463               	retlw	99	;'c'
   517  0205  3479               	retlw	121	;'y'
   518  0206  3463               	retlw	99	;'c'
   519  0207  346C               	retlw	108	;'l'
   520  0208  3465               	retlw	101	;'e'
   521  0209  342C               	retlw	44	;','
   522  020A  3420               	retlw	32	;' '
   523  020B  3466               	retlw	102	;'f'
   524  020C  346F               	retlw	111	;'o'
   525  020D  3472               	retlw	114	;'r'
   526  020E  3420               	retlw	32	;' '
   527  020F  3432               	retlw	50	;'2'
   528  0210  3430               	retlw	48	;'0'
   529  0211  3430               	retlw	48	;'0'
   530  0212  3420               	retlw	32	;' '
   531  0213  346D               	retlw	109	;'m'
   532  0214  3469               	retlw	105	;'i'
   533  0215  346C               	retlw	108	;'l'
   534  0216  346C               	retlw	108	;'l'
   535  0217  3469               	retlw	105	;'i'
   536  0218  3473               	retlw	115	;'s'
   537  0219  3465               	retlw	101	;'e'
   538  021A  3463               	retlw	99	;'c'
   539  021B  346F               	retlw	111	;'o'
   540  021C  346E               	retlw	110	;'n'
   541  021D  3464               	retlw	100	;'d'
   542  021E  3473               	retlw	115	;'s'
   543  021F  342C               	retlw	44	;','
   544  0220  3420               	retlw	32	;' '
   545  0221  3474               	retlw	116	;'t'
   546  0222  3479               	retlw	121	;'y'
   547  0223  3470               	retlw	112	;'p'
   548  0224  3465               	retlw	101	;'e'
   549  0225  343A               	retlw	58	;':'
   550  0226  3400               	retlw	0
   551  0227                     STR_12:	
   552  0227  3420               	retlw	32	;' '
   553  0228  3420               	retlw	32	;' '
   554  0229  3420               	retlw	32	;' '
   555  022A  3420               	retlw	32	;' '
   556  022B  3420               	retlw	32	;' '
   557  022C  3420               	retlw	32	;' '
   558  022D  3420               	retlw	32	;' '
   559  022E  3420               	retlw	32	;' '
   560  022F  3449               	retlw	73	;'I'
   561  0230  3466               	retlw	102	;'f'
   562  0231  3420               	retlw	32	;' '
   563  0232  3479               	retlw	121	;'y'
   564  0233  346F               	retlw	111	;'o'
   565  0234  3475               	retlw	117	;'u'
   566  0235  3420               	retlw	32	;' '
   567  0236  3477               	retlw	119	;'w'
   568  0237  3461               	retlw	97	;'a'
   569  0238  346E               	retlw	110	;'n'
   570  0239  3474               	retlw	116	;'t'
   571  023A  3420               	retlw	32	;' '
   572  023B  3467               	retlw	103	;'g'
   573  023C  3469               	retlw	105	;'i'
   574  023D  3476               	retlw	118	;'v'
   575  023E  3465               	retlw	101	;'e'
   576  023F  3420               	retlw	32	;' '
   577  0240  3461               	retlw	97	;'a'
   578  0241  3420               	retlw	32	;' '
   579  0242  3473               	retlw	115	;'s'
   580  0243  3474               	retlw	116	;'t'
   581  0244  3465               	retlw	101	;'e'
   582  0245  3470               	retlw	112	;'p'
   583  0246  3420               	retlw	32	;' '
   584  0247  3477               	retlw	119	;'w'
   585  0248  3469               	retlw	105	;'i'
   586  0249  3474               	retlw	116	;'t'
   587  024A  3468               	retlw	104	;'h'
   588  024B  3420               	retlw	32	;' '
   589  024C  3435               	retlw	53	;'5'
   590  024D  3430               	retlw	48	;'0'
   591  024E  3425               	retlw	37	;'%'
   592  024F  3420               	retlw	32	;' '
   593  0250  346F               	retlw	111	;'o'
   594  0251  3466               	retlw	102	;'f'
   595  0252  3420               	retlw	32	;' '
   596  0253  3464               	retlw	100	;'d'
   597  0254  3475               	retlw	117	;'u'
   598  0255  3474               	retlw	116	;'t'
   599  0256  3479               	retlw	121	;'y'
   600  0257  342D               	retlw	45	;'-'
   601  0258  3463               	retlw	99	;'c'
   602  0259  3479               	retlw	121	;'y'
   603  025A  3463               	retlw	99	;'c'
   604  025B  346C               	retlw	108	;'l'
   605  025C  3465               	retlw	101	;'e'
   606  025D  342C               	retlw	44	;','
   607  025E  3466               	retlw	102	;'f'
   608  025F  346F               	retlw	111	;'o'
   609  0260  3472               	retlw	114	;'r'
   610  0261  3420               	retlw	32	;' '
   611  0262  3433               	retlw	51	;'3'
   612  0263  3430               	retlw	48	;'0'
   613  0264  3430               	retlw	48	;'0'
   614  0265  3420               	retlw	32	;' '
   615  0266  346D               	retlw	109	;'m'
   616  0267  3469               	retlw	105	;'i'
   617  0268  346C               	retlw	108	;'l'
   618  0269  346C               	retlw	108	;'l'
   619  026A  3469               	retlw	105	;'i'
   620  026B  3473               	retlw	115	;'s'
   621  026C  3465               	retlw	101	;'e'
   622  026D  3463               	retlw	99	;'c'
   623  026E  346F               	retlw	111	;'o'
   624  026F  346E               	retlw	110	;'n'
   625  0270  3464               	retlw	100	;'d'
   626  0271  3473               	retlw	115	;'s'
   627  0272  342C               	retlw	44	;','
   628  0273  3420               	retlw	32	;' '
   629  0274  3474               	retlw	116	;'t'
   630  0275  3479               	retlw	121	;'y'
   631  0276  3470               	retlw	112	;'p'
   632  0277  3465               	retlw	101	;'e'
   633  0278  343A               	retlw	58	;':'
   634  0279  3400               	retlw	0
   635  027A                     STR_15:	
   636  027A  3420               	retlw	32	;' '
   637  027B  3420               	retlw	32	;' '
   638  027C  3420               	retlw	32	;' '
   639  027D  3420               	retlw	32	;' '
   640  027E  3420               	retlw	32	;' '
   641  027F  3420               	retlw	32	;' '
   642  0280  3420               	retlw	32	;' '
   643  0281  3420               	retlw	32	;' '
   644  0282  3449               	retlw	73	;'I'
   645  0283  3466               	retlw	102	;'f'
   646  0284  3420               	retlw	32	;' '
   647  0285  3479               	retlw	121	;'y'
   648  0286  346F               	retlw	111	;'o'
   649  0287  3475               	retlw	117	;'u'
   650  0288  3420               	retlw	32	;' '
   651  0289  3477               	retlw	119	;'w'
   652  028A  3461               	retlw	97	;'a'
   653  028B  346E               	retlw	110	;'n'
   654  028C  3474               	retlw	116	;'t'
   655  028D  3420               	retlw	32	;' '
   656  028E  346F               	retlw	111	;'o'
   657  028F  3470               	retlw	112	;'p'
   658  0290  3465               	retlw	101	;'e'
   659  0291  3472               	retlw	114	;'r'
   660  0292  3461               	retlw	97	;'a'
   661  0293  3474               	retlw	116	;'t'
   662  0294  3465               	retlw	101	;'e'
   663  0295  3420               	retlw	32	;' '
   664  0296  3474               	retlw	116	;'t'
   665  0297  3468               	retlw	104	;'h'
   666  0298  3465               	retlw	101	;'e'
   667  0299  3420               	retlw	32	;' '
   668  029A  3473               	retlw	115	;'s'
   669  029B  3479               	retlw	121	;'y'
   670  029C  3473               	retlw	115	;'s'
   671  029D  3474               	retlw	116	;'t'
   672  029E  3465               	retlw	101	;'e'
   673  029F  346D               	retlw	109	;'m'
   674  02A0  3420               	retlw	32	;' '
   675  02A1  3463               	retlw	99	;'c'
   676  02A2  346F               	retlw	111	;'o'
   677  02A3  346E               	retlw	110	;'n'
   678  02A4  3474               	retlw	116	;'t'
   679  02A5  3469               	retlw	105	;'i'
   680  02A6  346E               	retlw	110	;'n'
   681  02A7  3475               	retlw	117	;'u'
   682  02A8  3461               	retlw	97	;'a'
   683  02A9  346C               	retlw	108	;'l'
   684  02AA  346C               	retlw	108	;'l'
   685  02AB  3479               	retlw	121	;'y'
   686  02AC  3420               	retlw	32	;' '
   687  02AD  3477               	retlw	119	;'w'
   688  02AE  3469               	retlw	105	;'i'
   689  02AF  3474               	retlw	116	;'t'
   690  02B0  3468               	retlw	104	;'h'
   691  02B1  3420               	retlw	32	;' '
   692  02B2  3431               	retlw	49	;'1'
   693  02B3  3430               	retlw	48	;'0'
   694  02B4  3430               	retlw	48	;'0'
   695  02B5  3425               	retlw	37	;'%'
   696  02B6  3420               	retlw	32	;' '
   697  02B7  346F               	retlw	111	;'o'
   698  02B8  3466               	retlw	102	;'f'
   699  02B9  3420               	retlw	32	;' '
   700  02BA  3464               	retlw	100	;'d'
   701  02BB  3475               	retlw	117	;'u'
   702  02BC  3474               	retlw	116	;'t'
   703  02BD  3479               	retlw	121	;'y'
   704  02BE  342D               	retlw	45	;'-'
   705  02BF  3463               	retlw	99	;'c'
   706  02C0  3479               	retlw	121	;'y'
   707  02C1  3463               	retlw	99	;'c'
   708  02C2  346C               	retlw	108	;'l'
   709  02C3  3465               	retlw	101	;'e'
   710  02C4  342C               	retlw	44	;','
   711  02C5  3420               	retlw	32	;' '
   712  02C6  3474               	retlw	116	;'t'
   713  02C7  3479               	retlw	121	;'y'
   714  02C8  3470               	retlw	112	;'p'
   715  02C9  3465               	retlw	101	;'e'
   716  02CA  343A               	retlw	58	;':'
   717  02CB  3400               	retlw	0
   718  02CC                     STR_27:	
   719  02CC  3420               	retlw	32	;' '
   720  02CD  3420               	retlw	32	;' '
   721  02CE  3420               	retlw	32	;' '
   722  02CF  3420               	retlw	32	;' '
   723  02D0  3420               	retlw	32	;' '
   724  02D1  3420               	retlw	32	;' '
   725  02D2  3420               	retlw	32	;' '
   726  02D3  3420               	retlw	32	;' '
   727  02D4  3449               	retlw	73	;'I'
   728  02D5  3466               	retlw	102	;'f'
   729  02D6  3420               	retlw	32	;' '
   730  02D7  3479               	retlw	121	;'y'
   731  02D8  346F               	retlw	111	;'o'
   732  02D9  3475               	retlw	117	;'u'
   733  02DA  3420               	retlw	32	;' '
   734  02DB  3477               	retlw	119	;'w'
   735  02DC  3461               	retlw	97	;'a'
   736  02DD  346E               	retlw	110	;'n'
   737  02DE  3474               	retlw	116	;'t'
   738  02DF  3420               	retlw	32	;' '
   739  02E0  3461               	retlw	97	;'a'
   740  02E1  3463               	retlw	99	;'c'
   741  02E2  3471               	retlw	113	;'q'
   742  02E3  3475               	retlw	117	;'u'
   743  02E4  3469               	retlw	105	;'i'
   744  02E5  3472               	retlw	114	;'r'
   745  02E6  3465               	retlw	101	;'e'
   746  02E7  3420               	retlw	32	;' '
   747  02E8  3474               	retlw	116	;'t'
   748  02E9  3468               	retlw	104	;'h'
   749  02EA  3465               	retlw	101	;'e'
   750  02EB  3420               	retlw	32	;' '
   751  02EC  3464               	retlw	100	;'d'
   752  02ED  3461               	retlw	97	;'a'
   753  02EE  3474               	retlw	116	;'t'
   754  02EF  3461               	retlw	97	;'a'
   755  02F0  3420               	retlw	32	;' '
   756  02F1  346F               	retlw	111	;'o'
   757  02F2  3462               	retlw	98	;'b'
   758  02F3  3474               	retlw	116	;'t'
   759  02F4  3461               	retlw	97	;'a'
   760  02F5  3469               	retlw	105	;'i'
   761  02F6  346E               	retlw	110	;'n'
   762  02F7  3465               	retlw	101	;'e'
   763  02F8  3464               	retlw	100	;'d'
   764  02F9  3420               	retlw	32	;' '
   765  02FA  3462               	retlw	98	;'b'
   766  02FB  3479               	retlw	121	;'y'
   767  02FC  3420               	retlw	32	;' '
   768  02FD  3473               	retlw	115	;'s'
   769  02FE  3465               	retlw	101	;'e'
   770  02FF  346E               	retlw	110	;'n'
   771  0300  3473               	retlw	115	;'s'
   772  0301  346F               	retlw	111	;'o'
   773  0302  3472               	retlw	114	;'r'
   774  0303  3473               	retlw	115	;'s'
   775  0304  3420               	retlw	32	;' '
   776  0305  346F               	retlw	111	;'o'
   777  0306  3466               	retlw	102	;'f'
   778  0307  3420               	retlw	32	;' '
   779  0308  3473               	retlw	115	;'s'
   780  0309  3479               	retlw	121	;'y'
   781  030A  3473               	retlw	115	;'s'
   782  030B  3474               	retlw	116	;'t'
   783  030C  3465               	retlw	101	;'e'
   784  030D  346D               	retlw	109	;'m'
   785  030E  342C               	retlw	44	;','
   786  030F  3420               	retlw	32	;' '
   787  0310  3474               	retlw	116	;'t'
   788  0311  3479               	retlw	121	;'y'
   789  0312  3470               	retlw	112	;'p'
   790  0313  3465               	retlw	101	;'e'
   791  0314  343A               	retlw	58	;':'
   792  0315  3400               	retlw	0
   793  0316                     STR_18:	
   794  0316  3420               	retlw	32	;' '
   795  0317  3420               	retlw	32	;' '
   796  0318  3420               	retlw	32	;' '
   797  0319  3420               	retlw	32	;' '
   798  031A  3420               	retlw	32	;' '
   799  031B  3420               	retlw	32	;' '
   800  031C  3420               	retlw	32	;' '
   801  031D  3420               	retlw	32	;' '
   802  031E  3449               	retlw	73	;'I'
   803  031F  3466               	retlw	102	;'f'
   804  0320  3420               	retlw	32	;' '
   805  0321  3479               	retlw	121	;'y'
   806  0322  346F               	retlw	111	;'o'
   807  0323  3475               	retlw	117	;'u'
   808  0324  3420               	retlw	32	;' '
   809  0325  3477               	retlw	119	;'w'
   810  0326  3461               	retlw	97	;'a'
   811  0327  346E               	retlw	110	;'n'
   812  0328  3474               	retlw	116	;'t'
   813  0329  3420               	retlw	32	;' '
   814  032A  3474               	retlw	116	;'t'
   815  032B  346F               	retlw	111	;'o'
   816  032C  3420               	retlw	32	;' '
   817  032D  3469               	retlw	105	;'i'
   818  032E  3464               	retlw	100	;'d'
   819  032F  3465               	retlw	101	;'e'
   820  0330  346E               	retlw	110	;'n'
   821  0331  3474               	retlw	116	;'t'
   822  0332  3469               	retlw	105	;'i'
   823  0333  3466               	retlw	102	;'f'
   824  0334  3479               	retlw	121	;'y'
   825  0335  3420               	retlw	32	;' '
   826  0336  3474               	retlw	116	;'t'
   827  0337  3468               	retlw	104	;'h'
   828  0338  3465               	retlw	101	;'e'
   829  0339  3420               	retlw	32	;' '
   830  033A  3473               	retlw	115	;'s'
   831  033B  3479               	retlw	121	;'y'
   832  033C  3473               	retlw	115	;'s'
   833  033D  3474               	retlw	116	;'t'
   834  033E  3465               	retlw	101	;'e'
   835  033F  346D               	retlw	109	;'m'
   836  0340  3420               	retlw	32	;' '
   837  0341  3470               	retlw	112	;'p'
   838  0342  3461               	retlw	97	;'a'
   839  0343  3472               	retlw	114	;'r'
   840  0344  3473               	retlw	115	;'s'
   841  0345  3469               	retlw	105	;'i'
   842  0346  346E               	retlw	110	;'n'
   843  0347  3467               	retlw	103	;'g'
   844  0348  3420               	retlw	32	;' '
   845  0349  3461               	retlw	97	;'a'
   846  034A  3420               	retlw	32	;' '
   847  034B  3452               	retlw	82	;'R'
   848  034C  3442               	retlw	66	;'B'
   849  034D  3453               	retlw	83	;'S'
   850  034E  3420               	retlw	32	;' '
   851  034F  3473               	retlw	115	;'s'
   852  0350  3469               	retlw	105	;'i'
   853  0351  346E               	retlw	110	;'n'
   854  0352  3461               	retlw	97	;'a'
   855  0353  346C               	retlw	108	;'l'
   856  0354  342C               	retlw	44	;','
   857  0355  3420               	retlw	32	;' '
   858  0356  3474               	retlw	116	;'t'
   859  0357  3479               	retlw	121	;'y'
   860  0358  3470               	retlw	112	;'p'
   861  0359  3465               	retlw	101	;'e'
   862  035A  343A               	retlw	58	;':'
   863  035B  3400               	retlw	0
   864  035C                     STR_4:	
   865  035C  3420               	retlw	32	;' '
   866  035D  3420               	retlw	32	;' '
   867  035E  3420               	retlw	32	;' '
   868  035F  3420               	retlw	32	;' '
   869  0360  3420               	retlw	32	;' '
   870  0361  3420               	retlw	32	;' '
   871  0362  3420               	retlw	32	;' '
   872  0363  3420               	retlw	32	;' '
   873  0364  3454               	retlw	84	;'T'
   874  0365  346F               	retlw	111	;'o'
   875  0366  3420               	retlw	32	;' '
   876  0367  346F               	retlw	111	;'o'
   877  0368  3470               	retlw	112	;'p'
   878  0369  3465               	retlw	101	;'e'
   879  036A  3472               	retlw	114	;'r'
   880  036B  3461               	retlw	97	;'a'
   881  036C  3474               	retlw	116	;'t'
   882  036D  3465               	retlw	101	;'e'
   883  036E  3420               	retlw	32	;' '
   884  036F  3474               	retlw	116	;'t'
   885  0370  3468               	retlw	104	;'h'
   886  0371  3465               	retlw	101	;'e'
   887  0372  3420               	retlw	32	;' '
   888  0373  3473               	retlw	115	;'s'
   889  0374  3479               	retlw	121	;'y'
   890  0375  3473               	retlw	115	;'s'
   891  0376  3474               	retlw	116	;'t'
   892  0377  3465               	retlw	101	;'e'
   893  0378  346D               	retlw	109	;'m'
   894  0379  342C               	retlw	44	;','
   895  037A  3420               	retlw	32	;' '
   896  037B  3474               	retlw	116	;'t'
   897  037C  3479               	retlw	121	;'y'
   898  037D  3470               	retlw	112	;'p'
   899  037E  3465               	retlw	101	;'e'
   900  037F  3420               	retlw	32	;' '
   901  0380  346F               	retlw	111	;'o'
   902  0381  346E               	retlw	110	;'n'
   903  0382  3420               	retlw	32	;' '
   904  0383  346F               	retlw	111	;'o'
   905  0384  3470               	retlw	112	;'p'
   906  0385  3474               	retlw	116	;'t'
   907  0386  3469               	retlw	105	;'i'
   908  0387  346F               	retlw	111	;'o'
   909  0388  346E               	retlw	110	;'n'
   910  0389  3473               	retlw	115	;'s'
   911  038A  3420               	retlw	32	;' '
   912  038B  3469               	retlw	105	;'i'
   913  038C  346E               	retlw	110	;'n'
   914  038D  3420               	retlw	32	;' '
   915  038E  3462               	retlw	98	;'b'
   916  038F  3465               	retlw	101	;'e'
   917  0390  346C               	retlw	108	;'l'
   918  0391  346F               	retlw	111	;'o'
   919  0392  3477               	retlw	119	;'w'
   920  0393  342E               	retlw	46	;'.'
   921  0394  3400               	retlw	0
   922  0395                     STR_30:	
   923  0395  3420               	retlw	32	;' '
   924  0396  3420               	retlw	32	;' '
   925  0397  3420               	retlw	32	;' '
   926  0398  3420               	retlw	32	;' '
   927  0399  3420               	retlw	32	;' '
   928  039A  3420               	retlw	32	;' '
   929  039B  3420               	retlw	32	;' '
   930  039C  3420               	retlw	32	;' '
   931  039D  3449               	retlw	73	;'I'
   932  039E  3466               	retlw	102	;'f'
   933  039F  3420               	retlw	32	;' '
   934  03A0  3479               	retlw	121	;'y'
   935  03A1  346F               	retlw	111	;'o'
   936  03A2  3475               	retlw	117	;'u'
   937  03A3  3420               	retlw	32	;' '
   938  03A4  3477               	retlw	119	;'w'
   939  03A5  3461               	retlw	97	;'a'
   940  03A6  346E               	retlw	110	;'n'
   941  03A7  3474               	retlw	116	;'t'
   942  03A8  3420               	retlw	32	;' '
   943  03A9  3474               	retlw	116	;'t'
   944  03AA  346F               	retlw	111	;'o'
   945  03AB  3420               	retlw	32	;' '
   946  03AC  346B               	retlw	107	;'k'
   947  03AD  346E               	retlw	110	;'n'
   948  03AE  346F               	retlw	111	;'o'
   949  03AF  3477               	retlw	119	;'w'
   950  03B0  3420               	retlw	32	;' '
   951  03B1  3474               	retlw	116	;'t'
   952  03B2  3468               	retlw	104	;'h'
   953  03B3  3465               	retlw	101	;'e'
   954  03B4  3420               	retlw	32	;' '
   955  03B5  3473               	retlw	115	;'s'
   956  03B6  3474               	retlw	116	;'t'
   957  03B7  3461               	retlw	97	;'a'
   958  03B8  3474               	retlw	116	;'t'
   959  03B9  3475               	retlw	117	;'u'
   960  03BA  3473               	retlw	115	;'s'
   961  03BB  3420               	retlw	32	;' '
   962  03BC  346F               	retlw	111	;'o'
   963  03BD  3466               	retlw	102	;'f'
   964  03BE  3420               	retlw	32	;' '
   965  03BF  3473               	retlw	115	;'s'
   966  03C0  3479               	retlw	121	;'y'
   967  03C1  3473               	retlw	115	;'s'
   968  03C2  3474               	retlw	116	;'t'
   969  03C3  3465               	retlw	101	;'e'
   970  03C4  346D               	retlw	109	;'m'
   971  03C5  342C               	retlw	44	;','
   972  03C6  3420               	retlw	32	;' '
   973  03C7  3474               	retlw	116	;'t'
   974  03C8  3479               	retlw	121	;'y'
   975  03C9  3470               	retlw	112	;'p'
   976  03CA  3465               	retlw	101	;'e'
   977  03CB  343A               	retlw	58	;':'
   978  03CC  3400               	retlw	0
   979  03CD                     STR_3:	
   980  03CD  3420               	retlw	32	;' '
   981  03CE  3420               	retlw	32	;' '
   982  03CF  3420               	retlw	32	;' '
   983  03D0  3420               	retlw	32	;' '
   984  03D1  3420               	retlw	32	;' '
   985  03D2  3420               	retlw	32	;' '
   986  03D3  3420               	retlw	32	;' '
   987  03D4  3420               	retlw	32	;' '
   988  03D5  3457               	retlw	87	;'W'
   989  03D6  3465               	retlw	101	;'e'
   990  03D7  346C               	retlw	108	;'l'
   991  03D8  3463               	retlw	99	;'c'
   992  03D9  346F               	retlw	111	;'o'
   993  03DA  346D               	retlw	109	;'m'
   994  03DB  3465               	retlw	101	;'e'
   995  03DC  3420               	retlw	32	;' '
   996  03DD  3474               	retlw	116	;'t'
   997  03DE  346F               	retlw	111	;'o'
   998  03DF  3420               	retlw	32	;' '
   999  03E0  3474               	retlw	116	;'t'
  1000  03E1  3468               	retlw	104	;'h'
  1001  03E2  3465               	retlw	101	;'e'
  1002  03E3  3420               	retlw	32	;' '
  1003  03E4  3449               	retlw	73	;'I'
  1004  03E5  346E               	retlw	110	;'n'
  1005  03E6  3476               	retlw	118	;'v'
  1006  03E7  3465               	retlw	101	;'e'
  1007  03E8  3472               	retlw	114	;'r'
  1008  03E9  3474               	retlw	116	;'t'
  1009  03EA  3465               	retlw	101	;'e'
  1010  03EB  3464               	retlw	100	;'d'
  1011  03EC  3420               	retlw	32	;' '
  1012  03ED  3450               	retlw	80	;'P'
  1013  03EE  3465               	retlw	101	;'e'
  1014  03EF  346E               	retlw	110	;'n'
  1015  03F0  3464               	retlw	100	;'d'
  1016  03F1  3475               	retlw	117	;'u'
  1017  03F2  346C               	retlw	108	;'l'
  1018  03F3  3475               	retlw	117	;'u'
  1019  03F4  346D               	retlw	109	;'m'
  1020  03F5  3420               	retlw	32	;' '
  1021  03F6  3450               	retlw	80	;'P'
  1022  03F7  346C               	retlw	108	;'l'
  1023  03F8  3461               	retlw	97	;'a'
  1024  03F9  346E               	retlw	110	;'n'
  1025  03FA  3474               	retlw	116	;'t'
  1026  03FB  3421               	retlw	33	;'!'
  1027  03FC  3400               	retlw	0
  1028  03FD                     STR_24:	
  1029  03FD  3420               	retlw	32	;' '
  1030  03FE  3420               	retlw	32	;' '
  1031  03FF  3420               	retlw	32	;' '
  1032  0400  3420               	retlw	32	;' '
  1033  0401  3420               	retlw	32	;' '
  1034  0402  3420               	retlw	32	;' '
  1035  0403  3420               	retlw	32	;' '
  1036  0404  3420               	retlw	32	;' '
  1037  0405  3449               	retlw	73	;'I'
  1038  0406  3466               	retlw	102	;'f'
  1039  0407  3420               	retlw	32	;' '
  1040  0408  3479               	retlw	121	;'y'
  1041  0409  346F               	retlw	111	;'o'
  1042  040A  3475               	retlw	117	;'u'
  1043  040B  3420               	retlw	32	;' '
  1044  040C  3477               	retlw	119	;'w'
  1045  040D  3461               	retlw	97	;'a'
  1046  040E  346E               	retlw	110	;'n'
  1047  040F  3474               	retlw	116	;'t'
  1048  0410  3420               	retlw	32	;' '
  1049  0411  3473               	retlw	115	;'s'
  1050  0412  3474               	retlw	116	;'t'
  1051  0413  346F               	retlw	111	;'o'
  1052  0414  3470               	retlw	112	;'p'
  1053  0415  3420               	retlw	32	;' '
  1054  0416  3474               	retlw	116	;'t'
  1055  0417  3468               	retlw	104	;'h'
  1056  0418  3465               	retlw	101	;'e'
  1057  0419  3420               	retlw	32	;' '
  1058  041A  3473               	retlw	115	;'s'
  1059  041B  3479               	retlw	121	;'y'
  1060  041C  3473               	retlw	115	;'s'
  1061  041D  3474               	retlw	116	;'t'
  1062  041E  3465               	retlw	101	;'e'
  1063  041F  346D               	retlw	109	;'m'
  1064  0420  342C               	retlw	44	;','
  1065  0421  3420               	retlw	32	;' '
  1066  0422  3474               	retlw	116	;'t'
  1067  0423  3479               	retlw	121	;'y'
  1068  0424  3470               	retlw	112	;'p'
  1069  0425  3465               	retlw	101	;'e'
  1070  0426  343A               	retlw	58	;':'
  1071  0427  3400               	retlw	0
  1072  0428                     STR_21:	
  1073  0428  3420               	retlw	32	;' '
  1074  0429  3420               	retlw	32	;' '
  1075  042A  3420               	retlw	32	;' '
  1076  042B  3420               	retlw	32	;' '
  1077  042C  3420               	retlw	32	;' '
  1078  042D  3420               	retlw	32	;' '
  1079  042E  3420               	retlw	32	;' '
  1080  042F  3420               	retlw	32	;' '
  1081  0430  3449               	retlw	73	;'I'
  1082  0431  3466               	retlw	102	;'f'
  1083  0432  3420               	retlw	32	;' '
  1084  0433  3479               	retlw	121	;'y'
  1085  0434  346F               	retlw	111	;'o'
  1086  0435  3475               	retlw	117	;'u'
  1087  0436  3420               	retlw	32	;' '
  1088  0437  3477               	retlw	119	;'w'
  1089  0438  3461               	retlw	97	;'a'
  1090  0439  346E               	retlw	110	;'n'
  1091  043A  3474               	retlw	116	;'t'
  1092  043B  3420               	retlw	32	;' '
  1093  043C  3461               	retlw	97	;'a'
  1094  043D  3420               	retlw	32	;' '
  1095  043E  3468               	retlw	104	;'h'
  1096  043F  3465               	retlw	101	;'e'
  1097  0440  346C               	retlw	108	;'l'
  1098  0441  3470               	retlw	112	;'p'
  1099  0442  342C               	retlw	44	;','
  1100  0443  3420               	retlw	32	;' '
  1101  0444  3474               	retlw	116	;'t'
  1102  0445  3479               	retlw	121	;'y'
  1103  0446  3470               	retlw	112	;'p'
  1104  0447  3465               	retlw	101	;'e'
  1105  0448  343A               	retlw	58	;':'
  1106  0449  3400               	retlw	0
  1107  044A                     STR_50:	
  1108  044A  3459               	retlw	89	;'Y'
  1109  044B  346F               	retlw	111	;'o'
  1110  044C  3475               	retlw	117	;'u'
  1111  044D  3420               	retlw	32	;' '
  1112  044E  3474               	retlw	116	;'t'
  1113  044F  3479               	retlw	121	;'y'
  1114  0450  3470               	retlw	112	;'p'
  1115  0451  3465               	retlw	101	;'e'
  1116  0452  3464               	retlw	100	;'d'
  1117  0453  3420               	retlw	32	;' '
  1118  0454  3473               	retlw	115	;'s'
  1119  0455  346F               	retlw	111	;'o'
  1120  0456  346D               	retlw	109	;'m'
  1121  0457  3465               	retlw	101	;'e'
  1122  0458  3474               	retlw	116	;'t'
  1123  0459  3468               	retlw	104	;'h'
  1124  045A  3469               	retlw	105	;'i'
  1125  045B  346E               	retlw	110	;'n'
  1126  045C  3467               	retlw	103	;'g'
  1127  045D  3420               	retlw	32	;' '
  1128  045E  3477               	retlw	119	;'w'
  1129  045F  3472               	retlw	114	;'r'
  1130  0460  346F               	retlw	111	;'o'
  1131  0461  346E               	retlw	110	;'n'
  1132  0462  3467               	retlw	103	;'g'
  1133  0463  342E               	retlw	46	;'.'
  1134  0464  3420               	retlw	32	;' '
  1135  0465  3400               	retlw	0
  1136  0466                     STR_19:	
  1137  0466  3420               	retlw	32	;' '
  1138  0467  3420               	retlw	32	;' '
  1139  0468  3420               	retlw	32	;' '
  1140  0469  3420               	retlw	32	;' '
  1141  046A  3420               	retlw	32	;' '
  1142  046B  3420               	retlw	32	;' '
  1143  046C  3420               	retlw	32	;' '
  1144  046D  3420               	retlw	32	;' '
  1145  046E  3473               	retlw	115	;'s'
  1146  046F  3479               	retlw	121	;'y'
  1147  0470  3473               	retlw	115	;'s'
  1148  0471  3428               	retlw	40	;'('
  1149  0472  346D               	retlw	109	;'m'
  1150  0473  3461               	retlw	97	;'a'
  1151  0474  3478               	retlw	120	;'x'
  1152  0475  345F               	retlw	95	;'_'
  1153  0476  3464               	retlw	100	;'d'
  1154  0477  3475               	retlw	117	;'u'
  1155  0478  3474               	retlw	116	;'t'
  1156  0479  3479               	retlw	121	;'y'
  1157  047A  345F               	retlw	95	;'_'
  1158  047B  3463               	retlw	99	;'c'
  1159  047C  3469               	retlw	105	;'i'
  1160  047D  3463               	retlw	99	;'c'
  1161  047E  346C               	retlw	108	;'l'
  1162  047F  3465               	retlw	101	;'e'
  1163  0480  3429               	retlw	41	;')'
  1164  0481  3400               	retlw	0
  1165  0482                     STR_58:	
  1166  0482  3454               	retlw	84	;'T'
  1167  0483  3468               	retlw	104	;'h'
  1168  0484  3465               	retlw	101	;'e'
  1169  0485  3420               	retlw	32	;' '
  1170  0486  3464               	retlw	100	;'d'
  1171  0487  3475               	retlw	117	;'u'
  1172  0488  3474               	retlw	116	;'t'
  1173  0489  3479               	retlw	121	;'y'
  1174  048A  342D               	retlw	45	;'-'
  1175  048B  3463               	retlw	99	;'c'
  1176  048C  3479               	retlw	121	;'y'
  1177  048D  3463               	retlw	99	;'c'
  1178  048E  346C               	retlw	108	;'l'
  1179  048F  3465               	retlw	101	;'e'
  1180  0490  3420               	retlw	32	;' '
  1181  0491  346F               	retlw	111	;'o'
  1182  0492  3466               	retlw	102	;'f'
  1183  0493  3420               	retlw	32	;' '
  1184  0494  3450               	retlw	80	;'P'
  1185  0495  3457               	retlw	87	;'W'
  1186  0496  344D               	retlw	77	;'M'
  1187  0497  3420               	retlw	32	;' '
  1188  0498  3469               	retlw	105	;'i'
  1189  0499  3473               	retlw	115	;'s'
  1190  049A  343A               	retlw	58	;':'
  1191  049B  3420               	retlw	32	;' '
  1192  049C  3400               	retlw	0
  1193  049D                     STR_61:	
  1194  049D  3454               	retlw	84	;'T'
  1195  049E  3468               	retlw	104	;'h'
  1196  049F  3465               	retlw	101	;'e'
  1197  04A0  3420               	retlw	32	;' '
  1198  04A1  3461               	retlw	97	;'a'
  1199  04A2  346E               	retlw	110	;'n'
  1200  04A3  3461               	retlw	97	;'a'
  1201  04A4  346C               	retlw	108	;'l'
  1202  04A5  346F               	retlw	111	;'o'
  1203  04A6  3467               	retlw	103	;'g'
  1204  04A7  3420               	retlw	32	;' '
  1205  04A8  3476               	retlw	118	;'v'
  1206  04A9  3461               	retlw	97	;'a'
  1207  04AA  346C               	retlw	108	;'l'
  1208  04AB  3475               	retlw	117	;'u'
  1209  04AC  3465               	retlw	101	;'e'
  1210  04AD  3420               	retlw	32	;' '
  1211  04AE  3469               	retlw	105	;'i'
  1212  04AF  3473               	retlw	115	;'s'
  1213  04B0  343A               	retlw	58	;':'
  1214  04B1  3420               	retlw	32	;' '
  1215  04B2  3400               	retlw	0
  1216  04B3                     STR_13:	
  1217  04B3  3420               	retlw	32	;' '
  1218  04B4  3420               	retlw	32	;' '
  1219  04B5  3420               	retlw	32	;' '
  1220  04B6  3420               	retlw	32	;' '
  1221  04B7  3420               	retlw	32	;' '
  1222  04B8  3420               	retlw	32	;' '
  1223  04B9  3420               	retlw	32	;' '
  1224  04BA  3420               	retlw	32	;' '
  1225  04BB  3473               	retlw	115	;'s'
  1226  04BC  3474               	retlw	116	;'t'
  1227  04BD  3465               	retlw	101	;'e'
  1228  04BE  3470               	retlw	112	;'p'
  1229  04BF  3428               	retlw	40	;'('
  1230  04C0  3435               	retlw	53	;'5'
  1231  04C1  3430               	retlw	48	;'0'
  1232  04C2  342C               	retlw	44	;','
  1233  04C3  3433               	retlw	51	;'3'
  1234  04C4  3430               	retlw	48	;'0'
  1235  04C5  3430               	retlw	48	;'0'
  1236  04C6  3429               	retlw	41	;')'
  1237  04C7  3400               	retlw	0
  1238  04C8                     STR_16:	
  1239  04C8  3420               	retlw	32	;' '
  1240  04C9  3420               	retlw	32	;' '
  1241  04CA  3420               	retlw	32	;' '
  1242  04CB  3420               	retlw	32	;' '
  1243  04CC  3420               	retlw	32	;' '
  1244  04CD  3420               	retlw	32	;' '
  1245  04CE  3420               	retlw	32	;' '
  1246  04CF  3420               	retlw	32	;' '
  1247  04D0  3472               	retlw	114	;'r'
  1248  04D1  3475               	retlw	117	;'u'
  1249  04D2  346E               	retlw	110	;'n'
  1250  04D3  3428               	retlw	40	;'('
  1251  04D4  3429               	retlw	41	;')'
  1252  04D5  3420               	retlw	32	;' '
  1253  04D6  3420               	retlw	32	;' '
  1254  04D7  3420               	retlw	32	;' '
  1255  04D8  3420               	retlw	32	;' '
  1256  04D9  3420               	retlw	32	;' '
  1257  04DA  3400               	retlw	0
  1258  04DB                     STR_22:	
  1259  04DB  3420               	retlw	32	;' '
  1260  04DC  3420               	retlw	32	;' '
  1261  04DD  3420               	retlw	32	;' '
  1262  04DE  3420               	retlw	32	;' '
  1263  04DF  3420               	retlw	32	;' '
  1264  04E0  3420               	retlw	32	;' '
  1265  04E1  3420               	retlw	32	;' '
  1266  04E2  3420               	retlw	32	;' '
  1267  04E3  3468               	retlw	104	;'h'
  1268  04E4  3465               	retlw	101	;'e'
  1269  04E5  346C               	retlw	108	;'l'
  1270  04E6  3470               	retlw	112	;'p'
  1271  04E7  3428               	retlw	40	;'('
  1272  04E8  3429               	retlw	41	;')'
  1273  04E9  3420               	retlw	32	;' '
  1274  04EA  3420               	retlw	32	;' '
  1275  04EB  3420               	retlw	32	;' '
  1276  04EC  3420               	retlw	32	;' '
  1277  04ED  3400               	retlw	0
  1278  04EE                     STR_25:	
  1279  04EE  3420               	retlw	32	;' '
  1280  04EF  3420               	retlw	32	;' '
  1281  04F0  3420               	retlw	32	;' '
  1282  04F1  3420               	retlw	32	;' '
  1283  04F2  3420               	retlw	32	;' '
  1284  04F3  3420               	retlw	32	;' '
  1285  04F4  3420               	retlw	32	;' '
  1286  04F5  3420               	retlw	32	;' '
  1287  04F6  3473               	retlw	115	;'s'
  1288  04F7  3474               	retlw	116	;'t'
  1289  04F8  346F               	retlw	111	;'o'
  1290  04F9  3470               	retlw	112	;'p'
  1291  04FA  3428               	retlw	40	;'('
  1292  04FB  3429               	retlw	41	;')'
  1293  04FC  3420               	retlw	32	;' '
  1294  04FD  3420               	retlw	32	;' '
  1295  04FE  3420               	retlw	32	;' '
  1296  04FF  3420               	retlw	32	;' '
  1297  0500  3400               	retlw	0
  1298  0501                     STR_31:	
  1299  0501  3420               	retlw	32	;' '
  1300  0502  3420               	retlw	32	;' '
  1301  0503  3420               	retlw	32	;' '
  1302  0504  3420               	retlw	32	;' '
  1303  0505  3420               	retlw	32	;' '
  1304  0506  3420               	retlw	32	;' '
  1305  0507  3420               	retlw	32	;' '
  1306  0508  3420               	retlw	32	;' '
  1307  0509  3473               	retlw	115	;'s'
  1308  050A  3474               	retlw	116	;'t'
  1309  050B  3461               	retlw	97	;'a'
  1310  050C  3474               	retlw	116	;'t'
  1311  050D  3475               	retlw	117	;'u'
  1312  050E  3473               	retlw	115	;'s'
  1313  050F  3428               	retlw	40	;'('
  1314  0510  3429               	retlw	41	;')'
  1315  0511  3420               	retlw	32	;' '
  1316  0512  3420               	retlw	32	;' '
  1317  0513  3400               	retlw	0
  1318  0514                     STR_28:	
  1319  0514  3420               	retlw	32	;' '
  1320  0515  3420               	retlw	32	;' '
  1321  0516  3420               	retlw	32	;' '
  1322  0517  3420               	retlw	32	;' '
  1323  0518  3420               	retlw	32	;' '
  1324  0519  3420               	retlw	32	;' '
  1325  051A  3420               	retlw	32	;' '
  1326  051B  3420               	retlw	32	;' '
  1327  051C  3461               	retlw	97	;'a'
  1328  051D  3463               	retlw	99	;'c'
  1329  051E  3471               	retlw	113	;'q'
  1330  051F  3475               	retlw	117	;'u'
  1331  0520  3469               	retlw	105	;'i'
  1332  0521  3472               	retlw	114	;'r'
  1333  0522  3465               	retlw	101	;'e'
  1334  0523  3428               	retlw	40	;'('
  1335  0524  3429               	retlw	41	;')'
  1336  0525  3420               	retlw	32	;' '
  1337  0526  3400               	retlw	0
  1338  0527                     STR_5:	
  1339  0527  3420               	retlw	32	;' '
  1340  0528  3420               	retlw	32	;' '
  1341  0529  3420               	retlw	32	;' '
  1342  052A  3420               	retlw	32	;' '
  1343  052B  3420               	retlw	32	;' '
  1344  052C  3420               	retlw	32	;' '
  1345  052D  3420               	retlw	32	;' '
  1346  052E  3420               	retlw	32	;' '
  1347  052F  3445               	retlw	69	;'E'
  1348  0530  3478               	retlw	120	;'x'
  1349  0531  3461               	retlw	97	;'a'
  1350  0532  346D               	retlw	109	;'m'
  1351  0533  3470               	retlw	112	;'p'
  1352  0534  346C               	retlw	108	;'l'
  1353  0535  3465               	retlw	101	;'e'
  1354  0536  3420               	retlw	32	;' '
  1355  0537  3430               	retlw	48	;'0'
  1356  0538  343A               	retlw	58	;':'
  1357  0539  3400               	retlw	0
  1358  053A                     STR_8:	
  1359  053A  3420               	retlw	32	;' '
  1360  053B  3420               	retlw	32	;' '
  1361  053C  3420               	retlw	32	;' '
  1362  053D  3420               	retlw	32	;' '
  1363  053E  3420               	retlw	32	;' '
  1364  053F  3420               	retlw	32	;' '
  1365  0540  3420               	retlw	32	;' '
  1366  0541  3420               	retlw	32	;' '
  1367  0542  3445               	retlw	69	;'E'
  1368  0543  3478               	retlw	120	;'x'
  1369  0544  3461               	retlw	97	;'a'
  1370  0545  346D               	retlw	109	;'m'
  1371  0546  3470               	retlw	112	;'p'
  1372  0547  346C               	retlw	108	;'l'
  1373  0548  3465               	retlw	101	;'e'
  1374  0549  3420               	retlw	32	;' '
  1375  054A  3431               	retlw	49	;'1'
  1376  054B  343A               	retlw	58	;':'
  1377  054C  3400               	retlw	0
  1378  054D                     STR_11:	
  1379  054D  3420               	retlw	32	;' '
  1380  054E  3420               	retlw	32	;' '
  1381  054F  3420               	retlw	32	;' '
  1382  0550  3420               	retlw	32	;' '
  1383  0551  3420               	retlw	32	;' '
  1384  0552  3420               	retlw	32	;' '
  1385  0553  3420               	retlw	32	;' '
  1386  0554  3420               	retlw	32	;' '
  1387  0555  3445               	retlw	69	;'E'
  1388  0556  3478               	retlw	120	;'x'
  1389  0557  3461               	retlw	97	;'a'
  1390  0558  346D               	retlw	109	;'m'
  1391  0559  3470               	retlw	112	;'p'
  1392  055A  346C               	retlw	108	;'l'
  1393  055B  3465               	retlw	101	;'e'
  1394  055C  3420               	retlw	32	;' '
  1395  055D  3432               	retlw	50	;'2'
  1396  055E  343A               	retlw	58	;':'
  1397  055F  3400               	retlw	0
  1398  0560                     STR_14:	
  1399  0560  3420               	retlw	32	;' '
  1400  0561  3420               	retlw	32	;' '
  1401  0562  3420               	retlw	32	;' '
  1402  0563  3420               	retlw	32	;' '
  1403  0564  3420               	retlw	32	;' '
  1404  0565  3420               	retlw	32	;' '
  1405  0566  3420               	retlw	32	;' '
  1406  0567  3420               	retlw	32	;' '
  1407  0568  3445               	retlw	69	;'E'
  1408  0569  3478               	retlw	120	;'x'
  1409  056A  3461               	retlw	97	;'a'
  1410  056B  346D               	retlw	109	;'m'
  1411  056C  3470               	retlw	112	;'p'
  1412  056D  346C               	retlw	108	;'l'
  1413  056E  3465               	retlw	101	;'e'
  1414  056F  3420               	retlw	32	;' '
  1415  0570  3433               	retlw	51	;'3'
  1416  0571  343A               	retlw	58	;':'
  1417  0572  3400               	retlw	0
  1418  0573                     STR_17:	
  1419  0573  3420               	retlw	32	;' '
  1420  0574  3420               	retlw	32	;' '
  1421  0575  3420               	retlw	32	;' '
  1422  0576  3420               	retlw	32	;' '
  1423  0577  3420               	retlw	32	;' '
  1424  0578  3420               	retlw	32	;' '
  1425  0579  3420               	retlw	32	;' '
  1426  057A  3420               	retlw	32	;' '
  1427  057B  3445               	retlw	69	;'E'
  1428  057C  3478               	retlw	120	;'x'
  1429  057D  3461               	retlw	97	;'a'
  1430  057E  346D               	retlw	109	;'m'
  1431  057F  3470               	retlw	112	;'p'
  1432  0580  346C               	retlw	108	;'l'
  1433  0581  3465               	retlw	101	;'e'
  1434  0582  3420               	retlw	32	;' '
  1435  0583  3434               	retlw	52	;'4'
  1436  0584  343A               	retlw	58	;':'
  1437  0585  3400               	retlw	0
  1438  0586                     STR_20:	
  1439  0586  3420               	retlw	32	;' '
  1440  0587  3420               	retlw	32	;' '
  1441  0588  3420               	retlw	32	;' '
  1442  0589  3420               	retlw	32	;' '
  1443  058A  3420               	retlw	32	;' '
  1444  058B  3420               	retlw	32	;' '
  1445  058C  3420               	retlw	32	;' '
  1446  058D  3420               	retlw	32	;' '
  1447  058E  3445               	retlw	69	;'E'
  1448  058F  3478               	retlw	120	;'x'
  1449  0590  3461               	retlw	97	;'a'
  1450  0591  346D               	retlw	109	;'m'
  1451  0592  3470               	retlw	112	;'p'
  1452  0593  346C               	retlw	108	;'l'
  1453  0594  3465               	retlw	101	;'e'
  1454  0595  3420               	retlw	32	;' '
  1455  0596  3435               	retlw	53	;'5'
  1456  0597  343A               	retlw	58	;':'
  1457  0598  3400               	retlw	0
  1458  0599                     STR_23:	
  1459  0599  3420               	retlw	32	;' '
  1460  059A  3420               	retlw	32	;' '
  1461  059B  3420               	retlw	32	;' '
  1462  059C  3420               	retlw	32	;' '
  1463  059D  3420               	retlw	32	;' '
  1464  059E  3420               	retlw	32	;' '
  1465  059F  3420               	retlw	32	;' '
  1466  05A0  3420               	retlw	32	;' '
  1467  05A1  3445               	retlw	69	;'E'
  1468  05A2  3478               	retlw	120	;'x'
  1469  05A3  3461               	retlw	97	;'a'
  1470  05A4  346D               	retlw	109	;'m'
  1471  05A5  3470               	retlw	112	;'p'
  1472  05A6  346C               	retlw	108	;'l'
  1473  05A7  3465               	retlw	101	;'e'
  1474  05A8  3420               	retlw	32	;' '
  1475  05A9  3436               	retlw	54	;'6'
  1476  05AA  343A               	retlw	58	;':'
  1477  05AB  3400               	retlw	0
  1478  05AC                     STR_26:	
  1479  05AC  3420               	retlw	32	;' '
  1480  05AD  3420               	retlw	32	;' '
  1481  05AE  3420               	retlw	32	;' '
  1482  05AF  3420               	retlw	32	;' '
  1483  05B0  3420               	retlw	32	;' '
  1484  05B1  3420               	retlw	32	;' '
  1485  05B2  3420               	retlw	32	;' '
  1486  05B3  3420               	retlw	32	;' '
  1487  05B4  3445               	retlw	69	;'E'
  1488  05B5  3478               	retlw	120	;'x'
  1489  05B6  3461               	retlw	97	;'a'
  1490  05B7  346D               	retlw	109	;'m'
  1491  05B8  3470               	retlw	112	;'p'
  1492  05B9  346C               	retlw	108	;'l'
  1493  05BA  3465               	retlw	101	;'e'
  1494  05BB  3420               	retlw	32	;' '
  1495  05BC  3437               	retlw	55	;'7'
  1496  05BD  343A               	retlw	58	;':'
  1497  05BE  3400               	retlw	0
  1498  05BF                     STR_29:	
  1499  05BF  3420               	retlw	32	;' '
  1500  05C0  3420               	retlw	32	;' '
  1501  05C1  3420               	retlw	32	;' '
  1502  05C2  3420               	retlw	32	;' '
  1503  05C3  3420               	retlw	32	;' '
  1504  05C4  3420               	retlw	32	;' '
  1505  05C5  3420               	retlw	32	;' '
  1506  05C6  3420               	retlw	32	;' '
  1507  05C7  3445               	retlw	69	;'E'
  1508  05C8  3478               	retlw	120	;'x'
  1509  05C9  3461               	retlw	97	;'a'
  1510  05CA  346D               	retlw	109	;'m'
  1511  05CB  3470               	retlw	112	;'p'
  1512  05CC  346C               	retlw	108	;'l'
  1513  05CD  3465               	retlw	101	;'e'
  1514  05CE  3420               	retlw	32	;' '
  1515  05CF  3438               	retlw	56	;'8'
  1516  05D0  343A               	retlw	58	;':'
  1517  05D1  3400               	retlw	0
  1518  05D2                     STR_32:	
  1519  05D2  3420               	retlw	32	;' '
  1520  05D3  3420               	retlw	32	;' '
  1521  05D4  3420               	retlw	32	;' '
  1522  05D5  3420               	retlw	32	;' '
  1523  05D6  3420               	retlw	32	;' '
  1524  05D7  3420               	retlw	32	;' '
  1525  05D8  3420               	retlw	32	;' '
  1526  05D9  3420               	retlw	32	;' '
  1527  05DA  3445               	retlw	69	;'E'
  1528  05DB  3478               	retlw	120	;'x'
  1529  05DC  3461               	retlw	97	;'a'
  1530  05DD  346D               	retlw	109	;'m'
  1531  05DE  3470               	retlw	112	;'p'
  1532  05DF  346C               	retlw	108	;'l'
  1533  05E0  3465               	retlw	101	;'e'
  1534  05E1  3420               	retlw	32	;' '
  1535  05E2  3439               	retlw	57	;'9'
  1536  05E3  343A               	retlw	58	;':'
  1537  05E4  3400               	retlw	0
  1538  05E5                     STR_10:	
  1539  05E5  3420               	retlw	32	;' '
  1540  05E6  3420               	retlw	32	;' '
  1541  05E7  3420               	retlw	32	;' '
  1542  05E8  3420               	retlw	32	;' '
  1543  05E9  3420               	retlw	32	;' '
  1544  05EA  3420               	retlw	32	;' '
  1545  05EB  3420               	retlw	32	;' '
  1546  05EC  3420               	retlw	32	;' '
  1547  05ED  3473               	retlw	115	;'s'
  1548  05EE  3474               	retlw	116	;'t'
  1549  05EF  3465               	retlw	101	;'e'
  1550  05F0  3470               	retlw	112	;'p'
  1551  05F1  3428               	retlw	40	;'('
  1552  05F2  3432               	retlw	50	;'2'
  1553  05F3  3430               	retlw	48	;'0'
  1554  05F4  3430               	retlw	48	;'0'
  1555  05F5  3429               	retlw	41	;')'
  1556  05F6  3400               	retlw	0
  1557  05F7                     STR_7:	
  1558  05F7  3420               	retlw	32	;' '
  1559  05F8  3420               	retlw	32	;' '
  1560  05F9  3420               	retlw	32	;' '
  1561  05FA  3420               	retlw	32	;' '
  1562  05FB  3420               	retlw	32	;' '
  1563  05FC  3420               	retlw	32	;' '
  1564  05FD  3420               	retlw	32	;' '
  1565  05FE  3420               	retlw	32	;' '
  1566  05FF  3473               	retlw	115	;'s'
  1567  0600  3474               	retlw	116	;'t'
  1568  0601  3465               	retlw	101	;'e'
  1569  0602  3470               	retlw	112	;'p'
  1570  0603  3428               	retlw	40	;'('
  1571  0604  3429               	retlw	41	;')'
  1572  0605  3400               	retlw	0
  1573  0606                     STR_48:	
  1574  0606  3461               	retlw	97	;'a'
  1575  0607  3463               	retlw	99	;'c'
  1576  0608  3471               	retlw	113	;'q'
  1577  0609  3475               	retlw	117	;'u'
  1578  060A  3469               	retlw	105	;'i'
  1579  060B  3472               	retlw	114	;'r'
  1580  060C  3465               	retlw	101	;'e'
  1581  060D  3428               	retlw	40	;'('
  1582  060E  3429               	retlw	41	;')'
  1583  060F  3400               	retlw	0
  1584  0610                     STR_65:	
  1585  0610  3441               	retlw	65	;'A'
  1586  0611  346E               	retlw	110	;'n'
  1587  0612  3461               	retlw	97	;'a'
  1588  0613  346C               	retlw	108	;'l'
  1589  0614  346F               	retlw	111	;'o'
  1590  0615  3467               	retlw	103	;'g'
  1591  0616  343A               	retlw	58	;':'
  1592  0617  3420               	retlw	32	;' '
  1593  0618  3400               	retlw	0
  1594  0619                     STR_67:	
  1595  0619  342C               	retlw	44	;','
  1596  061A  3420               	retlw	32	;' '
  1597  061B  3444               	retlw	68	;'D'
  1598  061C  3475               	retlw	117	;'u'
  1599  061D  3474               	retlw	116	;'t'
  1600  061E  3479               	retlw	121	;'y'
  1601  061F  343A               	retlw	58	;':'
  1602  0620  3420               	retlw	32	;' '
  1603  0621  3400               	retlw	0
  1604  0622                     STR_47:	
  1605  0622  3473               	retlw	115	;'s'
  1606  0623  3474               	retlw	116	;'t'
  1607  0624  3461               	retlw	97	;'a'
  1608  0625  3474               	retlw	116	;'t'
  1609  0626  3475               	retlw	117	;'u'
  1610  0627  3473               	retlw	115	;'s'
  1611  0628  3428               	retlw	40	;'('
  1612  0629  3429               	retlw	41	;')'
  1613  062A  3400               	retlw	0
  1614  062B                     STR_69:	
  1615  062B  342C               	retlw	44	;','
  1616  062C  3420               	retlw	32	;' '
  1617  062D  3450               	retlw	80	;'P'
  1618  062E  3452               	retlw	82	;'R'
  1619  062F  3432               	retlw	50	;'2'
  1620  0630  343A               	retlw	58	;':'
  1621  0631  3420               	retlw	32	;' '
  1622  0632  3400               	retlw	0
  1623  0633                     STR_49:	
  1624  0633  3468               	retlw	104	;'h'
  1625  0634  3465               	retlw	101	;'e'
  1626  0635  346C               	retlw	108	;'l'
  1627  0636  3470               	retlw	112	;'p'
  1628  0637  3428               	retlw	40	;'('
  1629  0638  3429               	retlw	41	;')'
  1630  0639  3400               	retlw	0
  1631  063A                     STR_46:	
  1632  063A  3473               	retlw	115	;'s'
  1633  063B  3474               	retlw	116	;'t'
  1634  063C  346F               	retlw	111	;'o'
  1635  063D  3470               	retlw	112	;'p'
  1636  063E  3428               	retlw	40	;'('
  1637  063F  3429               	retlw	41	;')'
  1638  0640  3400               	retlw	0
  1639  0641                     STR_36:	
  1640  0641  3473               	retlw	115	;'s'
  1641  0642  3474               	retlw	116	;'t'
  1642  0643  3465               	retlw	101	;'e'
  1643  0644  3470               	retlw	112	;'p'
  1644  0645  3428               	retlw	40	;'('
  1645  0646  3400               	retlw	0
  1646  0647                     STR_40:	
  1647  0647  3472               	retlw	114	;'r'
  1648  0648  3475               	retlw	117	;'u'
  1649  0649  346E               	retlw	110	;'n'
  1650  064A  3428               	retlw	40	;'('
  1651  064B  3400               	retlw	0
  1652  064C                     STR_43:	
  1653  064C  3473               	retlw	115	;'s'
  1654  064D  3479               	retlw	121	;'y'
  1655  064E  3473               	retlw	115	;'s'
  1656  064F  3428               	retlw	40	;'('
  1657  0650  3400               	retlw	0
  1658  0651                     STR_52:	
  1659  0651  3425               	retlw	37	;'%'
  1660  0652  3464               	retlw	100	;'d'
  1661  0653  3400               	retlw	0
  1662  0654                     STR_60:	
  1663  0654  3425               	retlw	37	;'%'
  1664  0655  3400               	retlw	0
  1665  0656                     STR_38:	
  1666  0656  342C               	retlw	44	;','
  1667  0657  3400               	retlw	0
  1668  0658                     STR_1:	
  1669  0658  343E               	retlw	62	;'>'
  1670  0659  3400               	retlw	0
  1671  04DB                     
  1672                           ; #config settings
  1673  0000                     
  1674                           	psect	nvBANK0
  1675  0059                     __pnvBANK0:	
  1676  0059                     _UQEnd:	
  1677  0059                     	ds	1
  1678  005A                     _UQFront:	
  1679  005A                     	ds	1
  1680  001E                     _ADRESH	set	30
  1681  001F                     _ADCON0bits	set	31
  1682  001D                     _CCP2CONbits	set	29
  1683  0017                     _CCP1CONbits	set	23
  1684  001B                     _CCPR2L	set	27
  1685  000B                     _INTCONbits	set	11
  1686  0012                     _T2CON	set	18
  1687  001D                     _CCP2CON	set	29
  1688  0017                     _CCP1CON	set	23
  1689  0015                     _CCPR1L	set	21
  1690  0001                     _TMR0	set	1
  1691  000B                     _INTCON	set	11
  1692  001F                     _ADCON0	set	31
  1693  0008                     _PORTD	set	8
  1694  0007                     _PORTC	set	7
  1695  0006                     _PORTB	set	6
  1696  0005                     _PORTA	set	5
  1697  001A                     _RCREG	set	26
  1698  0019                     _TXREG	set	25
  1699  000C                     _PIR1bits	set	12
  1700  0018                     _RCSTAbits	set	24
  1701  0065                     _RCIF	set	101
  1702  0031                     _RB1	set	49
  1703  005F                     _GIE	set	95
  1704  005E                     _PEIE	set	94
  1705  009E                     _ADRESL	set	158
  1706  0092                     _PR2	set	146
  1707  0081                     _OPTION_REG	set	129
  1708  009F                     _ADCON1	set	159
  1709  0088                     _TRISD	set	136
  1710  0087                     _TRISC	set	135
  1711  0086                     _TRISB	set	134
  1712  0085                     _TRISA	set	133
  1713  0098                     _TXSTAbits	set	152
  1714  0099                     _SPBRG	set	153
  1715  0465                     _RCIE	set	1125
  1716                           
  1717                           	psect	cinit
  1718  0015                     start_initialization:	
  1719  0015                     __initialization:	
  1720                           
  1721                           ; Initialize objects allocated to BANK0
  1722  0015  160A  158A  241F  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1723  001A  00D4               	movwf	__pdataBANK0& (0+127)
  1724  001B  160A  158A  2420  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
  1725  0020  00D5               	movwf	(__pdataBANK0+1)& (0+127)
  1726  0021  160A  158A  2421  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
  1727  0026  00D6               	movwf	(__pdataBANK0+2)& (0+127)
  1728  0027  160A  158A  2422  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
  1729  002C  00D7               	movwf	(__pdataBANK0+3)& (0+127)
  1730  002D  160A  158A  2423  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
  1731  0032  00D8               	movwf	(__pdataBANK0+4)& (0+127)
  1732                           
  1733                           ; Clear objects allocated to BANK3
  1734  0033  1783               	bsf	3,7	;select IRP bank2
  1735  0034  30D6               	movlw	low __pbssBANK3
  1736  0035  0084               	movwf	4
  1737  0036  30EF               	movlw	low (__pbssBANK3+25)
  1738  0037  160A  158A  2434  120A  118A  	fcall	clear_ram0
  1739                           
  1740                           ; Clear objects allocated to BANK2
  1741  003C  3010               	movlw	low __pbssBANK2
  1742  003D  0084               	movwf	4
  1743  003E  3050               	movlw	low (__pbssBANK2+64)
  1744  003F  160A  158A  2434  120A  118A  	fcall	clear_ram0
  1745                           
  1746                           ; Clear objects allocated to BANK1
  1747  0044  1383               	bcf	3,7	;select IRP bank0
  1748  0045  30CE               	movlw	low __pbssBANK1
  1749  0046  0084               	movwf	4
  1750  0047  30EA               	movlw	low (__pbssBANK1+28)
  1751  0048  160A  158A  2434  120A  118A  	fcall	clear_ram0
  1752                           
  1753                           ; Clear objects allocated to BANK0
  1754  004D  304A               	movlw	low __pbssBANK0
  1755  004E  0084               	movwf	4
  1756  004F  3054               	movlw	low (__pbssBANK0+10)
  1757  0050  160A  158A  2434   	fcall	clear_ram0
  1758  0053                     end_of_initialization:	
  1759                           ;End of C runtime variable initialization code
  1760                           
  1761  0053                     __end_of__initialization:	
  1762  0053  0183               	clrf	3
  1763  0054  160A  158A  2E06   	ljmp	_main	;jump to C main() function
  1764                           
  1765                           	psect	bssBANK0
  1766  004A                     __pbssBANK0:	
  1767  004A                     USARTWriteInt@F1155:	
  1768  004A                     	ds	5
  1769  004F                     _max_counters:	
  1770  004F                     	ds	2
  1771  0051                     _count:	
  1772  0051                     	ds	2
  1773  0053                     _stepEnable:	
  1774  0053                     	ds	1
  1775                           
  1776                           	psect	dataBANK0
  1777  0054                     __pdataBANK0:	
  1778  0054                     _randx:	
  1779  0054                     	ds	4
  1780  0058                     _acquirement:	
  1781  0058                     	ds	1
  1782                           
  1783                           	psect	bssBANK1
  1784  00CE                     __pbssBANK1:	
  1785  00CE                     _pwm:	
  1786  00CE                     	ds	2
  1787  00D0                     _buffer:	
  1788  00D0                     	ds	1
  1789  00D1                     _content:	
  1790  00D1                     	ds	25
  1791                           
  1792                           	psect	bssBANK3
  1793  01D6                     __pbssBANK3:	
  1794  01D6                     _strBuffer:	
  1795  01D6                     	ds	25
  1796                           
  1797                           	psect	bssBANK2
  1798  0110                     __pbssBANK2:	
  1799  0110                     _URBuff:	
  1800  0110                     	ds	64
  1801                           
  1802                           	psect	clrtext
  1803  1C34                     clear_ram0:	
  1804                           ;	Called with FSR containing the base address, and
  1805                           ;	W with the last address+1
  1806                           
  1807  1C34  0064               	clrwdt	;clear the watchdog before getting into this loop
  1808  1C35                     clrloop0:	
  1809  1C35  0180               	clrf	0	;clear RAM location pointed to by FSR
  1810  1C36  0A84               	incf	4,f	;increment pointer
  1811  1C37  0604               	xorwf	4,w	;XOR with final address
  1812  1C38  1903               	btfsc	3,2	;have we reached the end yet?
  1813  1C39  3400               	retlw	0	;all done for this memory range, return
  1814  1C3A  0604               	xorwf	4,w	;XOR again to restore value
  1815  1C3B  2C35               	goto	clrloop0	;do the next byte
  1816                           
  1817                           	psect	cstackBANK3
  1818  0190                     __pcstackBANK3:	
  1819  0190                     status@output:	
  1820                           
  1821                           ; 25 bytes @ 0x0
  1822  0190                     	ds	25
  1823  01A9                     status@aux:	
  1824                           
  1825                           ; 3 bytes @ 0x19
  1826  01A9                     	ds	3
  1827  01AC                     status@duty:	
  1828                           
  1829                           ; 2 bytes @ 0x1C
  1830  01AC                     	ds	2
  1831  01AE                     status@i:	
  1832                           
  1833                           ; 2 bytes @ 0x1E
  1834  01AE                     	ds	2
  1835  01B0                     choice@duty:	
  1836                           
  1837                           ; 10 bytes @ 0x20
  1838  01B0                     	ds	10
  1839  01BA                     choice@duty_534:	
  1840                           
  1841                           ; 10 bytes @ 0x2A
  1842  01BA                     	ds	10
  1843  01C4                     choice@duty_541:	
  1844                           
  1845                           ; 10 bytes @ 0x34
  1846  01C4                     	ds	10
  1847  01CE                     choice@thirdP:	
  1848                           
  1849                           ; 2 bytes @ 0x3E
  1850  01CE                     	ds	2
  1851  01D0                     choice@secondP_537:	
  1852                           
  1853                           ; 2 bytes @ 0x40
  1854  01D0                     	ds	2
  1855  01D2                     choice@secondP_544:	
  1856                           
  1857                           ; 2 bytes @ 0x42
  1858  01D2                     	ds	2
  1859  01D4                     choice@time_1:	
  1860                           
  1861                           ; 2 bytes @ 0x44
  1862  01D4                     	ds	2
  1863                           
  1864                           	psect	cstackBANK2
  1865  0150                     __pcstackBANK2:	
  1866  0150                     choice@time:	
  1867                           
  1868                           ; 10 bytes @ 0x0
  1869  0150                     	ds	10
  1870  015A                     choice@firstP:	
  1871                           
  1872                           ; 2 bytes @ 0xA
  1873  015A                     	ds	2
  1874  015C                     choice@firstP_535:	
  1875                           
  1876                           ; 2 bytes @ 0xC
  1877  015C                     	ds	2
  1878  015E                     choice@firstP_542:	
  1879                           
  1880                           ; 2 bytes @ 0xE
  1881  015E                     	ds	2
  1882  0160                     choice@duty_i:	
  1883                           
  1884                           ; 2 bytes @ 0x10
  1885  0160                     	ds	2
  1886  0162                     choice@secondP:	
  1887                           
  1888                           ; 2 bytes @ 0x12
  1889  0162                     	ds	2
  1890  0164                     choice@i_539:	
  1891                           
  1892                           ; 2 bytes @ 0x14
  1893  0164                     	ds	2
  1894  0166                     choice@i_546:	
  1895                           
  1896                           ; 2 bytes @ 0x16
  1897  0166                     	ds	2
  1898  0168                     choice@i:	
  1899                           
  1900                           ; 2 bytes @ 0x18
  1901  0168                     	ds	2
  1902                           
  1903                           	psect	cstackBANK1
  1904  00A0                     __pcstackBANK1:	
  1905  00A0                     ??_sprintf:	
  1906  00A0                     ??___ftdiv:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  00A0                     ??___ftmul:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  00A0                     ?___awmod:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915  00A0                     ___awmod@divisor:	
  1916                           ; 2 bytes @ 0x0
  1917                           
  1918                           
  1919                           ; 2 bytes @ 0x0
  1920  00A0                     	ds	2
  1921  00A2                     ___awmod@dividend:	
  1922                           
  1923                           ; 2 bytes @ 0x2
  1924  00A2                     	ds	1
  1925  00A3                     sprintf@ap:	
  1926                           
  1927                           ; 1 bytes @ 0x3
  1928  00A3                     	ds	1
  1929  00A4                     sprintf@flag:	
  1930  00A4                     ___awmod@counter:	
  1931                           ; 1 bytes @ 0x4
  1932                           
  1933  00A4                     ___ftdiv@cntr:	
  1934                           ; 1 bytes @ 0x4
  1935                           
  1936  00A4                     ___ftmul@exp:	
  1937                           ; 1 bytes @ 0x4
  1938                           
  1939                           
  1940                           ; 1 bytes @ 0x4
  1941  00A4                     	ds	1
  1942  00A5                     sprintf@prec:	
  1943  00A5                     ___awmod@sign:	
  1944                           ; 1 bytes @ 0x5
  1945                           
  1946  00A5                     ___ftdiv@f3:	
  1947                           ; 1 bytes @ 0x5
  1948                           
  1949  00A5                     ___ftmul@f3_as_product:	
  1950                           ; 3 bytes @ 0x5
  1951                           
  1952                           
  1953                           ; 3 bytes @ 0x5
  1954  00A5                     	ds	1
  1955  00A6                     sprintf@val:	
  1956                           
  1957                           ; 2 bytes @ 0x6
  1958  00A6                     	ds	2
  1959  00A8                     sprintf@sp:	
  1960  00A8                     ___ftdiv@exp:	
  1961                           ; 1 bytes @ 0x8
  1962                           
  1963  00A8                     ___ftmul@cntr:	
  1964                           ; 1 bytes @ 0x8
  1965                           
  1966                           
  1967                           ; 1 bytes @ 0x8
  1968  00A8                     	ds	1
  1969  00A9                     sprintf@c:	
  1970  00A9                     ___ftdiv@sign:	
  1971                           ; 1 bytes @ 0x9
  1972                           
  1973  00A9                     ___ftmul@sign:	
  1974                           ; 1 bytes @ 0x9
  1975                           
  1976                           
  1977                           ; 1 bytes @ 0x9
  1978  00A9                     	ds	1
  1979  00AA                     ?___fttol:	
  1980  00AA                     acquire@valueAD:	
  1981                           ; 4 bytes @ 0xA
  1982                           
  1983  00AA                     adReadA0@valueAD:	
  1984                           ; 2 bytes @ 0xA
  1985                           
  1986  00AA                     ___fttol@f1:	
  1987                           ; 2 bytes @ 0xA
  1988                           
  1989                           
  1990                           ; 3 bytes @ 0xA
  1991  00AA                     	ds	4
  1992  00AE                     ??___fttol:	
  1993                           
  1994                           ; 1 bytes @ 0xE
  1995  00AE                     	ds	4
  1996  00B2                     ___fttol@sign1:	
  1997                           
  1998                           ; 1 bytes @ 0x12
  1999  00B2                     	ds	1
  2000  00B3                     ___fttol@lval:	
  2001                           
  2002                           ; 4 bytes @ 0x13
  2003  00B3                     	ds	4
  2004  00B7                     ___fttol@exp1:	
  2005                           
  2006                           ; 1 bytes @ 0x17
  2007  00B7                     	ds	1
  2008  00B8                     ?_set_pwm:	
  2009  00B8                     set_pwm@percent:	
  2010                           ; 1 bytes @ 0x18
  2011                           
  2012                           
  2013                           ; 2 bytes @ 0x18
  2014  00B8                     	ds	2
  2015  00BA                     ??_set_pwm:	
  2016                           
  2017                           ; 1 bytes @ 0x1A
  2018  00BA                     	ds	2
  2019  00BC                     ?_step:	
  2020  00BC                     ?_run:	
  2021                           ; 1 bytes @ 0x1C
  2022                           
  2023  00BC                     ?_sys:	
  2024                           ; 1 bytes @ 0x1C
  2025                           
  2026  00BC                     step@duty:	
  2027                           ; 1 bytes @ 0x1C
  2028                           
  2029  00BC                     run@duty:	
  2030                           ; 2 bytes @ 0x1C
  2031                           
  2032  00BC                     sys@duty:	
  2033                           ; 2 bytes @ 0x1C
  2034                           
  2035                           
  2036                           ; 2 bytes @ 0x1C
  2037  00BC                     	ds	2
  2038  00BE                     ??_sys:	
  2039  00BE                     step@time:	
  2040                           ; 1 bytes @ 0x1E
  2041                           
  2042                           
  2043                           ; 4 bytes @ 0x1E
  2044  00BE                     	ds	2
  2045  00C0                     sys@valueAD:	
  2046                           
  2047                           ; 2 bytes @ 0x20
  2048  00C0                     	ds	2
  2049  00C2                     sys@max_duty:	
  2050                           
  2051                           ; 2 bytes @ 0x22
  2052  00C2                     	ds	2
  2053  00C4                     ??_choice:	
  2054                           
  2055                           ; 1 bytes @ 0x24
  2056  00C4                     	ds	5
  2057  00C9                     ??_getData:	
  2058                           
  2059                           ; 1 bytes @ 0x29
  2060  00C9                     	ds	1
  2061  00CA                     getData@n:	
  2062                           
  2063                           ; 1 bytes @ 0x2A
  2064  00CA                     	ds	1
  2065  00CB                     getData@data:	
  2066                           
  2067                           ; 1 bytes @ 0x2B
  2068  00CB                     	ds	1
  2069  00CC                     getData@i:	
  2070                           
  2071                           ; 2 bytes @ 0x2C
  2072  00CC                     	ds	2
  2073                           
  2074                           	psect	cstackCOMMON
  2075  0070                     __pcstackCOMMON:	
  2076  0070                     ?_isdigit:	
  2077  0070                     ?_acquire:	
  2078                           ; 1 bit 
  2079                           
  2080  0070                     ?_stop:	
  2081                           ; 1 bytes @ 0x0
  2082                           
  2083  0070                     ?_help:	
  2084                           ; 1 bytes @ 0x0
  2085                           
  2086  0070                     ?_getData:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0070                     ?_choice:	
  2090                           ; 1 bytes @ 0x0
  2091                           
  2092  0070                     ?_status:	
  2093                           ; 1 bytes @ 0x0
  2094                           
  2095  0070                     ?_adReadA0:	
  2096                           ; 1 bytes @ 0x0
  2097                           
  2098  0070                     ?_USARTWriteChar:	
  2099                           ; 1 bytes @ 0x0
  2100                           
  2101  0070                     ?_USARTHandleRxInt:	
  2102                           ; 1 bytes @ 0x0
  2103                           
  2104  0070                     ??_USARTHandleRxInt:	
  2105                           ; 1 bytes @ 0x0
  2106                           
  2107  0070                     ?_USARTReadData:	
  2108                           ; 1 bytes @ 0x0
  2109                           
  2110  0070                     ?_USARTDataAvailable:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0070                     ?_USARTGotoNewLine:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0070                     ?_init:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0070                     ?_ISR:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0070                     ?_main:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0070                     ?i1_USARTWriteChar:	
  2126                           ; 1 bytes @ 0x0
  2127                           
  2128  0070                     ??i1_USARTWriteChar:	
  2129                           ; 1 bytes @ 0x0
  2130                           
  2131  0070                     ?i1_USARTDataAvailable:	
  2132                           ; 1 bytes @ 0x0
  2133                           
  2134  0070                     ??i1_USARTDataAvailable:	
  2135                           ; 1 bytes @ 0x0
  2136                           
  2137  0070                     ?i1_USARTGotoNewLine:	
  2138                           ; 1 bytes @ 0x0
  2139                           
  2140  0070                     ?i1_acquire:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0070                     ?i1_sampling:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0070                     ?i1___lwdiv:	
  2147                           ; 2 bytes @ 0x0
  2148                           
  2149  0070                     i1USARTWriteChar@ch:	
  2150                           ; 2 bytes @ 0x0
  2151                           
  2152  0070                     i1___lwdiv@divisor:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155                           
  2156                           ; 2 bytes @ 0x0
  2157  0070                     	ds	1
  2158  0071                     ?i1_USARTWriteString:	
  2159  0071                     ??i1_USARTGotoNewLine:	
  2160                           ; 1 bytes @ 0x1
  2161                           
  2162  0071                     i1USARTWriteString@str:	
  2163                           ; 1 bytes @ 0x1
  2164                           
  2165                           
  2166                           ; 2 bytes @ 0x1
  2167  0071                     	ds	1
  2168  0072                     ??i1_sampling:	
  2169  0072                     i1___lwdiv@dividend:	
  2170                           ; 1 bytes @ 0x2
  2171                           
  2172                           
  2173                           ; 2 bytes @ 0x2
  2174  0072                     	ds	1
  2175  0073                     ??i1_USARTWriteString:	
  2176                           
  2177                           ; 1 bytes @ 0x3
  2178  0073                     	ds	1
  2179  0074                     ??i1___lwdiv:	
  2180  0074                     USARTHandleRxInt@data:	
  2181                           ; 1 bytes @ 0x4
  2182                           
  2183                           
  2184                           ; 1 bytes @ 0x4
  2185  0074                     	ds	1
  2186  0075                     i1___lwdiv@quotient:	
  2187                           
  2188                           ; 2 bytes @ 0x5
  2189  0075                     	ds	2
  2190  0077                     i1___lwdiv@counter:	
  2191                           
  2192                           ; 1 bytes @ 0x7
  2193  0077                     	ds	1
  2194  0078                     ?i1___lwmod:	
  2195  0078                     i1___lwmod@divisor:	
  2196                           ; 2 bytes @ 0x8
  2197                           
  2198                           
  2199                           ; 2 bytes @ 0x8
  2200  0078                     	ds	2
  2201  007A                     i1___lwmod@dividend:	
  2202                           
  2203                           ; 2 bytes @ 0xA
  2204  007A                     	ds	2
  2205  007C                     ??i1___lwmod:	
  2206                           
  2207                           ; 1 bytes @ 0xC
  2208  007C                     	ds	1
  2209  007D                     i1___lwmod@counter:	
  2210                           
  2211                           ; 1 bytes @ 0xD
  2212  007D                     	ds	1
  2213  007E                     ??i1_acquire:	
  2214                           
  2215                           	psect	cstackBANK0
  2216  0020                     __pcstackBANK0:	
  2217                           ; 1 bytes @ 0xE
  2218                           
  2219  0020                     ?i1_sprintf:	
  2220  0020                     i1sprintf@f:	
  2221                           ; 2 bytes @ 0x0
  2222                           
  2223                           
  2224                           ; 2 bytes @ 0x0
  2225  0020                     	ds	4
  2226  0024                     ??i1_sprintf:	
  2227                           
  2228                           ; 1 bytes @ 0x4
  2229  0024                     	ds	3
  2230  0027                     i1sprintf@ap:	
  2231                           
  2232                           ; 1 bytes @ 0x7
  2233  0027                     	ds	1
  2234  0028                     i1sprintf@flag:	
  2235                           
  2236                           ; 1 bytes @ 0x8
  2237  0028                     	ds	1
  2238  0029                     i1sprintf@prec:	
  2239                           
  2240                           ; 1 bytes @ 0x9
  2241  0029                     	ds	1
  2242  002A                     i1sprintf@val:	
  2243                           
  2244                           ; 2 bytes @ 0xA
  2245  002A                     	ds	2
  2246  002C                     i1sprintf@sp:	
  2247                           
  2248                           ; 1 bytes @ 0xC
  2249  002C                     	ds	1
  2250  002D                     i1sprintf@c:	
  2251                           
  2252                           ; 1 bytes @ 0xD
  2253  002D                     	ds	1
  2254  002E                     i1acquire@valueAD:	
  2255                           
  2256                           ; 2 bytes @ 0xE
  2257  002E                     	ds	2
  2258  0030                     ??_ISR:	
  2259                           
  2260                           ; 1 bytes @ 0x10
  2261  0030                     	ds	5
  2262  0035                     ?_strcpy:	
  2263  0035                     ?_strcat:	
  2264                           ; 1 bytes @ 0x15
  2265                           
  2266  0035                     ??_isdigit:	
  2267                           ; 1 bytes @ 0x15
  2268                           
  2269  0035                     ?_USARTInit:	
  2270                           ; 1 bytes @ 0x15
  2271                           
  2272  0035                     ??_USARTWriteChar:	
  2273                           ; 1 bytes @ 0x15
  2274                           
  2275  0035                     ??_USARTReadData:	
  2276                           ; 1 bytes @ 0x15
  2277                           
  2278  0035                     ??_USARTDataAvailable:	
  2279                           ; 1 bytes @ 0x15
  2280                           
  2281  0035                     ??_init:	
  2282                           ; 1 bytes @ 0x15
  2283                           
  2284  0035                     ?_memcmp:	
  2285                           ; 1 bytes @ 0x15
  2286                           
  2287  0035                     ?_strlen:	
  2288                           ; 2 bytes @ 0x15
  2289                           
  2290  0035                     ?_strchr:	
  2291                           ; 2 bytes @ 0x15
  2292                           
  2293  0035                     ?_sampling:	
  2294                           ; 2 bytes @ 0x15
  2295                           
  2296  0035                     ?___wmul:	
  2297                           ; 2 bytes @ 0x15
  2298                           
  2299  0035                     ?___lwdiv:	
  2300                           ; 2 bytes @ 0x15
  2301                           
  2302  0035                     ?___ftpack:	
  2303                           ; 2 bytes @ 0x15
  2304                           
  2305  0035                     ?___lmul:	
  2306                           ; 3 bytes @ 0x15
  2307                           
  2308  0035                     USARTWriteChar@ch:	
  2309                           ; 4 bytes @ 0x15
  2310                           
  2311  0035                     _isdigit$823:	
  2312                           ; 1 bytes @ 0x15
  2313                           
  2314  0035                     USARTInit@baud_rate:	
  2315                           ; 1 bytes @ 0x15
  2316                           
  2317  0035                     ___wmul@multiplier:	
  2318                           ; 2 bytes @ 0x15
  2319                           
  2320  0035                     ___lwdiv@divisor:	
  2321                           ; 2 bytes @ 0x15
  2322                           
  2323  0035                     memcmp@s2:	
  2324                           ; 2 bytes @ 0x15
  2325                           
  2326  0035                     strcat@from:	
  2327                           ; 2 bytes @ 0x15
  2328                           
  2329  0035                     strcpy@from:	
  2330                           ; 2 bytes @ 0x15
  2331                           
  2332  0035                     strlen@s:	
  2333                           ; 2 bytes @ 0x15
  2334                           
  2335  0035                     strchr@ptr:	
  2336                           ; 2 bytes @ 0x15
  2337                           
  2338  0035                     ___ftpack@arg:	
  2339                           ; 2 bytes @ 0x15
  2340                           
  2341  0035                     ___lmul@multiplier:	
  2342                           ; 3 bytes @ 0x15
  2343                           
  2344                           
  2345                           ; 4 bytes @ 0x15
  2346  0035                     	ds	1
  2347  0036                     ?_USARTWriteString:	
  2348  0036                     ??_USARTGotoNewLine:	
  2349                           ; 1 bytes @ 0x16
  2350                           
  2351  0036                     USARTReadData@data:	
  2352                           ; 1 bytes @ 0x16
  2353                           
  2354  0036                     isdigit@c:	
  2355                           ; 1 bytes @ 0x16
  2356                           
  2357  0036                     USARTWriteString@str:	
  2358                           ; 1 bytes @ 0x16
  2359                           
  2360                           
  2361                           ; 2 bytes @ 0x16
  2362  0036                     	ds	1
  2363  0037                     ??_strlen:	
  2364  0037                     ??_strcpy:	
  2365                           ; 1 bytes @ 0x17
  2366                           
  2367  0037                     ??_strcat:	
  2368                           ; 1 bytes @ 0x17
  2369                           
  2370  0037                     ??_USARTInit:	
  2371                           ; 1 bytes @ 0x17
  2372                           
  2373  0037                     ??_sampling:	
  2374                           ; 1 bytes @ 0x17
  2375                           
  2376  0037                     ___wmul@multiplicand:	
  2377                           ; 1 bytes @ 0x17
  2378                           
  2379  0037                     ___lwdiv@dividend:	
  2380                           ; 2 bytes @ 0x17
  2381                           
  2382  0037                     memcmp@n:	
  2383                           ; 2 bytes @ 0x17
  2384                           
  2385  0037                     strchr@chr:	
  2386                           ; 2 bytes @ 0x17
  2387                           
  2388                           
  2389                           ; 2 bytes @ 0x17
  2390  0037                     	ds	1
  2391  0038                     ??_USARTWriteString:	
  2392  0038                     ?_USARTWriteLine:	
  2393                           ; 1 bytes @ 0x18
  2394                           
  2395  0038                     ___ftpack@exp:	
  2396                           ; 1 bytes @ 0x18
  2397                           
  2398  0038                     strcat@to:	
  2399                           ; 1 bytes @ 0x18
  2400                           
  2401  0038                     strcpy@to:	
  2402                           ; 1 bytes @ 0x18
  2403                           
  2404  0038                     USARTWriteLine@str:	
  2405                           ; 1 bytes @ 0x18
  2406                           
  2407                           
  2408                           ; 2 bytes @ 0x18
  2409  0038                     	ds	1
  2410  0039                     ??_memcmp:	
  2411  0039                     ??_strchr:	
  2412                           ; 1 bytes @ 0x19
  2413                           
  2414  0039                     ??___wmul:	
  2415                           ; 1 bytes @ 0x19
  2416                           
  2417  0039                     ??___lwdiv:	
  2418                           ; 1 bytes @ 0x19
  2419                           
  2420  0039                     ___ftpack@sign:	
  2421                           ; 1 bytes @ 0x19
  2422                           
  2423  0039                     strcat@cp:	
  2424                           ; 1 bytes @ 0x19
  2425                           
  2426  0039                     strcpy@cp:	
  2427                           ; 1 bytes @ 0x19
  2428                           
  2429  0039                     ___wmul@product:	
  2430                           ; 1 bytes @ 0x19
  2431                           
  2432  0039                     strlen@cp:	
  2433                           ; 2 bytes @ 0x19
  2434                           
  2435  0039                     ___lmul@multiplicand:	
  2436                           ; 2 bytes @ 0x19
  2437                           
  2438                           
  2439                           ; 4 bytes @ 0x19
  2440  0039                     	ds	1
  2441  003A                     ??_help:	
  2442  003A                     ??___ftpack:	
  2443                           ; 1 bytes @ 0x1A
  2444                           
  2445  003A                     ??_USARTWriteLine:	
  2446                           ; 1 bytes @ 0x1A
  2447                           
  2448  003A                     ___lwdiv@counter:	
  2449                           ; 1 bytes @ 0x1A
  2450                           
  2451                           
  2452                           ; 1 bytes @ 0x1A
  2453  003A                     	ds	1
  2454  003B                     ?_srand:	
  2455  003B                     ?_strcspn:	
  2456                           ; 1 bytes @ 0x1B
  2457                           
  2458  003B                     ?_atoi:	
  2459                           ; 2 bytes @ 0x1B
  2460                           
  2461  003B                     memcmp@s1:	
  2462                           ; 2 bytes @ 0x1B
  2463                           
  2464  003B                     ___lwdiv@quotient:	
  2465                           ; 1 bytes @ 0x1B
  2466                           
  2467  003B                     srand@x:	
  2468                           ; 2 bytes @ 0x1B
  2469                           
  2470  003B                     strcspn@s2:	
  2471                           ; 2 bytes @ 0x1B
  2472                           
  2473                           
  2474                           ; 2 bytes @ 0x1B
  2475  003B                     	ds	2
  2476  003D                     ??_strcspn:	
  2477  003D                     ??_atoi:	
  2478                           ; 1 bytes @ 0x1D
  2479                           
  2480  003D                     ??_srand:	
  2481                           ; 1 bytes @ 0x1D
  2482                           
  2483  003D                     ??___lmul:	
  2484                           ; 1 bytes @ 0x1D
  2485                           
  2486  003D                     ?___lwmod:	
  2487                           ; 1 bytes @ 0x1D
  2488                           
  2489  003D                     ?___awtoft:	
  2490                           ; 2 bytes @ 0x1D
  2491                           
  2492  003D                     ___awtoft@c:	
  2493                           ; 3 bytes @ 0x1D
  2494                           
  2495  003D                     ___lwmod@divisor:	
  2496                           ; 2 bytes @ 0x1D
  2497                           
  2498                           
  2499                           ; 2 bytes @ 0x1D
  2500  003D                     	ds	1
  2501  003E                     ___lmul@product:	
  2502                           
  2503                           ; 4 bytes @ 0x1E
  2504  003E                     	ds	1
  2505  003F                     atoi@sign:	
  2506  003F                     ___lwmod@dividend:	
  2507                           ; 1 bytes @ 0x1F
  2508                           
  2509  003F                     strcspn@i:	
  2510                           ; 2 bytes @ 0x1F
  2511                           
  2512                           
  2513                           ; 2 bytes @ 0x1F
  2514  003F                     	ds	1
  2515  0040                     ??___awtoft:	
  2516  0040                     atoi@a:	
  2517                           ; 1 bytes @ 0x20
  2518                           
  2519                           
  2520                           ; 2 bytes @ 0x20
  2521  0040                     	ds	1
  2522  0041                     ??___lwmod:	
  2523  0041                     strcspn@s1:	
  2524                           ; 1 bytes @ 0x21
  2525                           
  2526                           
  2527                           ; 1 bytes @ 0x21
  2528  0041                     	ds	1
  2529  0042                     ?_rand:	
  2530  0042                     atoi@s:	
  2531                           ; 2 bytes @ 0x22
  2532                           
  2533  0042                     ___awtoft@sign:	
  2534                           ; 1 bytes @ 0x22
  2535                           
  2536  0042                     ___lwmod@counter:	
  2537                           ; 1 bytes @ 0x22
  2538                           
  2539                           
  2540                           ; 1 bytes @ 0x22
  2541  0042                     	ds	1
  2542  0043                     ?_sprintf:	
  2543  0043                     ?___ftdiv:	
  2544                           ; 2 bytes @ 0x23
  2545                           
  2546  0043                     ?___ftmul:	
  2547                           ; 3 bytes @ 0x23
  2548                           
  2549  0043                     sprintf@f:	
  2550                           ; 3 bytes @ 0x23
  2551                           
  2552  0043                     ___ftdiv@f2:	
  2553                           ; 2 bytes @ 0x23
  2554                           
  2555  0043                     ___ftmul@f1:	
  2556                           ; 3 bytes @ 0x23
  2557                           
  2558                           
  2559                           ; 3 bytes @ 0x23
  2560  0043                     	ds	1
  2561  0044                     ??_rand:	
  2562                           
  2563                           ; 1 bytes @ 0x24
  2564  0044                     	ds	2
  2565  0046                     ___ftdiv@f1:	
  2566  0046                     ___ftmul@f2:	
  2567                           ; 3 bytes @ 0x26
  2568                           
  2569                           
  2570                           ; 3 bytes @ 0x26
  2571  0046                     	ds	3
  2572  0049                     ??_acquire:	
  2573  0049                     ??_stop:	
  2574                           ; 1 bytes @ 0x29
  2575                           
  2576  0049                     ??_step:	
  2577                           ; 1 bytes @ 0x29
  2578                           
  2579  0049                     ??_run:	
  2580                           ; 1 bytes @ 0x29
  2581                           
  2582  0049                     ??_status:	
  2583                           ; 1 bytes @ 0x29
  2584                           
  2585  0049                     ??_adReadA0:	
  2586                           ; 1 bytes @ 0x29
  2587                           
  2588  0049                     ??___awmod:	
  2589                           ; 1 bytes @ 0x29
  2590                           
  2591                           
  2592                           ; 1 bytes @ 0x29
  2593  0049                     	ds	1
  2594  004A                     ??_main:	
  2595                           
  2596                           	psect	maintext
  2597  1E06                     __pmaintext:	
  2598                           ; 1 bytes @ 0x2A
  2599 ;;
  2600 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2601 ;;
  2602 ;; *************** function _main *****************
  2603 ;; Defined at:
  2604 ;;		line 124 in file "main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : B00/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2618 ;;      Params:         0       0       0       0       0
  2619 ;;      Locals:         0       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0
  2621 ;;      Totals:         0       0       0       0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels required when called:   11
  2624 ;; This function calls:
  2625 ;;		_USARTInit
  2626 ;;		_USARTWriteString
  2627 ;;		_getData
  2628 ;;		_help
  2629 ;;		_init
  2630 ;;		_stop
  2631 ;; This function is called by:
  2632 ;;		Startup code after reset
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           
  2637                           ;psect for function _main
  2638  1E06                     _main:	
  2639                           
  2640                           ;main.c: 126: USARTInit(19200);
  2641                           
  2642                           ;incstack = 0
  2643 ;; hardware stack exceeded
  2644                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2645  1E06  3000               	movlw	0
  2646  1E07  1283               	bcf	3,5	;RP0=0, select bank0
  2647  1E08  1303               	bcf	3,6	;RP1=0, select bank0
  2648  1E09  00B5               	movwf	USARTInit@baud_rate
  2649  1E0A  304B               	movlw	75
  2650  1E0B  00B6               	movwf	USARTInit@baud_rate+1
  2651  1E0C  160A  118A  213A  160A  158A  	fcall	_USARTInit
  2652                           
  2653                           ;main.c: 128: init();
  2654  1E11  160A  158A  26CF  160A  158A  	fcall	_init
  2655                           
  2656                           ;main.c: 130: pwm=0;
  2657  1E16  1683               	bsf	3,5	;RP0=1, select bank1
  2658  1E17  1303               	bcf	3,6	;RP1=0, select bank1
  2659  1E18  01CE               	clrf	_pwm^(0+128)
  2660  1E19  01CF               	clrf	(_pwm+1)^(0+128)
  2661                           
  2662                           ;main.c: 132: buffer = 0;
  2663  1E1A  01D0               	clrf	_buffer^(0+128)
  2664                           
  2665                           ;main.c: 134: stop();
  2666  1E1B  160A  158A  2452  160A  158A  	fcall	_stop
  2667                           
  2668                           ;main.c: 136: help();
  2669  1E20  120A  158A  2232  160A  158A  	fcall	_help
  2670                           
  2671                           ;main.c: 137: USARTWriteString(">");
  2672  1E25  3058               	movlw	low (STR_1| (0+32768))
  2673  1E26  1283               	bcf	3,5	;RP0=0, select bank0
  2674  1E27  1303               	bcf	3,6	;RP1=0, select bank0
  2675  1E28  00B6               	movwf	USARTWriteString@str
  2676  1E29  3086               	movlw	high (STR_1| (0+32768))
  2677  1E2A  00B7               	movwf	USARTWriteString@str+1
  2678  1E2B  160A  158A  258F  160A  158A  	fcall	_USARTWriteString
  2679  1E30                     l4637:	
  2680                           ;main.c: 139: while(1)
  2681                           
  2682                           
  2683                           ;main.c: 140: {
  2684                           ;main.c: 142: getData();
  2685  1E30  120A  118A  27A0  160A  158A  	fcall	_getData
  2686  1E35  2E30               	goto	l4637
  2687  1E36                     __end_of_main:	
  2688                           ;main.c: 143: }
  2689                           ;main.c: 144: return;
  2690                           
  2691                           
  2692                           	psect	text1
  2693  1ECF                     __ptext1:	
  2694 ;; *************** function _init *****************
  2695 ;; Defined at:
  2696 ;;		line 67 in file "main.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2710 ;;      Params:         0       0       0       0       0
  2711 ;;      Locals:         0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0
  2713 ;;      Totals:         0       0       0       0       0
  2714 ;;Total ram usage:        0 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    4
  2717 ;; This function calls:
  2718 ;;		Nothing
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           
  2725                           ;psect for function _init
  2726  1ECF                     _init:	
  2727                           
  2728                           ;main.c: 69: TRISA = 0b00000001;
  2729                           
  2730                           ;incstack = 0
  2731                           ; Regs used in _init: [wreg+status,2]
  2732  1ECF  3001               	movlw	1
  2733  1ED0  1683               	bsf	3,5	;RP0=1, select bank1
  2734  1ED1  1303               	bcf	3,6	;RP1=0, select bank1
  2735  1ED2  0085               	movwf	5	;volatile
  2736                           
  2737                           ;main.c: 70: PORTA = 0b00000000;
  2738  1ED3  1283               	bcf	3,5	;RP0=0, select bank0
  2739  1ED4  1303               	bcf	3,6	;RP1=0, select bank0
  2740  1ED5  0185               	clrf	5	;volatile
  2741                           
  2742                           ;main.c: 71: TRISB = 0b00000001;
  2743  1ED6  3001               	movlw	1
  2744  1ED7  1683               	bsf	3,5	;RP0=1, select bank1
  2745  1ED8  1303               	bcf	3,6	;RP1=0, select bank1
  2746  1ED9  0086               	movwf	6	;volatile
  2747                           
  2748                           ;main.c: 72: PORTB = 0b00000000;
  2749  1EDA  1283               	bcf	3,5	;RP0=0, select bank0
  2750  1EDB  1303               	bcf	3,6	;RP1=0, select bank0
  2751  1EDC  0186               	clrf	6	;volatile
  2752                           
  2753                           ;main.c: 73: TRISC = 0b10000000;
  2754  1EDD  3080               	movlw	128
  2755  1EDE  1683               	bsf	3,5	;RP0=1, select bank1
  2756  1EDF  1303               	bcf	3,6	;RP1=0, select bank1
  2757  1EE0  0087               	movwf	7	;volatile
  2758                           
  2759                           ;main.c: 74: PORTC = 0b00000000;
  2760  1EE1  1283               	bcf	3,5	;RP0=0, select bank0
  2761  1EE2  1303               	bcf	3,6	;RP1=0, select bank0
  2762  1EE3  0187               	clrf	7	;volatile
  2763                           
  2764                           ;main.c: 75: TRISD = 0b00000000;
  2765  1EE4  1683               	bsf	3,5	;RP0=1, select bank1
  2766  1EE5  1303               	bcf	3,6	;RP1=0, select bank1
  2767  1EE6  0188               	clrf	8	;volatile
  2768                           
  2769                           ;main.c: 76: PORTD = 0b00000000;
  2770  1EE7  1283               	bcf	3,5	;RP0=0, select bank0
  2771  1EE8  1303               	bcf	3,6	;RP1=0, select bank0
  2772  1EE9  0188               	clrf	8	;volatile
  2773                           
  2774                           ;main.c: 79: ADCON0 = 0b10000001;
  2775  1EEA  3081               	movlw	129
  2776  1EEB  009F               	movwf	31	;volatile
  2777                           
  2778                           ;main.c: 80: ADCON1 = 0b10001110;
  2779  1EEC  308E               	movlw	142
  2780  1EED  1683               	bsf	3,5	;RP0=1, select bank1
  2781  1EEE  1303               	bcf	3,6	;RP1=0, select bank1
  2782  1EEF  009F               	movwf	31	;volatile
  2783                           
  2784                           ;main.c: 83: OPTION_REG = 0b00000111;
  2785  1EF0  3007               	movlw	7
  2786  1EF1  0081               	movwf	1	;volatile
  2787                           
  2788                           ;main.c: 84: INTCON = 0b10100000;
  2789  1EF2  30A0               	movlw	160
  2790  1EF3  008B               	movwf	11	;volatile
  2791                           
  2792                           ;main.c: 86: TMR0 = 236;
  2793  1EF4  30EC               	movlw	236
  2794  1EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2795  1EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2796  1EF7  0081               	movwf	1	;volatile
  2797                           
  2798                           ;main.c: 89: CCPR1L = 0b00000000;
  2799  1EF8  0195               	clrf	21	;volatile
  2800                           
  2801                           ;main.c: 90: CCP1CON = 0b00001100;
  2802  1EF9  300C               	movlw	12
  2803  1EFA  0097               	movwf	23	;volatile
  2804                           
  2805                           ;main.c: 91: CCP2CON = 0b00001100;
  2806  1EFB  300C               	movlw	12
  2807  1EFC  009D               	movwf	29	;volatile
  2808                           
  2809                           ;main.c: 92: PR2 = 255;
  2810  1EFD  30FF               	movlw	255
  2811  1EFE  1683               	bsf	3,5	;RP0=1, select bank1
  2812  1EFF  1303               	bcf	3,6	;RP1=0, select bank1
  2813  1F00  0092               	movwf	18	;volatile
  2814                           
  2815                           ;main.c: 93: T2CON = 0b00000111;
  2816  1F01  3007               	movlw	7
  2817  1F02  1283               	bcf	3,5	;RP0=0, select bank0
  2818  1F03  1303               	bcf	3,6	;RP1=0, select bank0
  2819  1F04  0092               	movwf	18	;volatile
  2820  1F05  0008               	return
  2821  1F06                     __end_of_init:	
  2822                           
  2823                           	psect	text2
  2824  07A0                     __ptext2:	
  2825 ;; *************** function _getData *****************
  2826 ;; Defined at:
  2827 ;;		line 196 in file "main.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  i               2   44[BANK1 ] int 
  2832 ;;  data            1   43[BANK1 ] unsigned char 
  2833 ;;  n               1   42[BANK1 ] unsigned char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2843 ;;      Params:         0       0       0       0       0
  2844 ;;      Locals:         0       0       4       0       0
  2845 ;;      Temps:          0       0       1       0       0
  2846 ;;      Totals:         0       0       5       0       0
  2847 ;;Total ram usage:        5 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:   10
  2850 ;; This function calls:
  2851 ;;		_USARTDataAvailable
  2852 ;;		_USARTReadData
  2853 ;;		_USARTWriteChar
  2854 ;;		_choice
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           
  2861                           ;psect for function _getData
  2862  07A0                     _getData:	
  2863                           
  2864                           ;main.c: 198: uint8_t n= USARTDataAvailable();
  2865                           
  2866                           ;incstack = 0
  2867 ;; hardware stack exceeded
  2868                           ; Regs used in _getData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2869  07A0  160A  158A  2549  120A  118A  	fcall	_USARTDataAvailable
  2870  07A5  1683               	bsf	3,5	;RP0=1, select bank1
  2871  07A6  1303               	bcf	3,6	;RP1=0, select bank1
  2872  07A7  00C9               	movwf	??_getData^(0+128)
  2873  07A8  0849               	movf	??_getData^(0+128),w
  2874  07A9  00CA               	movwf	getData@n^(0+128)
  2875                           
  2876                           ;main.c: 200: if(n!=0){
  2877  07AA  084A               	movf	getData@n^(0+128),w
  2878  07AB  1903               	btfsc	3,2
  2879  07AC  0008               	return
  2880                           
  2881                           ;main.c: 201: char data = USARTReadData();
  2882  07AD  160A  158A  2503  120A  118A  	fcall	_USARTReadData
  2883  07B2  1683               	bsf	3,5	;RP0=1, select bank1
  2884  07B3  1303               	bcf	3,6	;RP1=0, select bank1
  2885  07B4  00C9               	movwf	??_getData^(0+128)
  2886  07B5  0849               	movf	??_getData^(0+128),w
  2887  07B6  00CB               	movwf	getData@data^(0+128)
  2888                           
  2889                           ;main.c: 203: if(data == '\r'){
  2890  07B7  300D               	movlw	13
  2891  07B8  064B               	xorwf	getData@data^(0+128),w
  2892  07B9  1D03               	btfss	3,2
  2893  07BA  2FDE               	goto	l4513
  2894                           
  2895                           ;main.c: 204: choice();
  2896  07BB  120A  158A  23DE  120A  118A  	fcall	_choice
  2897                           
  2898                           ;main.c: 206: buffer = 0;
  2899  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  2900  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  2901  07C2  01D0               	clrf	_buffer^(0+128)
  2902                           
  2903                           ;main.c: 207: for(int i=0 ; i<25;i++){
  2904  07C3  01CC               	clrf	getData@i^(0+128)
  2905  07C4  01CD               	clrf	(getData@i+1)^(0+128)
  2906  07C5                     L1:	
  2907  07C5  084D               	movf	(getData@i+1)^(0+128),w
  2908  07C6  3A80               	xorlw	128
  2909  07C7  00FF               	movwf	127
  2910  07C8  3080               	movlw	128
  2911  07C9  027F               	subwf	127,w
  2912  07CA  1D03               	skipz
  2913  07CB  2FCE               	goto	u5605
  2914  07CC  3019               	movlw	25
  2915  07CD  024C               	subwf	getData@i^(0+128),w
  2916  07CE                     u5605:	
  2917  07CE  1803               	btfsc	3,0
  2918  07CF  0008               	return
  2919                           
  2920                           ;main.c: 208: content[i] = '\0';
  2921  07D0  1683               	bsf	3,5	;RP0=1, select bank1
  2922  07D1  1303               	bcf	3,6	;RP1=0, select bank1
  2923  07D2  084C               	movf	getData@i^(0+128),w
  2924  07D3  3ED1               	addlw	(low (_content| 0))& (0+255)
  2925  07D4  0084               	movwf	4
  2926  07D5  1383               	bcf	3,7	;select IRP bank1
  2927  07D6  0180               	clrf	0
  2928  07D7  3001               	movlw	1
  2929  07D8  07CC               	addwf	getData@i^(0+128),f
  2930  07D9  1803               	skipnc
  2931  07DA  0ACD               	incf	(getData@i+1)^(0+128),f
  2932  07DB  3000               	movlw	0
  2933  07DC  07CD               	addwf	(getData@i+1)^(0+128),f
  2934  07DD  2FC5               	goto	L1
  2935  07DE                     l4513:	
  2936                           ;main.c: 209: }
  2937                           ;main.c: 210: }
  2938                           
  2939                           
  2940                           ;main.c: 211: else{
  2941                           ;main.c: 213: content[buffer] = data;
  2942  07DE  1683               	bsf	3,5	;RP0=1, select bank1
  2943  07DF  1303               	bcf	3,6	;RP1=0, select bank1
  2944  07E0  084B               	movf	getData@data^(0+128),w
  2945  07E1  00C9               	movwf	??_getData^(0+128)
  2946  07E2  0850               	movf	_buffer^(0+128),w
  2947  07E3  3ED1               	addlw	(low (_content| 0))& (0+255)
  2948  07E4  0084               	movwf	4
  2949  07E5  0849               	movf	??_getData^(0+128),w
  2950  07E6  1383               	bcf	3,7	;select IRP bank1
  2951  07E7  0080               	movwf	0
  2952                           
  2953                           ;main.c: 215: USARTWriteChar(content[buffer]);
  2954  07E8  0850               	movf	_buffer^(0+128),w
  2955  07E9  3ED1               	addlw	(low (_content| 0))& (0+255)
  2956  07EA  0084               	movwf	4
  2957  07EB  0800               	movf	0,w
  2958  07EC  160A  158A  242C   	fcall	_USARTWriteChar
  2959                           
  2960                           ;main.c: 217: buffer++;
  2961  07EF  3001               	movlw	1
  2962  07F0  1683               	bsf	3,5	;RP0=1, select bank1
  2963  07F1  1303               	bcf	3,6	;RP1=0, select bank1
  2964  07F2  00C9               	movwf	??_getData^(0+128)
  2965  07F3  0849               	movf	??_getData^(0+128),w
  2966  07F4  07D0               	addwf	_buffer^(0+128),f
  2967  07F5  0008               	return
  2968  07F6                     __end_of_getData:	
  2969                           
  2970                           	psect	text3
  2971  0BDE                     __ptext3:	
  2972 ;; *************** function _choice *****************
  2973 ;; Defined at:
  2974 ;;		line 222 in file "main.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  i               2   22[BANK2 ] int 
  2979 ;;  i               2   20[BANK2 ] int 
  2980 ;;  i               2   24[BANK2 ] int 
  2981 ;;  duty           10   52[BANK3 ] unsigned char [10]
  2982 ;;  firstP          2   14[BANK2 ] int 
  2983 ;;  secondP         2   66[BANK3 ] int 
  2984 ;;  duty           10   42[BANK3 ] unsigned char [10]
  2985 ;;  firstP          2   12[BANK2 ] int 
  2986 ;;  secondP         2   64[BANK3 ] int 
  2987 ;;  time           10    0[BANK2 ] unsigned char [10]
  2988 ;;  duty           10   32[BANK3 ] unsigned char [10]
  2989 ;;  secondP         2   18[BANK2 ] int 
  2990 ;;  duty_i          2   16[BANK2 ] int 
  2991 ;;  firstP          2   10[BANK2 ] int 
  2992 ;;  time_1          2   68[BANK3 ] int 
  2993 ;;  thirdP          2   62[BANK3 ] int 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3003 ;;      Params:         0       0       0       0       0
  3004 ;;      Locals:         0       0       0      38      26
  3005 ;;      Temps:          0       0       5       0       0
  3006 ;;      Totals:         0       0       5      38      26
  3007 ;;Total ram usage:       69 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    9
  3010 ;; This function calls:
  3011 ;;		_USARTGotoNewLine
  3012 ;;		_USARTWriteLine
  3013 ;;		_USARTWriteString
  3014 ;;		_acquire
  3015 ;;		_atoi
  3016 ;;		_help
  3017 ;;		_memcmp
  3018 ;;		_run
  3019 ;;		_status
  3020 ;;		_step
  3021 ;;		_stop
  3022 ;;		_strcspn
  3023 ;;		_strlen
  3024 ;;		_sys
  3025 ;; This function is called by:
  3026 ;;		_getData
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           
  3031                           ;psect for function _choice
  3032  0BDE                     _choice:	
  3033                           
  3034                           ;main.c: 223: if(memcmp(content, "step(", 5) == 0){
  3035                           
  3036                           ;incstack = 0
  3037 ;; hardware stack exceeded
  3038                           ; Regs used in _choice: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3039  0BDE  3041               	movlw	low (STR_36| (0+32768))
  3040  0BDF  1283               	bcf	3,5	;RP0=0, select bank0
  3041  0BE0  1303               	bcf	3,6	;RP1=0, select bank0
  3042  0BE1  00B5               	movwf	memcmp@s2
  3043  0BE2  3086               	movlw	high (STR_36| (0+32768))
  3044  0BE3  00B6               	movwf	memcmp@s2+1
  3045  0BE4  3005               	movlw	5
  3046  0BE5  00B7               	movwf	memcmp@n
  3047  0BE6  3000               	movlw	0
  3048  0BE7  00B8               	movwf	memcmp@n+1
  3049  0BE8  30D1               	movlw	(low (_content| 0))& (0+255)
  3050  0BE9  160A  118A  2024  120A  158A  	fcall	_memcmp
  3051  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  3052  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  3053  0BF0  0835               	movf	?_memcmp,w
  3054  0BF1  0436               	iorwf	?_memcmp+1,w
  3055  0BF2  1D03               	btfss	3,2
  3056  0BF3  2D96               	goto	l4417
  3057                           
  3058                           ;main.c: 224: char duty[10];
  3059                           ;main.c: 225: char time[10];
  3060                           ;main.c: 226: int firstP = strcspn(content, "(");
  3061  0BF4  304A               	movlw	low ((STR_40+3)| (0+32768))
  3062  0BF5  00BB               	movwf	strcspn@s2
  3063  0BF6  3086               	movlw	high ((STR_40+3)| (0+32768))
  3064  0BF7  00BC               	movwf	strcspn@s2+1
  3065  0BF8  30D1               	movlw	(low (_content| 0))& (0+255)
  3066  0BF9  160A  158A  2668  120A  158A  	fcall	_strcspn
  3067  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  3068  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  3069  0C00  083C               	movf	?_strcspn+1,w
  3070  0C01  1283               	bcf	3,5	;RP0=0, select bank2
  3071  0C02  1703               	bsf	3,6	;RP1=1, select bank2
  3072  0C03  00DB               	movwf	(choice@firstP+1)^(0+256)
  3073  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0C05  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0C06  083B               	movf	?_strcspn,w
  3076  0C07  1283               	bcf	3,5	;RP0=0, select bank2
  3077  0C08  1703               	bsf	3,6	;RP1=1, select bank2
  3078  0C09  00DA               	movwf	choice@firstP^(0+256)
  3079                           
  3080                           ;main.c: 227: int secondP = strcspn(content, ",");
  3081  0C0A  3056               	movlw	low (STR_38| (0+32768))
  3082  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  3083  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  3084  0C0D  00BB               	movwf	strcspn@s2
  3085  0C0E  3086               	movlw	high (STR_38| (0+32768))
  3086  0C0F  00BC               	movwf	strcspn@s2+1
  3087  0C10  30D1               	movlw	(low (_content| 0))& (0+255)
  3088  0C11  160A  158A  2668  120A  158A  	fcall	_strcspn
  3089  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  3091  0C18  083C               	movf	?_strcspn+1,w
  3092  0C19  1283               	bcf	3,5	;RP0=0, select bank2
  3093  0C1A  1703               	bsf	3,6	;RP1=1, select bank2
  3094  0C1B  00E3               	movwf	(choice@secondP+1)^(0+256)
  3095  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  3096  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  3097  0C1E  083B               	movf	?_strcspn,w
  3098  0C1F  1283               	bcf	3,5	;RP0=0, select bank2
  3099  0C20  1703               	bsf	3,6	;RP1=1, select bank2
  3100  0C21  00E2               	movwf	choice@secondP^(0+256)
  3101                           
  3102                           ;main.c: 228: int thirdP = strcspn(content, ")");
  3103  0C22  300E               	movlw	low ((STR_48+8)| (0+32768))
  3104  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  3105  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  3106  0C25  00BB               	movwf	strcspn@s2
  3107  0C26  3086               	movlw	high ((STR_48+8)| (0+32768))
  3108  0C27  00BC               	movwf	strcspn@s2+1
  3109  0C28  30D1               	movlw	(low (_content| 0))& (0+255)
  3110  0C29  160A  158A  2668  120A  158A  	fcall	_strcspn
  3111  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  3112  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  3113  0C30  083C               	movf	?_strcspn+1,w
  3114  0C31  1683               	bsf	3,5	;RP0=1, select bank3
  3115  0C32  1703               	bsf	3,6	;RP1=1, select bank3
  3116  0C33  00CF               	movwf	(choice@thirdP+1)^(0+384)
  3117  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  3118  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  3119  0C36  083B               	movf	?_strcspn,w
  3120  0C37  1683               	bsf	3,5	;RP0=1, select bank3
  3121  0C38  1703               	bsf	3,6	;RP1=1, select bank3
  3122  0C39  00CE               	movwf	choice@thirdP^(0+384)
  3123                           
  3124                           ;main.c: 229: for(int i = 0 ; i<strlen(content); i++){
  3125  0C3A  1283               	bcf	3,5	;RP0=0, select bank2
  3126  0C3B  1703               	bsf	3,6	;RP1=1, select bank2
  3127  0C3C  01E8               	clrf	choice@i^(0+256)
  3128  0C3D  01E9               	clrf	(choice@i+1)^(0+256)
  3129  0C3E                     l4407:	
  3130  0C3E  30D1               	movlw	(low (_content| 0))& (0+255)
  3131  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  3132  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  3133  0C41  00B5               	movwf	strlen@s
  3134  0C42  3000               	movlw	0
  3135  0C43  00B6               	movwf	strlen@s+1
  3136  0C44  160A  158A  256C  120A  158A  	fcall	_strlen
  3137  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  3138  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  3139  0C4B  0836               	movf	?_strlen+1,w
  3140  0C4C  1283               	bcf	3,5	;RP0=0, select bank2
  3141  0C4D  1703               	bsf	3,6	;RP1=1, select bank2
  3142  0C4E  0269               	subwf	(choice@i+1)^(0+256),w
  3143  0C4F  1D03               	skipz
  3144  0C50  2C57               	goto	u5435
  3145  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0C53  0835               	movf	?_strlen,w
  3148  0C54  1283               	bcf	3,5	;RP0=0, select bank2
  3149  0C55  1703               	bsf	3,6	;RP1=1, select bank2
  3150  0C56  0268               	subwf	choice@i^(0+256),w
  3151  0C57                     u5435:	
  3152  0C57  1803               	btfsc	3,0
  3153  0C58  2D3C               	goto	l4409
  3154                           
  3155                           ;main.c: 230: if(i < secondP - firstP - 1){
  3156  0C59  085A               	movf	choice@firstP^(0+256),w
  3157  0C5A  3E01               	addlw	1
  3158  0C5B  1683               	bsf	3,5	;RP0=1, select bank1
  3159  0C5C  1303               	bcf	3,6	;RP1=0, select bank1
  3160  0C5D  00C4               	movwf	??_choice^(0+128)
  3161  0C5E  1283               	bcf	3,5	;RP0=0, select bank2
  3162  0C5F  1703               	bsf	3,6	;RP1=1, select bank2
  3163  0C60  085B               	movf	(choice@firstP+1)^(0+256),w
  3164  0C61  1803               	skipnc
  3165  0C62  3E01               	addlw	1
  3166  0C63  3E00               	addlw	0
  3167  0C64  1683               	bsf	3,5	;RP0=1, select bank1
  3168  0C65  1303               	bcf	3,6	;RP1=0, select bank1
  3169  0C66  00C5               	movwf	(??_choice+1)^(0+128)
  3170  0C67  09C4               	comf	??_choice^(0+128),f
  3171  0C68  09C5               	comf	(??_choice^(0+128)+1),f
  3172  0C69  0AC4               	incf	??_choice^(0+128),f
  3173  0C6A  1903               	skipnz
  3174  0C6B  0AC5               	incf	(??_choice^(0+128)+1),f
  3175  0C6C  1283               	bcf	3,5	;RP0=0, select bank2
  3176  0C6D  1703               	bsf	3,6	;RP1=1, select bank2
  3177  0C6E  0862               	movf	choice@secondP^(0+256),w
  3178  0C6F  1683               	bsf	3,5	;RP0=1, select bank1
  3179  0C70  1303               	bcf	3,6	;RP1=0, select bank1
  3180  0C71  0744               	addwf	??_choice^(0+128),w
  3181  0C72  00C6               	movwf	(??_choice+2)^(0+128)
  3182  0C73  1283               	bcf	3,5	;RP0=0, select bank2
  3183  0C74  1703               	bsf	3,6	;RP1=1, select bank2
  3184  0C75  0863               	movf	(choice@secondP+1)^(0+256),w
  3185  0C76  1803               	skipnc
  3186  0C77  0A63               	incf	(choice@secondP+1)^(0+256),w
  3187  0C78  1683               	bsf	3,5	;RP0=1, select bank1
  3188  0C79  1303               	bcf	3,6	;RP1=0, select bank1
  3189  0C7A  0745               	addwf	(??_choice+1)^(0+128),w
  3190  0C7B  00C7               	movwf	(??_choice+3)^(0+128)
  3191  0C7C  1283               	bcf	3,5	;RP0=0, select bank2
  3192  0C7D  1703               	bsf	3,6	;RP1=1, select bank2
  3193  0C7E  0869               	movf	(choice@i+1)^(0+256),w
  3194  0C7F  3A80               	xorlw	128
  3195  0C80  1683               	bsf	3,5	;RP0=1, select bank1
  3196  0C81  1303               	bcf	3,6	;RP1=0, select bank1
  3197  0C82  00C8               	movwf	(??_choice+4)^(0+128)
  3198  0C83  0847               	movf	(??_choice+3)^(0+128),w
  3199  0C84  3A80               	xorlw	128
  3200  0C85  0248               	subwf	(??_choice+4)^(0+128),w
  3201  0C86  1D03               	skipz
  3202  0C87  2C8C               	goto	u5395
  3203  0C88  0846               	movf	(??_choice+2)^(0+128),w
  3204  0C89  1283               	bcf	3,5	;RP0=0, select bank2
  3205  0C8A  1703               	bsf	3,6	;RP1=1, select bank2
  3206  0C8B  0268               	subwf	choice@i^(0+256),w
  3207  0C8C                     u5395:	
  3208  0C8C  1803               	skipnc
  3209  0C8D  2CA5               	goto	l4393
  3210                           
  3211                           ;main.c: 231: duty[i] = content[firstP+i+1];
  3212  0C8E  1283               	bcf	3,5	;RP0=0, select bank2
  3213  0C8F  1703               	bsf	3,6	;RP1=1, select bank2
  3214  0C90  0868               	movf	choice@i^(0+256),w
  3215  0C91  075A               	addwf	choice@firstP^(0+256),w
  3216  0C92  3E01               	addlw	1
  3217  0C93  3ED1               	addlw	(low (_content| 0))& (0+255)
  3218  0C94  0084               	movwf	4
  3219  0C95  1383               	bcf	3,7	;select IRP bank1
  3220  0C96  0800               	movf	0,w
  3221  0C97  1683               	bsf	3,5	;RP0=1, select bank1
  3222  0C98  1303               	bcf	3,6	;RP1=0, select bank1
  3223  0C99  00C4               	movwf	??_choice^(0+128)
  3224  0C9A  1283               	bcf	3,5	;RP0=0, select bank2
  3225  0C9B  1703               	bsf	3,6	;RP1=1, select bank2
  3226  0C9C  0868               	movf	choice@i^(0+256),w
  3227  0C9D  3EB0               	addlw	(low (choice@duty| (0+256)))& (0+255)
  3228  0C9E  0084               	movwf	4
  3229  0C9F  1683               	bsf	3,5	;RP0=1, select bank1
  3230  0CA0  1303               	bcf	3,6	;RP1=0, select bank1
  3231  0CA1  0844               	movf	??_choice^(0+128),w
  3232  0CA2  1783               	bsf	3,7	;select IRP bank3
  3233  0CA3  0080               	movwf	0
  3234                           
  3235                           ;main.c: 232: }
  3236  0CA4  2CC5               	goto	l4397
  3237  0CA5                     l4393:	
  3238                           
  3239                           ;main.c: 233: else if (i<strlen(duty)){
  3240  0CA5  30B0               	movlw	(low (choice@duty| (0+256)))& (0+255)
  3241  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  3242  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  3243  0CA8  00B5               	movwf	strlen@s
  3244  0CA9  3001               	movlw	1
  3245  0CAA  00B6               	movwf	strlen@s+1
  3246  0CAB  160A  158A  256C  120A  158A  	fcall	_strlen
  3247  0CB0  1283               	bcf	3,5	;RP0=0, select bank0
  3248  0CB1  1303               	bcf	3,6	;RP1=0, select bank0
  3249  0CB2  0836               	movf	?_strlen+1,w
  3250  0CB3  1283               	bcf	3,5	;RP0=0, select bank2
  3251  0CB4  1703               	bsf	3,6	;RP1=1, select bank2
  3252  0CB5  0269               	subwf	(choice@i+1)^(0+256),w
  3253  0CB6  1D03               	skipz
  3254  0CB7  2CBE               	goto	u5405
  3255  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  3256  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  3257  0CBA  0835               	movf	?_strlen,w
  3258  0CBB  1283               	bcf	3,5	;RP0=0, select bank2
  3259  0CBC  1703               	bsf	3,6	;RP1=1, select bank2
  3260  0CBD  0268               	subwf	choice@i^(0+256),w
  3261  0CBE                     u5405:	
  3262  0CBE  1803               	skipnc
  3263  0CBF  2CC5               	goto	l4397
  3264                           
  3265                           ;main.c: 234: duty[i] = '\0';
  3266  0CC0  0868               	movf	choice@i^(0+256),w
  3267  0CC1  3EB0               	addlw	(low (choice@duty| (0+256)))& (0+255)
  3268  0CC2  0084               	movwf	4
  3269  0CC3  1783               	bsf	3,7	;select IRP bank3
  3270  0CC4  0180               	clrf	0
  3271  0CC5                     l4397:	
  3272                           
  3273                           ;main.c: 235: }
  3274                           ;main.c: 236: if(i < thirdP - secondP - 1){
  3275  0CC5  1283               	bcf	3,5	;RP0=0, select bank2
  3276  0CC6  1703               	bsf	3,6	;RP1=1, select bank2
  3277  0CC7  0862               	movf	choice@secondP^(0+256),w
  3278  0CC8  3E01               	addlw	1
  3279  0CC9  1683               	bsf	3,5	;RP0=1, select bank1
  3280  0CCA  1303               	bcf	3,6	;RP1=0, select bank1
  3281  0CCB  00C4               	movwf	??_choice^(0+128)
  3282  0CCC  1283               	bcf	3,5	;RP0=0, select bank2
  3283  0CCD  1703               	bsf	3,6	;RP1=1, select bank2
  3284  0CCE  0863               	movf	(choice@secondP+1)^(0+256),w
  3285  0CCF  1803               	skipnc
  3286  0CD0  3E01               	addlw	1
  3287  0CD1  3E00               	addlw	0
  3288  0CD2  1683               	bsf	3,5	;RP0=1, select bank1
  3289  0CD3  1303               	bcf	3,6	;RP1=0, select bank1
  3290  0CD4  00C5               	movwf	(??_choice+1)^(0+128)
  3291  0CD5  09C4               	comf	??_choice^(0+128),f
  3292  0CD6  09C5               	comf	(??_choice^(0+128)+1),f
  3293  0CD7  0AC4               	incf	??_choice^(0+128),f
  3294  0CD8  1903               	skipnz
  3295  0CD9  0AC5               	incf	(??_choice^(0+128)+1),f
  3296  0CDA  1683               	bsf	3,5	;RP0=1, select bank3
  3297  0CDB  1703               	bsf	3,6	;RP1=1, select bank3
  3298  0CDC  084E               	movf	choice@thirdP^(0+384),w
  3299  0CDD  1683               	bsf	3,5	;RP0=1, select bank1
  3300  0CDE  1303               	bcf	3,6	;RP1=0, select bank1
  3301  0CDF  0744               	addwf	??_choice^(0+128),w
  3302  0CE0  00C6               	movwf	(??_choice+2)^(0+128)
  3303  0CE1  1683               	bsf	3,5	;RP0=1, select bank3
  3304  0CE2  1703               	bsf	3,6	;RP1=1, select bank3
  3305  0CE3  084F               	movf	(choice@thirdP+1)^(0+384),w
  3306  0CE4  1803               	skipnc
  3307  0CE5  0A4F               	incf	(choice@thirdP+1)^(0+384),w
  3308  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  3309  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  3310  0CE8  0745               	addwf	(??_choice+1)^(0+128),w
  3311  0CE9  00C7               	movwf	(??_choice+3)^(0+128)
  3312  0CEA  1283               	bcf	3,5	;RP0=0, select bank2
  3313  0CEB  1703               	bsf	3,6	;RP1=1, select bank2
  3314  0CEC  0869               	movf	(choice@i+1)^(0+256),w
  3315  0CED  3A80               	xorlw	128
  3316  0CEE  1683               	bsf	3,5	;RP0=1, select bank1
  3317  0CEF  1303               	bcf	3,6	;RP1=0, select bank1
  3318  0CF0  00C8               	movwf	(??_choice+4)^(0+128)
  3319  0CF1  0847               	movf	(??_choice+3)^(0+128),w
  3320  0CF2  3A80               	xorlw	128
  3321  0CF3  0248               	subwf	(??_choice+4)^(0+128),w
  3322  0CF4  1D03               	skipz
  3323  0CF5  2CFA               	goto	u5415
  3324  0CF6  0846               	movf	(??_choice+2)^(0+128),w
  3325  0CF7  1283               	bcf	3,5	;RP0=0, select bank2
  3326  0CF8  1703               	bsf	3,6	;RP1=1, select bank2
  3327  0CF9  0268               	subwf	choice@i^(0+256),w
  3328  0CFA                     u5415:	
  3329  0CFA  1803               	skipnc
  3330  0CFB  2D13               	goto	l4401
  3331                           
  3332                           ;main.c: 237: time[i] = content[secondP+i+1];
  3333  0CFC  1283               	bcf	3,5	;RP0=0, select bank2
  3334  0CFD  1703               	bsf	3,6	;RP1=1, select bank2
  3335  0CFE  0868               	movf	choice@i^(0+256),w
  3336  0CFF  0762               	addwf	choice@secondP^(0+256),w
  3337  0D00  3E01               	addlw	1
  3338  0D01  3ED1               	addlw	(low (_content| 0))& (0+255)
  3339  0D02  0084               	movwf	4
  3340  0D03  1383               	bcf	3,7	;select IRP bank1
  3341  0D04  0800               	movf	0,w
  3342  0D05  1683               	bsf	3,5	;RP0=1, select bank1
  3343  0D06  1303               	bcf	3,6	;RP1=0, select bank1
  3344  0D07  00C4               	movwf	??_choice^(0+128)
  3345  0D08  1283               	bcf	3,5	;RP0=0, select bank2
  3346  0D09  1703               	bsf	3,6	;RP1=1, select bank2
  3347  0D0A  0868               	movf	choice@i^(0+256),w
  3348  0D0B  3E50               	addlw	(low (choice@time| (0+256)))& (0+255)
  3349  0D0C  0084               	movwf	4
  3350  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  3351  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  3352  0D0F  0844               	movf	??_choice^(0+128),w
  3353  0D10  1783               	bsf	3,7	;select IRP bank2
  3354  0D11  0080               	movwf	0
  3355                           
  3356                           ;main.c: 238: }
  3357  0D12  2D33               	goto	l4405
  3358  0D13                     l4401:	
  3359                           
  3360                           ;main.c: 239: else if (i<strlen(time)){
  3361  0D13  3050               	movlw	(low (choice@time| (0+256)))& (0+255)
  3362  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  3363  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  3364  0D16  00B5               	movwf	strlen@s
  3365  0D17  3001               	movlw	1
  3366  0D18  00B6               	movwf	strlen@s+1
  3367  0D19  160A  158A  256C  120A  158A  	fcall	_strlen
  3368  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  3369  0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  3370  0D20  0836               	movf	?_strlen+1,w
  3371  0D21  1283               	bcf	3,5	;RP0=0, select bank2
  3372  0D22  1703               	bsf	3,6	;RP1=1, select bank2
  3373  0D23  0269               	subwf	(choice@i+1)^(0+256),w
  3374  0D24  1D03               	skipz
  3375  0D25  2D2C               	goto	u5425
  3376  0D26  1283               	bcf	3,5	;RP0=0, select bank0
  3377  0D27  1303               	bcf	3,6	;RP1=0, select bank0
  3378  0D28  0835               	movf	?_strlen,w
  3379  0D29  1283               	bcf	3,5	;RP0=0, select bank2
  3380  0D2A  1703               	bsf	3,6	;RP1=1, select bank2
  3381  0D2B  0268               	subwf	choice@i^(0+256),w
  3382  0D2C                     u5425:	
  3383  0D2C  1803               	skipnc
  3384  0D2D  2D33               	goto	l4405
  3385                           
  3386                           ;main.c: 240: time[i] = '\0';
  3387  0D2E  0868               	movf	choice@i^(0+256),w
  3388  0D2F  3E50               	addlw	(low (choice@time| (0+256)))& (0+255)
  3389  0D30  0084               	movwf	4
  3390  0D31  1783               	bsf	3,7	;select IRP bank2
  3391  0D32  0180               	clrf	0
  3392  0D33                     l4405:	
  3393  0D33  3001               	movlw	1
  3394  0D34  1283               	bcf	3,5	;RP0=0, select bank2
  3395  0D35  1703               	bsf	3,6	;RP1=1, select bank2
  3396  0D36  07E8               	addwf	choice@i^(0+256),f
  3397  0D37  1803               	skipnc
  3398  0D38  0AE9               	incf	(choice@i+1)^(0+256),f
  3399  0D39  3000               	movlw	0
  3400  0D3A  07E9               	addwf	(choice@i+1)^(0+256),f
  3401  0D3B  2C3E               	goto	l4407
  3402  0D3C                     l4409:	
  3403                           
  3404                           ;main.c: 241: }
  3405                           ;main.c: 242: }
  3406                           ;main.c: 243: int duty_i = atoi(duty);
  3407  0D3C  30B0               	movlw	(low (choice@duty| (0+256)))& (0+255)
  3408  0D3D  160A  118A  233C  120A  158A  	fcall	_atoi
  3409  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  3410  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  3411  0D44  083C               	movf	?_atoi+1,w
  3412  0D45  1283               	bcf	3,5	;RP0=0, select bank2
  3413  0D46  1703               	bsf	3,6	;RP1=1, select bank2
  3414  0D47  00E1               	movwf	(choice@duty_i+1)^(0+256)
  3415  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  3416  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  3417  0D4A  083B               	movf	?_atoi,w
  3418  0D4B  1283               	bcf	3,5	;RP0=0, select bank2
  3419  0D4C  1703               	bsf	3,6	;RP1=1, select bank2
  3420  0D4D  00E0               	movwf	choice@duty_i^(0+256)
  3421                           
  3422                           ;main.c: 244: int time_1 = atoi(time);
  3423  0D4E  3050               	movlw	(low (choice@time| (0+256)))& (0+255)
  3424  0D4F  160A  118A  233C  120A  158A  	fcall	_atoi
  3425  0D54  1283               	bcf	3,5	;RP0=0, select bank0
  3426  0D55  1303               	bcf	3,6	;RP1=0, select bank0
  3427  0D56  083C               	movf	?_atoi+1,w
  3428  0D57  1683               	bsf	3,5	;RP0=1, select bank3
  3429  0D58  1703               	bsf	3,6	;RP1=1, select bank3
  3430  0D59  00D5               	movwf	(choice@time_1+1)^(0+384)
  3431  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  3432  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  3433  0D5C  083B               	movf	?_atoi,w
  3434  0D5D  1683               	bsf	3,5	;RP0=1, select bank3
  3435  0D5E  1703               	bsf	3,6	;RP1=1, select bank3
  3436  0D5F  00D4               	movwf	choice@time_1^(0+384)
  3437                           
  3438                           ;main.c: 245: if(*time == (0)){
  3439  0D60  1283               	bcf	3,5	;RP0=0, select bank2
  3440  0D61  1703               	bsf	3,6	;RP1=1, select bank2
  3441  0D62  0850               	movf	choice@time^(0+256),w
  3442  0D63  1D03               	btfss	3,2
  3443  0D64  2D75               	goto	l4415
  3444                           
  3445                           ;main.c: 246: time_1 = duty_i;
  3446  0D65  0861               	movf	(choice@duty_i+1)^(0+256),w
  3447  0D66  1683               	bsf	3,5	;RP0=1, select bank3
  3448  0D67  1703               	bsf	3,6	;RP1=1, select bank3
  3449  0D68  00D5               	movwf	(choice@time_1+1)^(0+384)
  3450  0D69  1283               	bcf	3,5	;RP0=0, select bank2
  3451  0D6A  1703               	bsf	3,6	;RP1=1, select bank2
  3452  0D6B  0860               	movf	choice@duty_i^(0+256),w
  3453  0D6C  1683               	bsf	3,5	;RP0=1, select bank3
  3454  0D6D  1703               	bsf	3,6	;RP1=1, select bank3
  3455  0D6E  00D4               	movwf	choice@time_1^(0+384)
  3456                           
  3457                           ;main.c: 247: duty_i = 100;
  3458  0D6F  3064               	movlw	100
  3459  0D70  1283               	bcf	3,5	;RP0=0, select bank2
  3460  0D71  1703               	bsf	3,6	;RP1=1, select bank2
  3461  0D72  00E0               	movwf	choice@duty_i^(0+256)
  3462  0D73  3000               	movlw	0
  3463  0D74  00E1               	movwf	(choice@duty_i^(0+256)+1)
  3464  0D75                     l4415:	
  3465                           
  3466                           ;main.c: 248: }
  3467                           ;main.c: 249: step(duty_i,time_1);
  3468  0D75  0861               	movf	(choice@duty_i+1)^(0+256),w
  3469  0D76  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0D77  1303               	bcf	3,6	;RP1=0, select bank1
  3471  0D78  00BD               	movwf	(step@duty+1)^(0+128)
  3472  0D79  1283               	bcf	3,5	;RP0=0, select bank2
  3473  0D7A  1703               	bsf	3,6	;RP1=1, select bank2
  3474  0D7B  0860               	movf	choice@duty_i^(0+256),w
  3475  0D7C  1683               	bsf	3,5	;RP0=1, select bank1
  3476  0D7D  1303               	bcf	3,6	;RP1=0, select bank1
  3477  0D7E  00BC               	movwf	step@duty^(0+128)
  3478  0D7F  1683               	bsf	3,5	;RP0=1, select bank3
  3479  0D80  1703               	bsf	3,6	;RP1=1, select bank3
  3480  0D81  0854               	movf	choice@time_1^(0+384),w
  3481  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  3482  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  3483  0D84  00BE               	movwf	step@time^(0+128)
  3484  0D85  1683               	bsf	3,5	;RP0=1, select bank3
  3485  0D86  1703               	bsf	3,6	;RP1=1, select bank3
  3486  0D87  0855               	movf	(choice@time_1+1)^(0+384),w
  3487  0D88  1683               	bsf	3,5	;RP0=1, select bank1
  3488  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  3489  0D8A  00BF               	movwf	(step@time+1)^(0+128)
  3490  0D8B  3000               	movlw	0
  3491  0D8C  1BBF               	btfsc	(step@time+1)^(0+128),7
  3492  0D8D  30FF               	movlw	255
  3493  0D8E  00C0               	movwf	(step@time+2)^(0+128)
  3494  0D8F  00C1               	movwf	(step@time+3)^(0+128)
  3495  0D90  160A  118A  243B  120A  158A  	fcall	_step
  3496                           
  3497                           ;main.c: 250: }
  3498  0D95  2FF1               	goto	l4475
  3499  0D96                     l4417:	
  3500                           
  3501                           ;main.c: 251: else if(memcmp(content, "run(", 4) == 0){
  3502  0D96  3047               	movlw	low (STR_40| (0+32768))
  3503  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  3504  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  3505  0D99  00B5               	movwf	memcmp@s2
  3506  0D9A  3086               	movlw	high (STR_40| (0+32768))
  3507  0D9B  00B6               	movwf	memcmp@s2+1
  3508  0D9C  3004               	movlw	4
  3509  0D9D  00B7               	movwf	memcmp@n
  3510  0D9E  3000               	movlw	0
  3511  0D9F  00B8               	movwf	memcmp@n+1
  3512  0DA0  30D1               	movlw	(low (_content| 0))& (0+255)
  3513  0DA1  160A  118A  2024  120A  158A  	fcall	_memcmp
  3514  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  3515  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  3516  0DA8  0835               	movf	?_memcmp,w
  3517  0DA9  0436               	iorwf	?_memcmp+1,w
  3518  0DAA  1D03               	btfss	3,2
  3519  0DAB  2E86               	goto	l4437
  3520                           
  3521                           ;main.c: 252: char duty[10];
  3522                           ;main.c: 253: int firstP = strcspn(content, "(");
  3523  0DAC  304A               	movlw	low ((STR_40+3)| (0+32768))
  3524  0DAD  00BB               	movwf	strcspn@s2
  3525  0DAE  3086               	movlw	high ((STR_40+3)| (0+32768))
  3526  0DAF  00BC               	movwf	strcspn@s2+1
  3527  0DB0  30D1               	movlw	(low (_content| 0))& (0+255)
  3528  0DB1  160A  158A  2668  120A  158A  	fcall	_strcspn
  3529  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  3530  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0DB8  083C               	movf	?_strcspn+1,w
  3532  0DB9  1283               	bcf	3,5	;RP0=0, select bank2
  3533  0DBA  1703               	bsf	3,6	;RP1=1, select bank2
  3534  0DBB  00DD               	movwf	(choice@firstP_535+1)^(0+256)
  3535  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0DBE  083B               	movf	?_strcspn,w
  3538  0DBF  1283               	bcf	3,5	;RP0=0, select bank2
  3539  0DC0  1703               	bsf	3,6	;RP1=1, select bank2
  3540  0DC1  00DC               	movwf	choice@firstP_535^(0+256)
  3541                           
  3542                           ;main.c: 254: int secondP = strcspn(content, ")");
  3543  0DC2  300E               	movlw	low ((STR_48+8)| (0+32768))
  3544  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  3545  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  3546  0DC5  00BB               	movwf	strcspn@s2
  3547  0DC6  3086               	movlw	high ((STR_48+8)| (0+32768))
  3548  0DC7  00BC               	movwf	strcspn@s2+1
  3549  0DC8  30D1               	movlw	(low (_content| 0))& (0+255)
  3550  0DC9  160A  158A  2668  120A  158A  	fcall	_strcspn
  3551  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  3552  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  3553  0DD0  083C               	movf	?_strcspn+1,w
  3554  0DD1  1683               	bsf	3,5	;RP0=1, select bank3
  3555  0DD2  1703               	bsf	3,6	;RP1=1, select bank3
  3556  0DD3  00D1               	movwf	(choice@secondP_537+1)^(0+384)
  3557  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0DD6  083B               	movf	?_strcspn,w
  3560  0DD7  1683               	bsf	3,5	;RP0=1, select bank3
  3561  0DD8  1703               	bsf	3,6	;RP1=1, select bank3
  3562  0DD9  00D0               	movwf	choice@secondP_537^(0+384)
  3563                           
  3564                           ;main.c: 256: for(int i = 0 ; i<strlen(content); i++){
  3565  0DDA  1283               	bcf	3,5	;RP0=0, select bank2
  3566  0DDB  1703               	bsf	3,6	;RP1=1, select bank2
  3567  0DDC  01E4               	clrf	choice@i_539^(0+256)
  3568  0DDD  01E5               	clrf	(choice@i_539+1)^(0+256)
  3569  0DDE                     l4433:	
  3570  0DDE  30D1               	movlw	(low (_content| 0))& (0+255)
  3571  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  3572  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  3573  0DE1  00B5               	movwf	strlen@s
  3574  0DE2  3000               	movlw	0
  3575  0DE3  00B6               	movwf	strlen@s+1
  3576  0DE4  160A  158A  256C  120A  158A  	fcall	_strlen
  3577  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  3578  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  3579  0DEB  0836               	movf	?_strlen+1,w
  3580  0DEC  1283               	bcf	3,5	;RP0=0, select bank2
  3581  0DED  1703               	bsf	3,6	;RP1=1, select bank2
  3582  0DEE  0265               	subwf	(choice@i_539+1)^(0+256),w
  3583  0DEF  1D03               	skipz
  3584  0DF0  2DF7               	goto	u5485
  3585  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  3586  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  3587  0DF3  0835               	movf	?_strlen,w
  3588  0DF4  1283               	bcf	3,5	;RP0=0, select bank2
  3589  0DF5  1703               	bsf	3,6	;RP1=1, select bank2
  3590  0DF6  0264               	subwf	choice@i_539^(0+256),w
  3591  0DF7                     u5485:	
  3592  0DF7  1803               	btfsc	3,0
  3593  0DF8  2E6E               	goto	l4435
  3594                           
  3595                           ;main.c: 257: if(i < secondP - firstP - 1){
  3596  0DF9  085C               	movf	choice@firstP_535^(0+256),w
  3597  0DFA  3E01               	addlw	1
  3598  0DFB  1683               	bsf	3,5	;RP0=1, select bank1
  3599  0DFC  1303               	bcf	3,6	;RP1=0, select bank1
  3600  0DFD  00C4               	movwf	??_choice^(0+128)
  3601  0DFE  1283               	bcf	3,5	;RP0=0, select bank2
  3602  0DFF  1703               	bsf	3,6	;RP1=1, select bank2
  3603  0E00  085D               	movf	(choice@firstP_535+1)^(0+256),w
  3604  0E01  1803               	skipnc
  3605  0E02  3E01               	addlw	1
  3606  0E03  3E00               	addlw	0
  3607  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  3608  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  3609  0E06  00C5               	movwf	(??_choice+1)^(0+128)
  3610  0E07  09C4               	comf	??_choice^(0+128),f
  3611  0E08  09C5               	comf	(??_choice^(0+128)+1),f
  3612  0E09  0AC4               	incf	??_choice^(0+128),f
  3613  0E0A  1903               	skipnz
  3614  0E0B  0AC5               	incf	(??_choice^(0+128)+1),f
  3615  0E0C  1683               	bsf	3,5	;RP0=1, select bank3
  3616  0E0D  1703               	bsf	3,6	;RP1=1, select bank3
  3617  0E0E  0850               	movf	choice@secondP_537^(0+384),w
  3618  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  3619  0E10  1303               	bcf	3,6	;RP1=0, select bank1
  3620  0E11  0744               	addwf	??_choice^(0+128),w
  3621  0E12  00C6               	movwf	(??_choice+2)^(0+128)
  3622  0E13  1683               	bsf	3,5	;RP0=1, select bank3
  3623  0E14  1703               	bsf	3,6	;RP1=1, select bank3
  3624  0E15  0851               	movf	(choice@secondP_537+1)^(0+384),w
  3625  0E16  1803               	skipnc
  3626  0E17  0A51               	incf	(choice@secondP_537+1)^(0+384),w
  3627  0E18  1683               	bsf	3,5	;RP0=1, select bank1
  3628  0E19  1303               	bcf	3,6	;RP1=0, select bank1
  3629  0E1A  0745               	addwf	(??_choice+1)^(0+128),w
  3630  0E1B  00C7               	movwf	(??_choice+3)^(0+128)
  3631  0E1C  1283               	bcf	3,5	;RP0=0, select bank2
  3632  0E1D  1703               	bsf	3,6	;RP1=1, select bank2
  3633  0E1E  0865               	movf	(choice@i_539+1)^(0+256),w
  3634  0E1F  3A80               	xorlw	128
  3635  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  3636  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  3637  0E22  00C8               	movwf	(??_choice+4)^(0+128)
  3638  0E23  0847               	movf	(??_choice+3)^(0+128),w
  3639  0E24  3A80               	xorlw	128
  3640  0E25  0248               	subwf	(??_choice+4)^(0+128),w
  3641  0E26  1D03               	skipz
  3642  0E27  2E2C               	goto	u5465
  3643  0E28  0846               	movf	(??_choice+2)^(0+128),w
  3644  0E29  1283               	bcf	3,5	;RP0=0, select bank2
  3645  0E2A  1703               	bsf	3,6	;RP1=1, select bank2
  3646  0E2B  0264               	subwf	choice@i_539^(0+256),w
  3647  0E2C                     u5465:	
  3648  0E2C  1803               	skipnc
  3649  0E2D  2E45               	goto	l4427
  3650                           
  3651                           ;main.c: 258: duty[i] = content[firstP+i+1];
  3652  0E2E  1283               	bcf	3,5	;RP0=0, select bank2
  3653  0E2F  1703               	bsf	3,6	;RP1=1, select bank2
  3654  0E30  0864               	movf	choice@i_539^(0+256),w
  3655  0E31  075C               	addwf	choice@firstP_535^(0+256),w
  3656  0E32  3E01               	addlw	1
  3657  0E33  3ED1               	addlw	(low (_content| 0))& (0+255)
  3658  0E34  0084               	movwf	4
  3659  0E35  1383               	bcf	3,7	;select IRP bank1
  3660  0E36  0800               	movf	0,w
  3661  0E37  1683               	bsf	3,5	;RP0=1, select bank1
  3662  0E38  1303               	bcf	3,6	;RP1=0, select bank1
  3663  0E39  00C4               	movwf	??_choice^(0+128)
  3664  0E3A  1283               	bcf	3,5	;RP0=0, select bank2
  3665  0E3B  1703               	bsf	3,6	;RP1=1, select bank2
  3666  0E3C  0864               	movf	choice@i_539^(0+256),w
  3667  0E3D  3EBA               	addlw	(low (choice@duty_534| (0+256)))& (0+255)
  3668  0E3E  0084               	movwf	4
  3669  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
  3670  0E40  1303               	bcf	3,6	;RP1=0, select bank1
  3671  0E41  0844               	movf	??_choice^(0+128),w
  3672  0E42  1783               	bsf	3,7	;select IRP bank3
  3673  0E43  0080               	movwf	0
  3674                           
  3675                           ;main.c: 259: }
  3676  0E44  2E65               	goto	l4431
  3677  0E45                     l4427:	
  3678                           
  3679                           ;main.c: 260: else if (i<strlen(duty)){
  3680  0E45  30BA               	movlw	(low (choice@duty_534| (0+256)))& (0+255)
  3681  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  3683  0E48  00B5               	movwf	strlen@s
  3684  0E49  3001               	movlw	1
  3685  0E4A  00B6               	movwf	strlen@s+1
  3686  0E4B  160A  158A  256C  120A  158A  	fcall	_strlen
  3687  0E50  1283               	bcf	3,5	;RP0=0, select bank0
  3688  0E51  1303               	bcf	3,6	;RP1=0, select bank0
  3689  0E52  0836               	movf	?_strlen+1,w
  3690  0E53  1283               	bcf	3,5	;RP0=0, select bank2
  3691  0E54  1703               	bsf	3,6	;RP1=1, select bank2
  3692  0E55  0265               	subwf	(choice@i_539+1)^(0+256),w
  3693  0E56  1D03               	skipz
  3694  0E57  2E5E               	goto	u5475
  3695  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0E5A  0835               	movf	?_strlen,w
  3698  0E5B  1283               	bcf	3,5	;RP0=0, select bank2
  3699  0E5C  1703               	bsf	3,6	;RP1=1, select bank2
  3700  0E5D  0264               	subwf	choice@i_539^(0+256),w
  3701  0E5E                     u5475:	
  3702  0E5E  1803               	skipnc
  3703  0E5F  2E65               	goto	l4431
  3704                           
  3705                           ;main.c: 261: duty[i] = '\0';
  3706  0E60  0864               	movf	choice@i_539^(0+256),w
  3707  0E61  3EBA               	addlw	(low (choice@duty_534| (0+256)))& (0+255)
  3708  0E62  0084               	movwf	4
  3709  0E63  1783               	bsf	3,7	;select IRP bank3
  3710  0E64  0180               	clrf	0
  3711  0E65                     l4431:	
  3712  0E65  3001               	movlw	1
  3713  0E66  1283               	bcf	3,5	;RP0=0, select bank2
  3714  0E67  1703               	bsf	3,6	;RP1=1, select bank2
  3715  0E68  07E4               	addwf	choice@i_539^(0+256),f
  3716  0E69  1803               	skipnc
  3717  0E6A  0AE5               	incf	(choice@i_539+1)^(0+256),f
  3718  0E6B  3000               	movlw	0
  3719  0E6C  07E5               	addwf	(choice@i_539+1)^(0+256),f
  3720  0E6D  2DDE               	goto	l4433
  3721  0E6E                     l4435:	
  3722                           
  3723                           ;main.c: 262: }
  3724                           ;main.c: 263: }
  3725                           ;main.c: 264: run(atoi(duty));
  3726  0E6E  30BA               	movlw	(low (choice@duty_534| (0+256)))& (0+255)
  3727  0E6F  160A  118A  233C  120A  158A  	fcall	_atoi
  3728  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  3729  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  3730  0E76  083C               	movf	?_atoi+1,w
  3731  0E77  1683               	bsf	3,5	;RP0=1, select bank1
  3732  0E78  1303               	bcf	3,6	;RP1=0, select bank1
  3733  0E79  00BD               	movwf	(run@duty+1)^(0+128)
  3734  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  3735  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  3736  0E7C  083B               	movf	?_atoi,w
  3737  0E7D  1683               	bsf	3,5	;RP0=1, select bank1
  3738  0E7E  1303               	bcf	3,6	;RP1=0, select bank1
  3739  0E7F  00BC               	movwf	run@duty^(0+128)
  3740  0E80  160A  158A  2780  120A  158A  	fcall	_run
  3741                           
  3742                           ;main.c: 265: }
  3743  0E85  2FF1               	goto	l4475
  3744  0E86                     l4437:	
  3745                           
  3746                           ;main.c: 266: else if(memcmp(content, "sys(", 4) == 0){
  3747  0E86  304C               	movlw	low (STR_43| (0+32768))
  3748  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  3749  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  3750  0E89  00B5               	movwf	memcmp@s2
  3751  0E8A  3086               	movlw	high (STR_43| (0+32768))
  3752  0E8B  00B6               	movwf	memcmp@s2+1
  3753  0E8C  3004               	movlw	4
  3754  0E8D  00B7               	movwf	memcmp@n
  3755  0E8E  3000               	movlw	0
  3756  0E8F  00B8               	movwf	memcmp@n+1
  3757  0E90  30D1               	movlw	(low (_content| 0))& (0+255)
  3758  0E91  160A  118A  2024  120A  158A  	fcall	_memcmp
  3759  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  3760  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  3761  0E98  0835               	movf	?_memcmp,w
  3762  0E99  0436               	iorwf	?_memcmp+1,w
  3763  0E9A  1D03               	btfss	3,2
  3764  0E9B  2F76               	goto	l4457
  3765                           
  3766                           ;main.c: 267: char duty[10];
  3767                           ;main.c: 268: int firstP = strcspn(content, "(");
  3768  0E9C  304A               	movlw	low ((STR_40+3)| (0+32768))
  3769  0E9D  00BB               	movwf	strcspn@s2
  3770  0E9E  3086               	movlw	high ((STR_40+3)| (0+32768))
  3771  0E9F  00BC               	movwf	strcspn@s2+1
  3772  0EA0  30D1               	movlw	(low (_content| 0))& (0+255)
  3773  0EA1  160A  158A  2668  120A  158A  	fcall	_strcspn
  3774  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  3775  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  3776  0EA8  083C               	movf	?_strcspn+1,w
  3777  0EA9  1283               	bcf	3,5	;RP0=0, select bank2
  3778  0EAA  1703               	bsf	3,6	;RP1=1, select bank2
  3779  0EAB  00DF               	movwf	(choice@firstP_542+1)^(0+256)
  3780  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  3781  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  3782  0EAE  083B               	movf	?_strcspn,w
  3783  0EAF  1283               	bcf	3,5	;RP0=0, select bank2
  3784  0EB0  1703               	bsf	3,6	;RP1=1, select bank2
  3785  0EB1  00DE               	movwf	choice@firstP_542^(0+256)
  3786                           
  3787                           ;main.c: 269: int secondP = strcspn(content, ")");
  3788  0EB2  300E               	movlw	low ((STR_48+8)| (0+32768))
  3789  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  3791  0EB5  00BB               	movwf	strcspn@s2
  3792  0EB6  3086               	movlw	high ((STR_48+8)| (0+32768))
  3793  0EB7  00BC               	movwf	strcspn@s2+1
  3794  0EB8  30D1               	movlw	(low (_content| 0))& (0+255)
  3795  0EB9  160A  158A  2668  120A  158A  	fcall	_strcspn
  3796  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  3797  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  3798  0EC0  083C               	movf	?_strcspn+1,w
  3799  0EC1  1683               	bsf	3,5	;RP0=1, select bank3
  3800  0EC2  1703               	bsf	3,6	;RP1=1, select bank3
  3801  0EC3  00D3               	movwf	(choice@secondP_544+1)^(0+384)
  3802  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  3803  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  3804  0EC6  083B               	movf	?_strcspn,w
  3805  0EC7  1683               	bsf	3,5	;RP0=1, select bank3
  3806  0EC8  1703               	bsf	3,6	;RP1=1, select bank3
  3807  0EC9  00D2               	movwf	choice@secondP_544^(0+384)
  3808                           
  3809                           ;main.c: 271: for(int i = 0 ; i<strlen(content); i++){
  3810  0ECA  1283               	bcf	3,5	;RP0=0, select bank2
  3811  0ECB  1703               	bsf	3,6	;RP1=1, select bank2
  3812  0ECC  01E6               	clrf	choice@i_546^(0+256)
  3813  0ECD  01E7               	clrf	(choice@i_546+1)^(0+256)
  3814  0ECE                     l4453:	
  3815  0ECE  30D1               	movlw	(low (_content| 0))& (0+255)
  3816  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3817  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3818  0ED1  00B5               	movwf	strlen@s
  3819  0ED2  3000               	movlw	0
  3820  0ED3  00B6               	movwf	strlen@s+1
  3821  0ED4  160A  158A  256C  120A  158A  	fcall	_strlen
  3822  0ED9  1283               	bcf	3,5	;RP0=0, select bank0
  3823  0EDA  1303               	bcf	3,6	;RP1=0, select bank0
  3824  0EDB  0836               	movf	?_strlen+1,w
  3825  0EDC  1283               	bcf	3,5	;RP0=0, select bank2
  3826  0EDD  1703               	bsf	3,6	;RP1=1, select bank2
  3827  0EDE  0267               	subwf	(choice@i_546+1)^(0+256),w
  3828  0EDF  1D03               	skipz
  3829  0EE0  2EE7               	goto	u5525
  3830  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  3832  0EE3  0835               	movf	?_strlen,w
  3833  0EE4  1283               	bcf	3,5	;RP0=0, select bank2
  3834  0EE5  1703               	bsf	3,6	;RP1=1, select bank2
  3835  0EE6  0266               	subwf	choice@i_546^(0+256),w
  3836  0EE7                     u5525:	
  3837  0EE7  1803               	btfsc	3,0
  3838  0EE8  2F5E               	goto	l4455
  3839                           
  3840                           ;main.c: 272: if(i < secondP - firstP - 1){
  3841  0EE9  085E               	movf	choice@firstP_542^(0+256),w
  3842  0EEA  3E01               	addlw	1
  3843  0EEB  1683               	bsf	3,5	;RP0=1, select bank1
  3844  0EEC  1303               	bcf	3,6	;RP1=0, select bank1
  3845  0EED  00C4               	movwf	??_choice^(0+128)
  3846  0EEE  1283               	bcf	3,5	;RP0=0, select bank2
  3847  0EEF  1703               	bsf	3,6	;RP1=1, select bank2
  3848  0EF0  085F               	movf	(choice@firstP_542+1)^(0+256),w
  3849  0EF1  1803               	skipnc
  3850  0EF2  3E01               	addlw	1
  3851  0EF3  3E00               	addlw	0
  3852  0EF4  1683               	bsf	3,5	;RP0=1, select bank1
  3853  0EF5  1303               	bcf	3,6	;RP1=0, select bank1
  3854  0EF6  00C5               	movwf	(??_choice+1)^(0+128)
  3855  0EF7  09C4               	comf	??_choice^(0+128),f
  3856  0EF8  09C5               	comf	(??_choice^(0+128)+1),f
  3857  0EF9  0AC4               	incf	??_choice^(0+128),f
  3858  0EFA  1903               	skipnz
  3859  0EFB  0AC5               	incf	(??_choice^(0+128)+1),f
  3860  0EFC  1683               	bsf	3,5	;RP0=1, select bank3
  3861  0EFD  1703               	bsf	3,6	;RP1=1, select bank3
  3862  0EFE  0852               	movf	choice@secondP_544^(0+384),w
  3863  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  3864  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  3865  0F01  0744               	addwf	??_choice^(0+128),w
  3866  0F02  00C6               	movwf	(??_choice+2)^(0+128)
  3867  0F03  1683               	bsf	3,5	;RP0=1, select bank3
  3868  0F04  1703               	bsf	3,6	;RP1=1, select bank3
  3869  0F05  0853               	movf	(choice@secondP_544+1)^(0+384),w
  3870  0F06  1803               	skipnc
  3871  0F07  0A53               	incf	(choice@secondP_544+1)^(0+384),w
  3872  0F08  1683               	bsf	3,5	;RP0=1, select bank1
  3873  0F09  1303               	bcf	3,6	;RP1=0, select bank1
  3874  0F0A  0745               	addwf	(??_choice+1)^(0+128),w
  3875  0F0B  00C7               	movwf	(??_choice+3)^(0+128)
  3876  0F0C  1283               	bcf	3,5	;RP0=0, select bank2
  3877  0F0D  1703               	bsf	3,6	;RP1=1, select bank2
  3878  0F0E  0867               	movf	(choice@i_546+1)^(0+256),w
  3879  0F0F  3A80               	xorlw	128
  3880  0F10  1683               	bsf	3,5	;RP0=1, select bank1
  3881  0F11  1303               	bcf	3,6	;RP1=0, select bank1
  3882  0F12  00C8               	movwf	(??_choice+4)^(0+128)
  3883  0F13  0847               	movf	(??_choice+3)^(0+128),w
  3884  0F14  3A80               	xorlw	128
  3885  0F15  0248               	subwf	(??_choice+4)^(0+128),w
  3886  0F16  1D03               	skipz
  3887  0F17  2F1C               	goto	u5505
  3888  0F18  0846               	movf	(??_choice+2)^(0+128),w
  3889  0F19  1283               	bcf	3,5	;RP0=0, select bank2
  3890  0F1A  1703               	bsf	3,6	;RP1=1, select bank2
  3891  0F1B  0266               	subwf	choice@i_546^(0+256),w
  3892  0F1C                     u5505:	
  3893  0F1C  1803               	skipnc
  3894  0F1D  2F35               	goto	l4447
  3895                           
  3896                           ;main.c: 273: duty[i] = content[firstP+i+1];
  3897  0F1E  1283               	bcf	3,5	;RP0=0, select bank2
  3898  0F1F  1703               	bsf	3,6	;RP1=1, select bank2
  3899  0F20  0866               	movf	choice@i_546^(0+256),w
  3900  0F21  075E               	addwf	choice@firstP_542^(0+256),w
  3901  0F22  3E01               	addlw	1
  3902  0F23  3ED1               	addlw	(low (_content| 0))& (0+255)
  3903  0F24  0084               	movwf	4
  3904  0F25  1383               	bcf	3,7	;select IRP bank1
  3905  0F26  0800               	movf	0,w
  3906  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  3907  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  3908  0F29  00C4               	movwf	??_choice^(0+128)
  3909  0F2A  1283               	bcf	3,5	;RP0=0, select bank2
  3910  0F2B  1703               	bsf	3,6	;RP1=1, select bank2
  3911  0F2C  0866               	movf	choice@i_546^(0+256),w
  3912  0F2D  3EC4               	addlw	(low (choice@duty_541| (0+256)))& (0+255)
  3913  0F2E  0084               	movwf	4
  3914  0F2F  1683               	bsf	3,5	;RP0=1, select bank1
  3915  0F30  1303               	bcf	3,6	;RP1=0, select bank1
  3916  0F31  0844               	movf	??_choice^(0+128),w
  3917  0F32  1783               	bsf	3,7	;select IRP bank3
  3918  0F33  0080               	movwf	0
  3919                           
  3920                           ;main.c: 274: }
  3921  0F34  2F55               	goto	l4451
  3922  0F35                     l4447:	
  3923                           
  3924                           ;main.c: 275: else if (i<strlen(duty)){
  3925  0F35  30C4               	movlw	(low (choice@duty_541| (0+256)))& (0+255)
  3926  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  3927  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  3928  0F38  00B5               	movwf	strlen@s
  3929  0F39  3001               	movlw	1
  3930  0F3A  00B6               	movwf	strlen@s+1
  3931  0F3B  160A  158A  256C  120A  158A  	fcall	_strlen
  3932  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0F42  0836               	movf	?_strlen+1,w
  3935  0F43  1283               	bcf	3,5	;RP0=0, select bank2
  3936  0F44  1703               	bsf	3,6	;RP1=1, select bank2
  3937  0F45  0267               	subwf	(choice@i_546+1)^(0+256),w
  3938  0F46  1D03               	skipz
  3939  0F47  2F4E               	goto	u5515
  3940  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  3941  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  3942  0F4A  0835               	movf	?_strlen,w
  3943  0F4B  1283               	bcf	3,5	;RP0=0, select bank2
  3944  0F4C  1703               	bsf	3,6	;RP1=1, select bank2
  3945  0F4D  0266               	subwf	choice@i_546^(0+256),w
  3946  0F4E                     u5515:	
  3947  0F4E  1803               	skipnc
  3948  0F4F  2F55               	goto	l4451
  3949                           
  3950                           ;main.c: 276: duty[i] = '\0';
  3951  0F50  0866               	movf	choice@i_546^(0+256),w
  3952  0F51  3EC4               	addlw	(low (choice@duty_541| (0+256)))& (0+255)
  3953  0F52  0084               	movwf	4
  3954  0F53  1783               	bsf	3,7	;select IRP bank3
  3955  0F54  0180               	clrf	0
  3956  0F55                     l4451:	
  3957  0F55  3001               	movlw	1
  3958  0F56  1283               	bcf	3,5	;RP0=0, select bank2
  3959  0F57  1703               	bsf	3,6	;RP1=1, select bank2
  3960  0F58  07E6               	addwf	choice@i_546^(0+256),f
  3961  0F59  1803               	skipnc
  3962  0F5A  0AE7               	incf	(choice@i_546+1)^(0+256),f
  3963  0F5B  3000               	movlw	0
  3964  0F5C  07E7               	addwf	(choice@i_546+1)^(0+256),f
  3965  0F5D  2ECE               	goto	l4453
  3966  0F5E                     l4455:	
  3967                           
  3968                           ;main.c: 277: }
  3969                           ;main.c: 278: }
  3970                           ;main.c: 279: sys(atoi(duty));
  3971  0F5E  30C4               	movlw	(low (choice@duty_541| (0+256)))& (0+255)
  3972  0F5F  160A  118A  233C  120A  158A  	fcall	_atoi
  3973  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  3974  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  3975  0F66  083C               	movf	?_atoi+1,w
  3976  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  3977  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  3978  0F69  00BD               	movwf	(sys@duty+1)^(0+128)
  3979  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3980  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3981  0F6C  083B               	movf	?_atoi,w
  3982  0F6D  1683               	bsf	3,5	;RP0=1, select bank1
  3983  0F6E  1303               	bcf	3,6	;RP1=0, select bank1
  3984  0F6F  00BC               	movwf	sys@duty^(0+128)
  3985  0F70  120A  158A  20FD  120A  158A  	fcall	_sys
  3986                           
  3987                           ;main.c: 280: }
  3988  0F75  2FF1               	goto	l4475
  3989  0F76                     l4457:	
  3990                           
  3991                           ;main.c: 281: else if(memcmp(content, "stop()", 6) == 0){
  3992  0F76  303A               	movlw	low (STR_46| (0+32768))
  3993  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  3994  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  3995  0F79  00B5               	movwf	memcmp@s2
  3996  0F7A  3086               	movlw	high (STR_46| (0+32768))
  3997  0F7B  00B6               	movwf	memcmp@s2+1
  3998  0F7C  3006               	movlw	6
  3999  0F7D  00B7               	movwf	memcmp@n
  4000  0F7E  3000               	movlw	0
  4001  0F7F  00B8               	movwf	memcmp@n+1
  4002  0F80  30D1               	movlw	(low (_content| 0))& (0+255)
  4003  0F81  160A  118A  2024  120A  158A  	fcall	_memcmp
  4004  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  4005  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  4006  0F88  0835               	movf	?_memcmp,w
  4007  0F89  0436               	iorwf	?_memcmp+1,w
  4008  0F8A  1D03               	btfss	3,2
  4009  0F8B  2F92               	goto	l4461
  4010                           
  4011                           ;main.c: 282: stop();
  4012  0F8C  160A  158A  2452  120A  158A  	fcall	_stop
  4013                           
  4014                           ;main.c: 283: }
  4015  0F91  2FF1               	goto	l4475
  4016  0F92                     l4461:	
  4017                           
  4018                           ;main.c: 284: else if(memcmp(content, "status()", 8) == 0){
  4019  0F92  3022               	movlw	low (STR_47| (0+32768))
  4020  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  4021  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  4022  0F95  00B5               	movwf	memcmp@s2
  4023  0F96  3086               	movlw	high (STR_47| (0+32768))
  4024  0F97  00B6               	movwf	memcmp@s2+1
  4025  0F98  3008               	movlw	8
  4026  0F99  00B7               	movwf	memcmp@n
  4027  0F9A  3000               	movlw	0
  4028  0F9B  00B8               	movwf	memcmp@n+1
  4029  0F9C  30D1               	movlw	(low (_content| 0))& (0+255)
  4030  0F9D  160A  118A  2024  120A  158A  	fcall	_memcmp
  4031  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4032  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4033  0FA4  0835               	movf	?_memcmp,w
  4034  0FA5  0436               	iorwf	?_memcmp+1,w
  4035  0FA6  1D03               	btfss	3,2
  4036  0FA7  2FAE               	goto	l4465
  4037                           
  4038                           ;main.c: 285: status();
  4039  0FA8  120A  158A  2010  120A  158A  	fcall	_status
  4040                           
  4041                           ;main.c: 286: }
  4042  0FAD  2FF1               	goto	l4475
  4043  0FAE                     l4465:	
  4044                           
  4045                           ;main.c: 287: else if(memcmp(content, "acquire()", 8) == 0){
  4046  0FAE  3006               	movlw	low (STR_48| (0+32768))
  4047  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0FB1  00B5               	movwf	memcmp@s2
  4050  0FB2  3086               	movlw	high (STR_48| (0+32768))
  4051  0FB3  00B6               	movwf	memcmp@s2+1
  4052  0FB4  3008               	movlw	8
  4053  0FB5  00B7               	movwf	memcmp@n
  4054  0FB6  3000               	movlw	0
  4055  0FB7  00B8               	movwf	memcmp@n+1
  4056  0FB8  30D1               	movlw	(low (_content| 0))& (0+255)
  4057  0FB9  160A  118A  2024  120A  158A  	fcall	_memcmp
  4058  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4059  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4060  0FC0  0835               	movf	?_memcmp,w
  4061  0FC1  0436               	iorwf	?_memcmp+1,w
  4062  0FC2  1D03               	btfss	3,2
  4063  0FC3  2FCA               	goto	l4469
  4064                           
  4065                           ;main.c: 288: acquire();
  4066  0FC4  160A  118A  226C  120A  158A  	fcall	_acquire
  4067                           
  4068                           ;main.c: 289: }
  4069  0FC9  2FF1               	goto	l4475
  4070  0FCA                     l4469:	
  4071                           
  4072                           ;main.c: 290: else if(memcmp(content, "help()", 6) == 0){
  4073  0FCA  3033               	movlw	low (STR_49| (0+32768))
  4074  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  4075  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  4076  0FCD  00B5               	movwf	memcmp@s2
  4077  0FCE  3086               	movlw	high (STR_49| (0+32768))
  4078  0FCF  00B6               	movwf	memcmp@s2+1
  4079  0FD0  3006               	movlw	6
  4080  0FD1  00B7               	movwf	memcmp@n
  4081  0FD2  3000               	movlw	0
  4082  0FD3  00B8               	movwf	memcmp@n+1
  4083  0FD4  30D1               	movlw	(low (_content| 0))& (0+255)
  4084  0FD5  160A  118A  2024  120A  158A  	fcall	_memcmp
  4085  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0FDC  0835               	movf	?_memcmp,w
  4088  0FDD  0436               	iorwf	?_memcmp+1,w
  4089  0FDE  1D03               	btfss	3,2
  4090  0FDF  2FE6               	goto	l4473
  4091                           
  4092                           ;main.c: 291: help();
  4093  0FE0  120A  158A  2232  120A  158A  	fcall	_help
  4094                           
  4095                           ;main.c: 292: }
  4096  0FE5  2FF1               	goto	l4475
  4097  0FE6                     l4473:	
  4098                           
  4099                           ;main.c: 293: else{
  4100                           ;main.c: 294: USARTWriteLine("You typed something wrong. ");
  4101  0FE6  304A               	movlw	low (STR_50| (0+32768))
  4102  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  4103  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  4104  0FE9  00B8               	movwf	USARTWriteLine@str
  4105  0FEA  3084               	movlw	high (STR_50| (0+32768))
  4106  0FEB  00B9               	movwf	USARTWriteLine@str+1
  4107  0FEC  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  4108  0FF1                     l4475:	
  4109                           
  4110                           ;main.c: 295: }
  4111                           ;main.c: 296: USARTGotoNewLine();
  4112  0FF1  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  4113                           
  4114                           ;main.c: 297: USARTWriteString(">");
  4115  0FF6  3058               	movlw	low (STR_1| (0+32768))
  4116  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  4117  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  4118  0FF9  00B6               	movwf	USARTWriteString@str
  4119  0FFA  3086               	movlw	high (STR_1| (0+32768))
  4120  0FFB  00B7               	movwf	USARTWriteString@str+1
  4121  0FFC  160A  158A  258F   	fcall	_USARTWriteString
  4122  0FFF  0008               	return
  4123  1000                     __end_of_choice:	
  4124                           
  4125                           	psect	text4
  4126  08FD                     __ptext4:	
  4127 ;; *************** function _sys *****************
  4128 ;; Defined at:
  4129 ;;		line 407 in file "main.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;  duty            2   28[BANK1 ] int 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  max_duty        2   34[BANK1 ] unsigned int 
  4134 ;;  valueAD         2   32[BANK1 ] unsigned int 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4144 ;;      Params:         0       0       2       0       0
  4145 ;;      Locals:         0       0       4       0       0
  4146 ;;      Temps:          0       0       2       0       0
  4147 ;;      Totals:         0       0       8       0       0
  4148 ;;Total ram usage:        8 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    7
  4151 ;; This function calls:
  4152 ;;		_USARTDataAvailable
  4153 ;;		_USARTGotoNewLine
  4154 ;;		_USARTWriteLine
  4155 ;;		_USARTWriteString
  4156 ;;		___awmod
  4157 ;;		___wmul
  4158 ;;		_rand
  4159 ;;		_sampling
  4160 ;;		_set_pwm
  4161 ;;		_sprintf
  4162 ;;		_srand
  4163 ;; This function is called by:
  4164 ;;		_choice
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _sys
  4170  08FD                     _sys:	
  4171                           
  4172                           ;main.c: 408: acquirement = 1;
  4173                           
  4174                           ;incstack = 0
  4175 ;; hardware stack exceeded
  4176                           ; Regs used in _sys: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4177  08FD  1283               	bcf	3,5	;RP0=0, select bank0
  4178  08FE  1303               	bcf	3,6	;RP1=0, select bank0
  4179  08FF  01D8               	clrf	_acquirement
  4180  0900  0AD8               	incf	_acquirement,f
  4181                           
  4182                           ;main.c: 409: unsigned int valueAD = sampling();
  4183  0901  160A  158A  2470  120A  158A  	fcall	_sampling
  4184  0906  1283               	bcf	3,5	;RP0=0, select bank0
  4185  0907  1303               	bcf	3,6	;RP1=0, select bank0
  4186  0908  0836               	movf	?_sampling+1,w
  4187  0909  1683               	bsf	3,5	;RP0=1, select bank1
  4188  090A  1303               	bcf	3,6	;RP1=0, select bank1
  4189  090B  00C1               	movwf	(sys@valueAD+1)^(0+128)
  4190  090C  1283               	bcf	3,5	;RP0=0, select bank0
  4191  090D  1303               	bcf	3,6	;RP1=0, select bank0
  4192  090E  0835               	movf	?_sampling,w
  4193  090F  1683               	bsf	3,5	;RP0=1, select bank1
  4194  0910  1303               	bcf	3,6	;RP1=0, select bank1
  4195  0911  00C0               	movwf	sys@valueAD^(0+128)
  4196                           
  4197                           ;main.c: 410: unsigned int max_duty = duty;
  4198  0912  083D               	movf	(sys@duty+1)^(0+128),w
  4199  0913  00C3               	movwf	(sys@max_duty+1)^(0+128)
  4200  0914  083C               	movf	sys@duty^(0+128),w
  4201  0915  00C2               	movwf	sys@max_duty^(0+128)
  4202                           
  4203                           ;main.c: 411: while(USARTDataAvailable() == 0 && acquirement){
  4204  0916  2A10               	goto	l4347
  4205  0917                     l4317:	
  4206                           
  4207                           ;main.c: 412: srand((unsigned) valueAD*TMR0 );
  4208  0917  1283               	bcf	3,5	;RP0=0, select bank0
  4209  0918  0801               	movf	1,w	;volatile
  4210  0919  1683               	bsf	3,5	;RP0=1, select bank1
  4211  091A  1303               	bcf	3,6	;RP1=0, select bank1
  4212  091B  00BE               	movwf	??_sys^(0+128)
  4213  091C  01BF               	clrf	(??_sys^(0+128)+1)
  4214  091D  083E               	movf	??_sys^(0+128),w
  4215  091E  1283               	bcf	3,5	;RP0=0, select bank0
  4216  091F  1303               	bcf	3,6	;RP1=0, select bank0
  4217  0920  00B5               	movwf	___wmul@multiplier
  4218  0921  1683               	bsf	3,5	;RP0=1, select bank1
  4219  0922  1303               	bcf	3,6	;RP1=0, select bank1
  4220  0923  083F               	movf	(??_sys+1)^(0+128),w
  4221  0924  1283               	bcf	3,5	;RP0=0, select bank0
  4222  0925  1303               	bcf	3,6	;RP1=0, select bank0
  4223  0926  00B6               	movwf	___wmul@multiplier+1
  4224  0927  1683               	bsf	3,5	;RP0=1, select bank1
  4225  0928  1303               	bcf	3,6	;RP1=0, select bank1
  4226  0929  0841               	movf	(sys@valueAD+1)^(0+128),w
  4227  092A  1283               	bcf	3,5	;RP0=0, select bank0
  4228  092B  1303               	bcf	3,6	;RP1=0, select bank0
  4229  092C  00B8               	movwf	___wmul@multiplicand+1
  4230  092D  1683               	bsf	3,5	;RP0=1, select bank1
  4231  092E  1303               	bcf	3,6	;RP1=0, select bank1
  4232  092F  0840               	movf	sys@valueAD^(0+128),w
  4233  0930  1283               	bcf	3,5	;RP0=0, select bank0
  4234  0931  1303               	bcf	3,6	;RP1=0, select bank0
  4235  0932  00B7               	movwf	___wmul@multiplicand
  4236  0933  160A  158A  2526  120A  158A  	fcall	___wmul
  4237  0938  1283               	bcf	3,5	;RP0=0, select bank0
  4238  0939  1303               	bcf	3,6	;RP1=0, select bank0
  4239  093A  0836               	movf	?___wmul+1,w
  4240  093B  00BC               	movwf	srand@x+1
  4241  093C  0835               	movf	?___wmul,w
  4242  093D  00BB               	movwf	srand@x
  4243  093E  120A  118A  27F6  120A  158A  	fcall	_srand
  4244                           
  4245                           ;main.c: 413: duty = rand()% 1000;
  4246  0943  30E8               	movlw	232
  4247  0944  1683               	bsf	3,5	;RP0=1, select bank1
  4248  0945  1303               	bcf	3,6	;RP1=0, select bank1
  4249  0946  00A0               	movwf	___awmod@divisor^(0+128)
  4250  0947  3003               	movlw	3
  4251  0948  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  4252  0949  160A  118A  20F3  120A  158A  	fcall	_rand
  4253  094E  1283               	bcf	3,5	;RP0=0, select bank0
  4254  094F  1303               	bcf	3,6	;RP1=0, select bank0
  4255  0950  0843               	movf	?_rand+1,w
  4256  0951  1683               	bsf	3,5	;RP0=1, select bank1
  4257  0952  1303               	bcf	3,6	;RP1=0, select bank1
  4258  0953  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  4259  0954  1283               	bcf	3,5	;RP0=0, select bank0
  4260  0955  1303               	bcf	3,6	;RP1=0, select bank0
  4261  0956  0842               	movf	?_rand,w
  4262  0957  1683               	bsf	3,5	;RP0=1, select bank1
  4263  0958  1303               	bcf	3,6	;RP1=0, select bank1
  4264  0959  00A2               	movwf	___awmod@dividend^(0+128)
  4265  095A  160A  118A  221B  120A  158A  	fcall	___awmod
  4266  095F  1683               	bsf	3,5	;RP0=1, select bank1
  4267  0960  1303               	bcf	3,6	;RP1=0, select bank1
  4268  0961  0821               	movf	(?___awmod+1)^(0+128),w
  4269  0962  00BD               	movwf	(sys@duty+1)^(0+128)
  4270  0963  0820               	movf	?___awmod^(0+128),w
  4271  0964  00BC               	movwf	sys@duty^(0+128)
  4272                           
  4273                           ;main.c: 414: if(duty>max_duty){
  4274  0965  083D               	movf	(sys@duty+1)^(0+128),w
  4275  0966  0243               	subwf	(sys@max_duty+1)^(0+128),w
  4276  0967  1D03               	skipz
  4277  0968  296B               	goto	u5325
  4278  0969  083C               	movf	sys@duty^(0+128),w
  4279  096A  0242               	subwf	sys@max_duty^(0+128),w
  4280  096B                     u5325:	
  4281  096B  1803               	skipnc
  4282  096C  2971               	goto	l4323
  4283                           
  4284                           ;main.c: 415: duty=max_duty;
  4285  096D  0843               	movf	(sys@max_duty+1)^(0+128),w
  4286  096E  00BD               	movwf	(sys@duty+1)^(0+128)
  4287  096F  0842               	movf	sys@max_duty^(0+128),w
  4288  0970  00BC               	movwf	sys@duty^(0+128)
  4289  0971                     l4323:	
  4290                           
  4291                           ;main.c: 416: }
  4292                           ;main.c: 417: set_pwm(duty);
  4293  0971  083D               	movf	(sys@duty+1)^(0+128),w
  4294  0972  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  4295  0973  083C               	movf	sys@duty^(0+128),w
  4296  0974  00B8               	movwf	set_pwm@percent^(0+128)
  4297  0975  120A  118A  2057  120A  158A  	fcall	_set_pwm
  4298                           
  4299                           ;main.c: 418: PR2 = 255;
  4300  097A  30FF               	movlw	255
  4301  097B  1683               	bsf	3,5	;RP0=1, select bank1
  4302  097C  1303               	bcf	3,6	;RP1=0, select bank1
  4303  097D  0092               	movwf	18	;volatile
  4304                           
  4305                           ;main.c: 419: USARTWriteString("Analog: ");
  4306  097E  3010               	movlw	low (STR_65| (0+32768))
  4307  097F  1283               	bcf	3,5	;RP0=0, select bank0
  4308  0980  1303               	bcf	3,6	;RP1=0, select bank0
  4309  0981  00B6               	movwf	USARTWriteString@str
  4310  0982  3086               	movlw	high (STR_65| (0+32768))
  4311  0983  00B7               	movwf	USARTWriteString@str+1
  4312  0984  160A  158A  258F  120A  158A  	fcall	_USARTWriteString
  4313                           
  4314                           ;main.c: 420: sprintf(strBuffer,"%d",valueAD);
  4315  0989  3051               	movlw	low (STR_52| (0+32768))
  4316  098A  1283               	bcf	3,5	;RP0=0, select bank0
  4317  098B  1303               	bcf	3,6	;RP1=0, select bank0
  4318  098C  00C3               	movwf	sprintf@f
  4319  098D  3086               	movlw	high (STR_52| (0+32768))
  4320  098E  00C4               	movwf	sprintf@f+1
  4321  098F  1683               	bsf	3,5	;RP0=1, select bank1
  4322  0990  1303               	bcf	3,6	;RP1=0, select bank1
  4323  0991  0841               	movf	(sys@valueAD+1)^(0+128),w
  4324  0992  1283               	bcf	3,5	;RP0=0, select bank0
  4325  0993  1303               	bcf	3,6	;RP1=0, select bank0
  4326  0994  00C6               	movwf	?_sprintf+3
  4327  0995  1683               	bsf	3,5	;RP0=1, select bank1
  4328  0996  1303               	bcf	3,6	;RP1=0, select bank1
  4329  0997  0840               	movf	sys@valueAD^(0+128),w
  4330  0998  1283               	bcf	3,5	;RP0=0, select bank0
  4331  0999  1303               	bcf	3,6	;RP1=0, select bank0
  4332  099A  00C5               	movwf	?_sprintf+2
  4333  099B  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4334  099C  160A  118A  26D6  120A  158A  	fcall	_sprintf
  4335                           
  4336                           ;main.c: 421: USARTWriteString(strBuffer);
  4337  09A1  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4338  09A2  1283               	bcf	3,5	;RP0=0, select bank0
  4339  09A3  1303               	bcf	3,6	;RP1=0, select bank0
  4340  09A4  00B6               	movwf	USARTWriteString@str
  4341  09A5  3001               	movlw	1
  4342  09A6  00B7               	movwf	USARTWriteString@str+1
  4343  09A7  160A  158A  258F  120A  158A  	fcall	_USARTWriteString
  4344                           
  4345                           ;main.c: 422: USARTWriteString(", Duty: ");
  4346  09AC  3019               	movlw	low (STR_67| (0+32768))
  4347  09AD  1283               	bcf	3,5	;RP0=0, select bank0
  4348  09AE  1303               	bcf	3,6	;RP1=0, select bank0
  4349  09AF  00B6               	movwf	USARTWriteString@str
  4350  09B0  3086               	movlw	high (STR_67| (0+32768))
  4351  09B1  00B7               	movwf	USARTWriteString@str+1
  4352  09B2  160A  158A  258F  120A  158A  	fcall	_USARTWriteString
  4353                           
  4354                           ;main.c: 423: sprintf(strBuffer,"%d",duty);
  4355  09B7  3051               	movlw	low (STR_52| (0+32768))
  4356  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  4357  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  4358  09BA  00C3               	movwf	sprintf@f
  4359  09BB  3086               	movlw	high (STR_52| (0+32768))
  4360  09BC  00C4               	movwf	sprintf@f+1
  4361  09BD  1683               	bsf	3,5	;RP0=1, select bank1
  4362  09BE  1303               	bcf	3,6	;RP1=0, select bank1
  4363  09BF  083D               	movf	(sys@duty+1)^(0+128),w
  4364  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  4365  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  4366  09C2  00C6               	movwf	?_sprintf+3
  4367  09C3  1683               	bsf	3,5	;RP0=1, select bank1
  4368  09C4  1303               	bcf	3,6	;RP1=0, select bank1
  4369  09C5  083C               	movf	sys@duty^(0+128),w
  4370  09C6  1283               	bcf	3,5	;RP0=0, select bank0
  4371  09C7  1303               	bcf	3,6	;RP1=0, select bank0
  4372  09C8  00C5               	movwf	?_sprintf+2
  4373  09C9  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4374  09CA  160A  118A  26D6  120A  158A  	fcall	_sprintf
  4375                           
  4376                           ;main.c: 424: USARTWriteString(strBuffer);
  4377  09CF  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4378  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  4379  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  4380  09D2  00B6               	movwf	USARTWriteString@str
  4381  09D3  3001               	movlw	1
  4382  09D4  00B7               	movwf	USARTWriteString@str+1
  4383  09D5  160A  158A  258F  120A  158A  	fcall	_USARTWriteString
  4384                           
  4385                           ;main.c: 425: USARTWriteString(", PR2: ");
  4386  09DA  302B               	movlw	low (STR_69| (0+32768))
  4387  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  4388  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  4389  09DD  00B6               	movwf	USARTWriteString@str
  4390  09DE  3086               	movlw	high (STR_69| (0+32768))
  4391  09DF  00B7               	movwf	USARTWriteString@str+1
  4392  09E0  160A  158A  258F  120A  158A  	fcall	_USARTWriteString
  4393                           
  4394                           ;main.c: 426: sprintf(strBuffer,"%d",PR2);
  4395  09E5  3051               	movlw	low (STR_52| (0+32768))
  4396  09E6  1283               	bcf	3,5	;RP0=0, select bank0
  4397  09E7  1303               	bcf	3,6	;RP1=0, select bank0
  4398  09E8  00C3               	movwf	sprintf@f
  4399  09E9  3086               	movlw	high (STR_52| (0+32768))
  4400  09EA  00C4               	movwf	sprintf@f+1
  4401  09EB  1683               	bsf	3,5	;RP0=1, select bank1
  4402  09EC  1303               	bcf	3,6	;RP1=0, select bank1
  4403  09ED  0812               	movf	18,w	;volatile
  4404  09EE  00BE               	movwf	??_sys^(0+128)
  4405  09EF  01BF               	clrf	(??_sys^(0+128)+1)
  4406  09F0  083E               	movf	??_sys^(0+128),w
  4407  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  4408  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  4409  09F3  00C5               	movwf	?_sprintf+2
  4410  09F4  1683               	bsf	3,5	;RP0=1, select bank1
  4411  09F5  1303               	bcf	3,6	;RP1=0, select bank1
  4412  09F6  083F               	movf	(??_sys+1)^(0+128),w
  4413  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  4414  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  4415  09F9  00C6               	movwf	?_sprintf+3
  4416  09FA  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4417  09FB  160A  118A  26D6  120A  158A  	fcall	_sprintf
  4418                           
  4419                           ;main.c: 427: USARTWriteString(strBuffer);
  4420  0A00  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  4421  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  4422  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  4423  0A03  00B6               	movwf	USARTWriteString@str
  4424  0A04  3001               	movlw	1
  4425  0A05  00B7               	movwf	USARTWriteString@str+1
  4426  0A06  160A  158A  258F  120A  158A  	fcall	_USARTWriteString
  4427                           
  4428                           ;main.c: 428: USARTGotoNewLine();
  4429  0A0B  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  4430  0A10                     l4347:	
  4431  0A10  160A  158A  2549  120A  158A  	fcall	_USARTDataAvailable
  4432  0A15  3A00               	xorlw	0
  4433  0A16  1D03               	skipz
  4434  0A17  2A1D               	goto	l4351
  4435  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  4436  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  4437  0A1A  0858               	movf	_acquirement,w
  4438  0A1B  1D03               	btfss	3,2
  4439  0A1C  2917               	goto	l4317
  4440  0A1D                     l4351:	
  4441                           
  4442                           ;main.c: 429: }
  4443                           ;main.c: 430: USARTWriteLine("If you want stop the system, type:");
  4444  0A1D  3005               	movlw	low ((STR_24+8)| (0+32768))
  4445  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  4446  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  4447  0A20  00B8               	movwf	USARTWriteLine@str
  4448  0A21  3084               	movlw	high ((STR_24+8)| (0+32768))
  4449  0A22  00B9               	movwf	USARTWriteLine@str+1
  4450  0A23  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  4451                           
  4452                           ;main.c: 431: USARTWriteLine("stop()");
  4453  0A28  303A               	movlw	low (STR_46| (0+32768))
  4454  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  4455  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  4456  0A2B  00B8               	movwf	USARTWriteLine@str
  4457  0A2C  3086               	movlw	high (STR_46| (0+32768))
  4458  0A2D  00B9               	movwf	USARTWriteLine@str+1
  4459  0A2E  160A  158A  2485   	fcall	_USARTWriteLine
  4460  0A31  0008               	return
  4461  0A32                     __end_of_sys:	
  4462                           
  4463                           	psect	text5
  4464  07F6                     __ptext5:	
  4465 ;; *************** function _srand *****************
  4466 ;; Defined at:
  4467 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;  x               2   27[BANK0 ] unsigned int 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;		None
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  1    wreg      void 
  4474 ;; Registers used:
  4475 ;;		wreg
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4481 ;;      Params:         0       2       0       0       0
  4482 ;;      Locals:         0       0       0       0       0
  4483 ;;      Temps:          0       0       0       0       0
  4484 ;;      Totals:         0       2       0       0       0
  4485 ;;Total ram usage:        2 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    4
  4488 ;; This function calls:
  4489 ;;		Nothing
  4490 ;; This function is called by:
  4491 ;;		_sys
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           
  4496                           ;psect for function _srand
  4497  07F6                     _srand:	
  4498                           
  4499                           ;incstack = 0
  4500                           ; Regs used in _srand: [wreg]
  4501  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  4502  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  4503  07F8  083B               	movf	srand@x,w
  4504  07F9  00D4               	movwf	_randx
  4505  07FA  083C               	movf	srand@x+1,w
  4506  07FB  00D5               	movwf	_randx+1
  4507  07FC  01D6               	clrf	_randx+2
  4508  07FD  01D7               	clrf	_randx+3
  4509  07FE  0008               	return
  4510  07FF                     __end_of_srand:	
  4511                           
  4512                           	psect	text6
  4513  10F3                     __ptext6:	
  4514 ;; *************** function _rand *****************
  4515 ;; Defined at:
  4516 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  2   34[BANK0 ] int 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0, pclath, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4530 ;;      Params:         0       2       0       0       0
  4531 ;;      Locals:         0       0       0       0       0
  4532 ;;      Temps:          0       5       0       0       0
  4533 ;;      Totals:         0       7       0       0       0
  4534 ;;Total ram usage:        7 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    5
  4537 ;; This function calls:
  4538 ;;		___lmul
  4539 ;; This function is called by:
  4540 ;;		_sys
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _rand
  4546  10F3                     _rand:	
  4547                           
  4548                           ;incstack = 0
  4549 ;; hardware stack exceeded
  4550                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  4551  10F3  1283               	bcf	3,5	;RP0=0, select bank0
  4552  10F4  1303               	bcf	3,6	;RP1=0, select bank0
  4553  10F5  0857               	movf	_randx+3,w
  4554  10F6  00B8               	movwf	___lmul@multiplier+3
  4555  10F7  0856               	movf	_randx+2,w
  4556  10F8  00B7               	movwf	___lmul@multiplier+2
  4557  10F9  0855               	movf	_randx+1,w
  4558  10FA  00B6               	movwf	___lmul@multiplier+1
  4559  10FB  0854               	movf	_randx,w
  4560  10FC  00B5               	movwf	___lmul@multiplier
  4561  10FD  3041               	movlw	65
  4562  10FE  00BC               	movwf	___lmul@multiplicand+3
  4563  10FF  30C6               	movlw	198
  4564  1100  00BB               	movwf	___lmul@multiplicand+2
  4565  1101  304E               	movlw	78
  4566  1102  00BA               	movwf	___lmul@multiplicand+1
  4567  1103  306D               	movlw	109
  4568  1104  00B9               	movwf	___lmul@multiplicand
  4569  1105  160A  158A  27BF  160A  118A  	fcall	___lmul
  4570  110A  1283               	bcf	3,5	;RP0=0, select bank0
  4571  110B  1303               	bcf	3,6	;RP1=0, select bank0
  4572  110C  0838               	movf	?___lmul+3,w
  4573  110D  00D7               	movwf	_randx+3
  4574  110E  0837               	movf	?___lmul+2,w
  4575  110F  00D6               	movwf	_randx+2
  4576  1110  0836               	movf	?___lmul+1,w
  4577  1111  00D5               	movwf	_randx+1
  4578  1112  0835               	movf	?___lmul,w
  4579  1113  00D4               	movwf	_randx
  4580  1114  3039               	movlw	57
  4581  1115  07D4               	addwf	_randx,f
  4582  1116  3030               	movlw	48
  4583  1117  1803               	skipnc
  4584  1118  3031               	movlw	49
  4585  1119  07D5               	addwf	_randx+1,f
  4586  111A  3000               	movlw	0
  4587  111B  1803               	skipnc
  4588  111C  3001               	movlw	1
  4589  111D  07D6               	addwf	_randx+2,f
  4590  111E  3000               	movlw	0
  4591  111F  1803               	skipnc
  4592  1120  3001               	movlw	1
  4593  1121  07D7               	addwf	_randx+3,f
  4594  1122  0854               	movf	_randx,w
  4595  1123  00C4               	movwf	??_rand
  4596  1124  0855               	movf	_randx+1,w
  4597  1125  00C5               	movwf	??_rand+1
  4598  1126  0856               	movf	_randx+2,w
  4599  1127  00C6               	movwf	??_rand+2
  4600  1128  0857               	movf	_randx+3,w
  4601  1129  00C7               	movwf	??_rand+3
  4602  112A  3010               	movlw	16
  4603  112B  00C8               	movwf	??_rand+4
  4604  112C                     u4915:	
  4605  112C  0D47               	rlf	??_rand+3,w
  4606  112D  0CC7               	rrf	??_rand+3,f
  4607  112E  0CC6               	rrf	??_rand+2,f
  4608  112F  0CC5               	rrf	??_rand+1,f
  4609  1130  0CC4               	rrf	??_rand,f
  4610  1131  0BC8               	decfsz	??_rand+4,f
  4611  1132  292C               	goto	u4915
  4612  1133  30FF               	movlw	255
  4613  1134  0544               	andwf	??_rand,w
  4614  1135  00C2               	movwf	?_rand
  4615  1136  307F               	movlw	127
  4616  1137  0545               	andwf	??_rand+1,w
  4617  1138  00C3               	movwf	?_rand+1
  4618  1139  0008               	return
  4619  113A                     __end_of_rand:	
  4620                           
  4621                           	psect	text7
  4622  1FBF                     __ptext7:	
  4623 ;; *************** function ___lmul *****************
  4624 ;; Defined at:
  4625 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  multiplier      4   21[BANK0 ] unsigned long 
  4628 ;;  multiplicand    4   25[BANK0 ] unsigned long 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  product         4   30[BANK0 ] unsigned long 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  4   21[BANK0 ] unsigned long 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4640 ;;      Params:         0       8       0       0       0
  4641 ;;      Locals:         0       4       0       0       0
  4642 ;;      Temps:          0       1       0       0       0
  4643 ;;      Totals:         0      13       0       0       0
  4644 ;;Total ram usage:       13 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    4
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_rand
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function ___lmul
  4656  1FBF                     ___lmul:	
  4657                           
  4658                           ;incstack = 0
  4659 ;; hardware stack exceeded
  4660                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4661  1FBF  3000               	movlw	0
  4662  1FC0  1283               	bcf	3,5	;RP0=0, select bank0
  4663  1FC1  1303               	bcf	3,6	;RP1=0, select bank0
  4664  1FC2  00C1               	movwf	___lmul@product+3
  4665  1FC3  3000               	movlw	0
  4666  1FC4  00C0               	movwf	___lmul@product+2
  4667  1FC5  3000               	movlw	0
  4668  1FC6  00BF               	movwf	___lmul@product+1
  4669  1FC7  3000               	movlw	0
  4670  1FC8  00BE               	movwf	___lmul@product
  4671  1FC9                     l3943:	
  4672  1FC9  1C35               	btfss	___lmul@multiplier,0
  4673  1FCA  2FDF               	goto	l3947
  4674  1FCB  0839               	movf	___lmul@multiplicand,w
  4675  1FCC  07BE               	addwf	___lmul@product,f
  4676  1FCD  083A               	movf	___lmul@multiplicand+1,w
  4677  1FCE  1103               	clrz
  4678  1FCF  1803               	skipnc
  4679  1FD0  3E01               	addlw	1
  4680  1FD1  1D03               	btfss	3,2
  4681  1FD2  07BF               	addwf	___lmul@product+1,f
  4682  1FD3  083B               	movf	___lmul@multiplicand+2,w
  4683  1FD4  1103               	clrz
  4684  1FD5  1803               	skipnc
  4685  1FD6  3E01               	addlw	1
  4686  1FD7  1D03               	btfss	3,2
  4687  1FD8  07C0               	addwf	___lmul@product+2,f
  4688  1FD9  083C               	movf	___lmul@multiplicand+3,w
  4689  1FDA  1103               	clrz
  4690  1FDB  1803               	skipnc
  4691  1FDC  3E01               	addlw	1
  4692  1FDD  1D03               	btfss	3,2
  4693  1FDE  07C1               	addwf	___lmul@product+3,f
  4694  1FDF                     l3947:	
  4695  1FDF  3001               	movlw	1
  4696  1FE0  00BD               	movwf	??___lmul
  4697  1FE1                     u4815:	
  4698  1FE1  1003               	clrc
  4699  1FE2  0DB9               	rlf	___lmul@multiplicand,f
  4700  1FE3  0DBA               	rlf	___lmul@multiplicand+1,f
  4701  1FE4  0DBB               	rlf	___lmul@multiplicand+2,f
  4702  1FE5  0DBC               	rlf	___lmul@multiplicand+3,f
  4703  1FE6  0BBD               	decfsz	??___lmul,f
  4704  1FE7  2FE1               	goto	u4815
  4705  1FE8  3001               	movlw	1
  4706  1FE9                     u4825:	
  4707  1FE9  1003               	clrc
  4708  1FEA  0CB8               	rrf	___lmul@multiplier+3,f
  4709  1FEB  0CB7               	rrf	___lmul@multiplier+2,f
  4710  1FEC  0CB6               	rrf	___lmul@multiplier+1,f
  4711  1FED  0CB5               	rrf	___lmul@multiplier,f
  4712  1FEE  3EFF               	addlw	-1
  4713  1FEF  1D03               	skipz
  4714  1FF0  2FE9               	goto	u4825
  4715  1FF1  0838               	movf	___lmul@multiplier+3,w
  4716  1FF2  0437               	iorwf	___lmul@multiplier+2,w
  4717  1FF3  0436               	iorwf	___lmul@multiplier+1,w
  4718  1FF4  0435               	iorwf	___lmul@multiplier,w
  4719  1FF5  1D03               	skipz
  4720  1FF6  2FC9               	goto	l3943
  4721  1FF7  0841               	movf	___lmul@product+3,w
  4722  1FF8  00B8               	movwf	?___lmul+3
  4723  1FF9  0840               	movf	___lmul@product+2,w
  4724  1FFA  00B7               	movwf	?___lmul+2
  4725  1FFB  083F               	movf	___lmul@product+1,w
  4726  1FFC  00B6               	movwf	?___lmul+1
  4727  1FFD  083E               	movf	___lmul@product,w
  4728  1FFE  00B5               	movwf	?___lmul
  4729  1FFF  0008               	return
  4730  2000                     __end_of___lmul:	
  4731                           
  4732                           	psect	text8
  4733  121B                     __ptext8:	
  4734 ;; *************** function ___awmod *****************
  4735 ;; Defined at:
  4736 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  divisor         2    0[BANK1 ] int 
  4739 ;;  dividend        2    2[BANK1 ] int 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  sign            1    5[BANK1 ] unsigned char 
  4742 ;;  counter         1    4[BANK1 ] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  2    0[BANK1 ] int 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4752 ;;      Params:         0       0       4       0       0
  4753 ;;      Locals:         0       0       2       0       0
  4754 ;;      Temps:          0       1       0       0       0
  4755 ;;      Totals:         0       1       6       0       0
  4756 ;;Total ram usage:        7 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    4
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_sys
  4763 ;;		_USARTWriteInt
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function ___awmod
  4769  121B                     ___awmod:	
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4773  121B  1683               	bsf	3,5	;RP0=1, select bank1
  4774  121C  1303               	bcf	3,6	;RP1=0, select bank1
  4775  121D  01A5               	clrf	___awmod@sign^(0+128)
  4776  121E  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  4777  121F  2A27               	goto	l4051
  4778  1220  09A2               	comf	___awmod@dividend^(0+128),f
  4779  1221  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4780  1222  0AA2               	incf	___awmod@dividend^(0+128),f
  4781  1223  1903               	skipnz
  4782  1224  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4783  1225  01A5               	clrf	___awmod@sign^(0+128)
  4784  1226  0AA5               	incf	___awmod@sign^(0+128),f
  4785  1227                     l4051:	
  4786  1227  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  4787  1228  2A2E               	goto	l4055
  4788  1229  09A0               	comf	___awmod@divisor^(0+128),f
  4789  122A  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  4790  122B  0AA0               	incf	___awmod@divisor^(0+128),f
  4791  122C  1903               	skipnz
  4792  122D  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  4793  122E                     l4055:	
  4794  122E  0820               	movf	___awmod@divisor^(0+128),w
  4795  122F  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  4796  1230  1903               	btfsc	3,2
  4797  1231  2A5F               	goto	l4073
  4798  1232  01A4               	clrf	___awmod@counter^(0+128)
  4799  1233  0AA4               	incf	___awmod@counter^(0+128),f
  4800  1234                     l4063:	
  4801  1234  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  4802  1235  2A46               	goto	l4065
  4803  1236  3001               	movlw	1
  4804  1237                     u5015:	
  4805  1237  1003               	clrc
  4806  1238  0DA0               	rlf	___awmod@divisor^(0+128),f
  4807  1239  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  4808  123A  3EFF               	addlw	-1
  4809  123B  1D03               	skipz
  4810  123C  2A37               	goto	u5015
  4811  123D  3001               	movlw	1
  4812  123E  1283               	bcf	3,5	;RP0=0, select bank0
  4813  123F  1303               	bcf	3,6	;RP1=0, select bank0
  4814  1240  00C9               	movwf	??___awmod
  4815  1241  0849               	movf	??___awmod,w
  4816  1242  1683               	bsf	3,5	;RP0=1, select bank1
  4817  1243  1303               	bcf	3,6	;RP1=0, select bank1
  4818  1244  07A4               	addwf	___awmod@counter^(0+128),f
  4819  1245  2A34               	goto	l4063
  4820  1246                     l4065:	
  4821  1246  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4822  1247  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  4823  1248  1D03               	skipz
  4824  1249  2A4C               	goto	u5035
  4825  124A  0820               	movf	___awmod@divisor^(0+128),w
  4826  124B  0222               	subwf	___awmod@dividend^(0+128),w
  4827  124C                     u5035:	
  4828  124C  1C03               	skipc
  4829  124D  2A54               	goto	l4069
  4830  124E  0820               	movf	___awmod@divisor^(0+128),w
  4831  124F  02A2               	subwf	___awmod@dividend^(0+128),f
  4832  1250  0821               	movf	(___awmod@divisor+1)^(0+128),w
  4833  1251  1C03               	skipc
  4834  1252  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  4835  1253  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  4836  1254                     l4069:	
  4837  1254  3001               	movlw	1
  4838  1255                     u5045:	
  4839  1255  1003               	clrc
  4840  1256  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  4841  1257  0CA0               	rrf	___awmod@divisor^(0+128),f
  4842  1258  3EFF               	addlw	-1
  4843  1259  1D03               	skipz
  4844  125A  2A55               	goto	u5045
  4845  125B  3001               	movlw	1
  4846  125C  02A4               	subwf	___awmod@counter^(0+128),f
  4847  125D  1D03               	btfss	3,2
  4848  125E  2A46               	goto	l4065
  4849  125F                     l4073:	
  4850  125F  0825               	movf	___awmod@sign^(0+128),w
  4851  1260  1903               	btfsc	3,2
  4852  1261  2A67               	goto	l4077
  4853  1262  09A2               	comf	___awmod@dividend^(0+128),f
  4854  1263  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  4855  1264  0AA2               	incf	___awmod@dividend^(0+128),f
  4856  1265  1903               	skipnz
  4857  1266  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  4858  1267                     l4077:	
  4859  1267  0823               	movf	(___awmod@dividend+1)^(0+128),w
  4860  1268  00A1               	movwf	(?___awmod+1)^(0+128)
  4861  1269  0822               	movf	___awmod@dividend^(0+128),w
  4862  126A  00A0               	movwf	?___awmod^(0+128)
  4863  126B  0008               	return
  4864  126C                     __end_of___awmod:	
  4865                           
  4866                           	psect	text9
  4867  1D6C                     __ptext9:	
  4868 ;; *************** function _strlen *****************
  4869 ;; Defined at:
  4870 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  s               2   21[BANK0 ] PTR const unsigned char 
  4873 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  4874 ;;		 -> content(25), 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
  4877 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  4878 ;;		 -> content(25), 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  2   21[BANK0 ] unsigned int 
  4881 ;; Registers used:
  4882 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4888 ;;      Params:         0       2       0       0       0
  4889 ;;      Locals:         0       2       0       0       0
  4890 ;;      Temps:          0       2       0       0       0
  4891 ;;      Totals:         0       6       0       0       0
  4892 ;;Total ram usage:        6 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    4
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_choice
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _strlen
  4904  1D6C                     _strlen:	
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  4908  1D6C  1283               	bcf	3,5	;RP0=0, select bank0
  4909  1D6D  1303               	bcf	3,6	;RP1=0, select bank0
  4910  1D6E  0835               	movf	strlen@s,w
  4911  1D6F  00B9               	movwf	strlen@cp
  4912  1D70  0836               	movf	strlen@s+1,w
  4913  1D71  00BA               	movwf	strlen@cp+1
  4914  1D72                     l4225:	
  4915  1D72  0839               	movf	strlen@cp,w
  4916  1D73  0084               	movwf	4
  4917  1D74  1783               	bsf	3,7
  4918  1D75  1C3A               	btfss	strlen@cp+1,0
  4919  1D76  1383               	bcf	3,7
  4920  1D77  0800               	movf	0,w
  4921  1D78  1903               	btfsc	3,2
  4922  1D79  2D7F               	goto	l4227
  4923  1D7A  3001               	movlw	1
  4924  1D7B  07B9               	addwf	strlen@cp,f
  4925  1D7C  1803               	skipnc
  4926  1D7D  0ABA               	incf	strlen@cp+1,f
  4927  1D7E  2D72               	goto	l4225
  4928  1D7F                     l4227:	
  4929  1D7F  0935               	comf	strlen@s,w
  4930  1D80  00B7               	movwf	??_strlen
  4931  1D81  0936               	comf	strlen@s+1,w
  4932  1D82  00B8               	movwf	??_strlen+1
  4933  1D83  0AB7               	incf	??_strlen,f
  4934  1D84  1903               	skipnz
  4935  1D85  0AB8               	incf	??_strlen+1,f
  4936  1D86  0839               	movf	strlen@cp,w
  4937  1D87  0737               	addwf	??_strlen,w
  4938  1D88  00B5               	movwf	?_strlen
  4939  1D89  083A               	movf	strlen@cp+1,w
  4940  1D8A  1803               	skipnc
  4941  1D8B  0A3A               	incf	strlen@cp+1,w
  4942  1D8C  0738               	addwf	??_strlen+1,w
  4943  1D8D  00B6               	movwf	?_strlen+1
  4944  1D8E  0008               	return
  4945  1D8F                     __end_of_strlen:	
  4946                           
  4947                           	psect	text10
  4948  1E68                     __ptext10:	
  4949 ;; *************** function _strcspn *****************
  4950 ;; Defined at:
  4951 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  s1              1    wreg     PTR const unsigned char 
  4954 ;;		 -> content(25), 
  4955 ;;  s2              2   27[BANK0 ] PTR const unsigned char 
  4956 ;;		 -> STR_45(2), STR_44(2), STR_42(2), STR_41(2), 
  4957 ;;		 -> STR_39(2), STR_38(2), STR_37(2), 
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;  s1              1   33[BANK0 ] PTR const unsigned char 
  4960 ;;		 -> content(25), 
  4961 ;;  i               2   31[BANK0 ] unsigned int 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  2   27[BANK0 ] unsigned int 
  4964 ;; Registers used:
  4965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4971 ;;      Params:         0       2       0       0       0
  4972 ;;      Locals:         0       3       0       0       0
  4973 ;;      Temps:          0       2       0       0       0
  4974 ;;      Totals:         0       7       0       0       0
  4975 ;;Total ram usage:        7 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    5
  4978 ;; This function calls:
  4979 ;;		_strchr
  4980 ;; This function is called by:
  4981 ;;		_choice
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _strcspn
  4987  1E68                     _strcspn:	
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _strcspn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4991                           ;strcspn@s1 stored from wreg
  4992  1E68  1283               	bcf	3,5	;RP0=0, select bank0
  4993  1E69  1303               	bcf	3,6	;RP1=0, select bank0
  4994  1E6A  00C1               	movwf	strcspn@s1
  4995  1E6B  01BF               	clrf	strcspn@i
  4996  1E6C  01C0               	clrf	strcspn@i+1
  4997  1E6D  2E78               	goto	l4215
  4998  1E6E                     l4213:	
  4999  1E6E  3001               	movlw	1
  5000  1E6F  00BD               	movwf	??_strcspn
  5001  1E70  083D               	movf	??_strcspn,w
  5002  1E71  07C1               	addwf	strcspn@s1,f
  5003  1E72  3001               	movlw	1
  5004  1E73  07BF               	addwf	strcspn@i,f
  5005  1E74  1803               	skipnc
  5006  1E75  0AC0               	incf	strcspn@i+1,f
  5007  1E76  3000               	movlw	0
  5008  1E77  07C0               	addwf	strcspn@i+1,f
  5009  1E78                     l4215:	
  5010  1E78  0841               	movf	strcspn@s1,w
  5011  1E79  0084               	movwf	4
  5012  1E7A  1383               	bcf	3,7	;select IRP bank0
  5013  1E7B  0800               	movf	0,w
  5014  1E7C  1903               	btfsc	3,2
  5015  1E7D  2E96               	goto	l4219
  5016  1E7E  083B               	movf	strcspn@s2,w
  5017  1E7F  00B5               	movwf	strchr@ptr
  5018  1E80  083C               	movf	strcspn@s2+1,w
  5019  1E81  00B6               	movwf	strchr@ptr+1
  5020  1E82  0841               	movf	strcspn@s1,w
  5021  1E83  0084               	movwf	4
  5022  1E84  0800               	movf	0,w
  5023  1E85  00BD               	movwf	??_strcspn
  5024  1E86  01BE               	clrf	??_strcspn+1
  5025  1E87  083D               	movf	??_strcspn,w
  5026  1E88  00B7               	movwf	strchr@chr
  5027  1E89  083E               	movf	??_strcspn+1,w
  5028  1E8A  00B8               	movwf	strchr@chr+1
  5029  1E8B  160A  118A  2000  160A  158A  	fcall	_strchr
  5030  1E90  1283               	bcf	3,5	;RP0=0, select bank0
  5031  1E91  1303               	bcf	3,6	;RP1=0, select bank0
  5032  1E92  0835               	movf	?_strchr,w
  5033  1E93  0436               	iorwf	?_strchr+1,w
  5034  1E94  1903               	btfsc	3,2
  5035  1E95  2E6E               	goto	l4213
  5036  1E96                     l4219:	
  5037  1E96  0840               	movf	strcspn@i+1,w
  5038  1E97  00BC               	movwf	?_strcspn+1
  5039  1E98  083F               	movf	strcspn@i,w
  5040  1E99  00BB               	movwf	?_strcspn
  5041  1E9A  0008               	return
  5042  1E9B                     __end_of_strcspn:	
  5043                           
  5044                           	psect	text11
  5045  1000                     __ptext11:	
  5046 ;; *************** function _strchr *****************
  5047 ;; Defined at:
  5048 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  ptr             2   21[BANK0 ] PTR const unsigned char 
  5051 ;;		 -> STR_45(2), STR_44(2), STR_42(2), STR_41(2), 
  5052 ;;		 -> STR_39(2), STR_38(2), STR_37(2), 
  5053 ;;  chr             2   23[BANK0 ] int 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  2   21[BANK0 ] PTR unsigned char 
  5058 ;; Registers used:
  5059 ;;		wreg, fsr0l, fsr0h, status,2, btemp+1, pclath
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5065 ;;      Params:         0       4       0       0       0
  5066 ;;      Locals:         0       0       0       0       0
  5067 ;;      Temps:          0       2       0       0       0
  5068 ;;      Totals:         0       6       0       0       0
  5069 ;;Total ram usage:        6 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    4
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_strcspn
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _strchr
  5081  1000                     _strchr:	
  5082  1000                     l900:	
  5083                           ;incstack = 0
  5084 ;; using string table level
  5085                           ; Regs used in _strchr: [wreg-fsr0h+status,2+btemp+1+pclath]
  5086                           
  5087  1000  1283               	bcf	3,5	;RP0=0, select bank0
  5088  1001  1303               	bcf	3,6	;RP1=0, select bank0
  5089  1002  0836               	movf	strchr@ptr+1,w
  5090  1003  00FF               	movwf	127
  5091  1004  0835               	movf	strchr@ptr,w
  5092  1005  0084               	movwf	4
  5093  1006  120A  118A  2100  160A  118A  	fcall	stringtab
  5094  100B  0637               	xorwf	strchr@chr,w
  5095  100C  1903               	btfsc	3,2
  5096  100D  0008               	return
  5097  100E  0836               	movf	strchr@ptr+1,w
  5098  100F  00BA               	movwf	??_strchr+1
  5099  1010  0835               	movf	strchr@ptr,w
  5100  1011  00B9               	movwf	??_strchr
  5101  1012  0AB5               	incf	strchr@ptr,f
  5102  1013  1903               	skipnz
  5103  1014  0AB6               	incf	strchr@ptr+1,f
  5104  1015  083A               	movf	??_strchr+1,w
  5105  1016  00FF               	movwf	127
  5106  1017  0839               	movf	??_strchr,w
  5107  1018  0084               	movwf	4
  5108  1019  120A  118A  2100  160A  118A  	fcall	stringtab
  5109  101E  3A00               	xorlw	0
  5110  101F  1D03               	skipz
  5111  1020  2800               	goto	l900
  5112  1021  01B5               	clrf	?_strchr
  5113  1022  01B6               	clrf	?_strchr+1
  5114  1023  0008               	return
  5115  1024                     __end_of_strchr:	
  5116                           
  5117                           	psect	text12
  5118  143B                     __ptext12:	
  5119 ;; *************** function _step *****************
  5120 ;; Defined at:
  5121 ;;		line 310 in file "main.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  duty            2   28[BANK1 ] int 
  5124 ;;  time            4   30[BANK1 ] unsigned long 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;		None
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      void 
  5129 ;; Registers used:
  5130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5136 ;;      Params:         0       0       6       0       0
  5137 ;;      Locals:         0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0
  5139 ;;      Totals:         0       0       6       0       0
  5140 ;;Total ram usage:        6 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    8
  5143 ;; This function calls:
  5144 ;;		_USARTWriteLine
  5145 ;;		_acquire
  5146 ;;		_set_pwm
  5147 ;;		_sprintf
  5148 ;;		_stop
  5149 ;; This function is called by:
  5150 ;;		_choice
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           
  5155                           ;psect for function _step
  5156  143B                     _step:	
  5157                           
  5158                           ;main.c: 312: if(duty>100){
  5159                           
  5160                           ;incstack = 0
  5161 ;; hardware stack exceeded
  5162                           ; Regs used in _step: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5163  143B  1683               	bsf	3,5	;RP0=1, select bank1
  5164  143C  1303               	bcf	3,6	;RP1=0, select bank1
  5165  143D  083D               	movf	(step@duty+1)^(0+128),w
  5166  143E  3A80               	xorlw	128
  5167  143F  00FF               	movwf	127
  5168  1440  3080               	movlw	128
  5169  1441  027F               	subwf	127,w
  5170  1442  1D03               	skipz
  5171  1443  2C46               	goto	u5285
  5172  1444  3065               	movlw	101
  5173  1445  023C               	subwf	step@duty^(0+128),w
  5174  1446                     u5285:	
  5175  1446  1C03               	skipc
  5176  1447  2C4C               	goto	l4269
  5177                           
  5178                           ;main.c: 313: duty=0;
  5179  1448  1683               	bsf	3,5	;RP0=1, select bank1
  5180  1449  1303               	bcf	3,6	;RP1=0, select bank1
  5181  144A  01BC               	clrf	step@duty^(0+128)
  5182  144B  01BD               	clrf	(step@duty+1)^(0+128)
  5183  144C                     l4269:	
  5184                           
  5185                           ;main.c: 314: }
  5186                           ;main.c: 315: set_pwm(duty);
  5187  144C  1683               	bsf	3,5	;RP0=1, select bank1
  5188  144D  1303               	bcf	3,6	;RP1=0, select bank1
  5189  144E  083D               	movf	(step@duty+1)^(0+128),w
  5190  144F  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  5191  1450  083C               	movf	step@duty^(0+128),w
  5192  1451  00B8               	movwf	set_pwm@percent^(0+128)
  5193  1452  120A  118A  2057  160A  118A  	fcall	_set_pwm
  5194                           
  5195                           ;main.c: 317: sprintf(strBuffer,"%d",duty);
  5196  1457  3051               	movlw	low (STR_52| (0+32768))
  5197  1458  1283               	bcf	3,5	;RP0=0, select bank0
  5198  1459  1303               	bcf	3,6	;RP1=0, select bank0
  5199  145A  00C3               	movwf	sprintf@f
  5200  145B  3086               	movlw	high (STR_52| (0+32768))
  5201  145C  00C4               	movwf	sprintf@f+1
  5202  145D  1683               	bsf	3,5	;RP0=1, select bank1
  5203  145E  1303               	bcf	3,6	;RP1=0, select bank1
  5204  145F  083D               	movf	(step@duty+1)^(0+128),w
  5205  1460  1283               	bcf	3,5	;RP0=0, select bank0
  5206  1461  1303               	bcf	3,6	;RP1=0, select bank0
  5207  1462  00C6               	movwf	?_sprintf+3
  5208  1463  1683               	bsf	3,5	;RP0=1, select bank1
  5209  1464  1303               	bcf	3,6	;RP1=0, select bank1
  5210  1465  083C               	movf	step@duty^(0+128),w
  5211  1466  1283               	bcf	3,5	;RP0=0, select bank0
  5212  1467  1303               	bcf	3,6	;RP1=0, select bank0
  5213  1468  00C5               	movwf	?_sprintf+2
  5214  1469  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5215  146A  160A  118A  26D6  160A  118A  	fcall	_sprintf
  5216                           
  5217                           ;main.c: 318: USARTWriteLine(strBuffer);
  5218  146F  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5219  1470  1283               	bcf	3,5	;RP0=0, select bank0
  5220  1471  1303               	bcf	3,6	;RP1=0, select bank0
  5221  1472  00B8               	movwf	USARTWriteLine@str
  5222  1473  3001               	movlw	1
  5223  1474  00B9               	movwf	USARTWriteLine@str+1
  5224  1475  160A  158A  2485  160A  118A  	fcall	_USARTWriteLine
  5225                           
  5226                           ;main.c: 319: sprintf(strBuffer,"%d",time);
  5227  147A  3051               	movlw	low (STR_52| (0+32768))
  5228  147B  1283               	bcf	3,5	;RP0=0, select bank0
  5229  147C  1303               	bcf	3,6	;RP1=0, select bank0
  5230  147D  00C3               	movwf	sprintf@f
  5231  147E  3086               	movlw	high (STR_52| (0+32768))
  5232  147F  00C4               	movwf	sprintf@f+1
  5233  1480  1683               	bsf	3,5	;RP0=1, select bank1
  5234  1481  1303               	bcf	3,6	;RP1=0, select bank1
  5235  1482  0841               	movf	(step@time+3)^(0+128),w
  5236  1483  1283               	bcf	3,5	;RP0=0, select bank0
  5237  1484  1303               	bcf	3,6	;RP1=0, select bank0
  5238  1485  00C8               	movwf	?_sprintf+5
  5239  1486  1683               	bsf	3,5	;RP0=1, select bank1
  5240  1487  1303               	bcf	3,6	;RP1=0, select bank1
  5241  1488  0840               	movf	(step@time+2)^(0+128),w
  5242  1489  1283               	bcf	3,5	;RP0=0, select bank0
  5243  148A  1303               	bcf	3,6	;RP1=0, select bank0
  5244  148B  00C7               	movwf	?_sprintf+4
  5245  148C  1683               	bsf	3,5	;RP0=1, select bank1
  5246  148D  1303               	bcf	3,6	;RP1=0, select bank1
  5247  148E  083F               	movf	(step@time+1)^(0+128),w
  5248  148F  1283               	bcf	3,5	;RP0=0, select bank0
  5249  1490  1303               	bcf	3,6	;RP1=0, select bank0
  5250  1491  00C6               	movwf	?_sprintf+3
  5251  1492  1683               	bsf	3,5	;RP0=1, select bank1
  5252  1493  1303               	bcf	3,6	;RP1=0, select bank1
  5253  1494  083E               	movf	step@time^(0+128),w
  5254  1495  1283               	bcf	3,5	;RP0=0, select bank0
  5255  1496  1303               	bcf	3,6	;RP1=0, select bank0
  5256  1497  00C5               	movwf	?_sprintf+2
  5257  1498  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5258  1499  160A  118A  26D6  160A  118A  	fcall	_sprintf
  5259                           
  5260                           ;main.c: 320: USARTWriteLine(strBuffer);
  5261  149E  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5262  149F  1283               	bcf	3,5	;RP0=0, select bank0
  5263  14A0  1303               	bcf	3,6	;RP1=0, select bank0
  5264  14A1  00B8               	movwf	USARTWriteLine@str
  5265  14A2  3001               	movlw	1
  5266  14A3  00B9               	movwf	USARTWriteLine@str+1
  5267  14A4  160A  158A  2485  160A  118A  	fcall	_USARTWriteLine
  5268                           
  5269                           ;main.c: 322: if(time == 0){
  5270  14A9  1683               	bsf	3,5	;RP0=1, select bank1
  5271  14AA  1303               	bcf	3,6	;RP1=0, select bank1
  5272  14AB  0841               	movf	(step@time+3)^(0+128),w
  5273  14AC  0440               	iorwf	(step@time+2)^(0+128),w
  5274  14AD  043F               	iorwf	(step@time+1)^(0+128),w
  5275  14AE  043E               	iorwf	step@time^(0+128),w
  5276  14AF  1D03               	skipz
  5277  14B0  2CBA               	goto	l321
  5278                           
  5279                           ;main.c: 324: acquire();
  5280  14B1  160A  118A  226C  160A  118A  	fcall	_acquire
  5281                           
  5282                           ;main.c: 325: stop();
  5283  14B6  160A  158A  2452   	fcall	_stop
  5284                           
  5285                           ;main.c: 326: }
  5286  14B9  0008               	return
  5287  14BA                     l321:	
  5288                           
  5289                           ;main.c: 327: else{
  5290                           ;main.c: 328: stepEnable = 1;
  5291  14BA  1283               	bcf	3,5	;RP0=0, select bank0
  5292  14BB  1303               	bcf	3,6	;RP1=0, select bank0
  5293  14BC  01D3               	clrf	_stepEnable
  5294  14BD  0AD3               	incf	_stepEnable,f
  5295                           
  5296                           ;main.c: 329: count = 0;
  5297  14BE  01D1               	clrf	_count
  5298  14BF  01D2               	clrf	_count+1
  5299                           
  5300                           ;main.c: 330: max_counters = time;
  5301  14C0  1683               	bsf	3,5	;RP0=1, select bank1
  5302  14C1  1303               	bcf	3,6	;RP1=0, select bank1
  5303  14C2  083F               	movf	(step@time+1)^(0+128),w
  5304  14C3  1283               	bcf	3,5	;RP0=0, select bank0
  5305  14C4  1303               	bcf	3,6	;RP1=0, select bank0
  5306  14C5  00D0               	movwf	_max_counters+1
  5307  14C6  1683               	bsf	3,5	;RP0=1, select bank1
  5308  14C7  1303               	bcf	3,6	;RP1=0, select bank1
  5309  14C8  083E               	movf	step@time^(0+128),w
  5310  14C9  1283               	bcf	3,5	;RP0=0, select bank0
  5311  14CA  1303               	bcf	3,6	;RP1=0, select bank0
  5312  14CB  00CF               	movwf	_max_counters
  5313                           
  5314                           ;main.c: 332: acquire();
  5315  14CC  160A  118A  226C  160A  118A  	fcall	_acquire
  5316                           
  5317                           ;main.c: 333: USARTWriteLine("If you want stop the system, type:");
  5318  14D1  3005               	movlw	low ((STR_24+8)| (0+32768))
  5319  14D2  1283               	bcf	3,5	;RP0=0, select bank0
  5320  14D3  1303               	bcf	3,6	;RP1=0, select bank0
  5321  14D4  00B8               	movwf	USARTWriteLine@str
  5322  14D5  3084               	movlw	high ((STR_24+8)| (0+32768))
  5323  14D6  00B9               	movwf	USARTWriteLine@str+1
  5324  14D7  160A  158A  2485  160A  118A  	fcall	_USARTWriteLine
  5325                           
  5326                           ;main.c: 334: USARTWriteLine("stop()");
  5327  14DC  303A               	movlw	low (STR_46| (0+32768))
  5328  14DD  1283               	bcf	3,5	;RP0=0, select bank0
  5329  14DE  1303               	bcf	3,6	;RP1=0, select bank0
  5330  14DF  00B8               	movwf	USARTWriteLine@str
  5331  14E0  3086               	movlw	high (STR_46| (0+32768))
  5332  14E1  00B9               	movwf	USARTWriteLine@str+1
  5333  14E2  160A  158A  2485   	fcall	_USARTWriteLine
  5334  14E5  0008               	return
  5335  14E6                     __end_of_step:	
  5336                           
  5337                           	psect	text13
  5338  1C52                     __ptext13:	
  5339 ;; *************** function _stop *****************
  5340 ;; Defined at:
  5341 ;;		line 371 in file "main.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0, pclath, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5355 ;;      Params:         0       0       0       0       0
  5356 ;;      Locals:         0       0       0       0       0
  5357 ;;      Temps:          0       0       0       0       0
  5358 ;;      Totals:         0       0       0       0       0
  5359 ;;Total ram usage:        0 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    7
  5362 ;; This function calls:
  5363 ;;		_set_pwm
  5364 ;; This function is called by:
  5365 ;;		_main
  5366 ;;		_choice
  5367 ;;		_step
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           
  5372                           ;psect for function _stop
  5373  1C52                     _stop:	
  5374                           
  5375                           ;main.c: 372: set_pwm(0);
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _stop: [wreg+status,2+status,0+pclath+cstack]
  5379  1C52  3000               	movlw	0
  5380  1C53  1683               	bsf	3,5	;RP0=1, select bank1
  5381  1C54  1303               	bcf	3,6	;RP1=0, select bank1
  5382  1C55  00B8               	movwf	set_pwm@percent^(0+128)
  5383  1C56  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  5384  1C57  120A  118A  2057   	fcall	_set_pwm
  5385                           
  5386                           ;main.c: 373: stepEnable = 0;
  5387  1C5A  1283               	bcf	3,5	;RP0=0, select bank0
  5388  1C5B  1303               	bcf	3,6	;RP1=0, select bank0
  5389  1C5C  01D3               	clrf	_stepEnable
  5390                           
  5391                           ;main.c: 374: acquirement = 0;
  5392  1C5D  01D8               	clrf	_acquirement
  5393  1C5E  0008               	return
  5394  1C5F                     __end_of_stop:	
  5395                           
  5396                           	psect	text14
  5397  0810                     __ptext14:	
  5398 ;; *************** function _status *****************
  5399 ;; Defined at:
  5400 ;;		line 355 in file "main.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  i               2   30[BANK3 ] int 
  5405 ;;  output         25    0[BANK3 ] unsigned char [25]
  5406 ;;  aux             3   25[BANK3 ] float 
  5407 ;;  duty            2   28[BANK3 ] int 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5417 ;;      Params:         0       0       0       0       0
  5418 ;;      Locals:         0       0       0      32       0
  5419 ;;      Temps:          0       0       0       0       0
  5420 ;;      Totals:         0       0       0      32       0
  5421 ;;Total ram usage:       32 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    7
  5424 ;; This function calls:
  5425 ;;		_USARTGotoNewLine
  5426 ;;		_USARTWriteLine
  5427 ;;		___awtoft
  5428 ;;		___ftdiv
  5429 ;;		___ftmul
  5430 ;;		___fttol
  5431 ;;		_adReadA0
  5432 ;;		_sprintf
  5433 ;;		_strcat
  5434 ;;		_strcpy
  5435 ;; This function is called by:
  5436 ;;		_choice
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function _status
  5442  0810                     _status:	
  5443                           
  5444                           ;main.c: 356: char output[25];
  5445                           ;main.c: 357: for(int i=0 ; i<25;i++){
  5446                           
  5447                           ;incstack = 0
  5448 ;; hardware stack exceeded
  5449                           ; Regs used in _status: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5450  0810  1683               	bsf	3,5	;RP0=1, select bank3
  5451  0811  1703               	bsf	3,6	;RP1=1, select bank3
  5452  0812  01AE               	clrf	status@i^(0+384)
  5453  0813  01AF               	clrf	(status@i+1)^(0+384)
  5454  0814  082F               	movf	(status@i+1)^(0+384),w
  5455  0815  3A80               	xorlw	128
  5456  0816  00FF               	movwf	127
  5457  0817  3080               	movlw	128
  5458  0818  027F               	subwf	127,w
  5459  0819  1D03               	skipz
  5460  081A  281D               	goto	u5355
  5461  081B  3019               	movlw	25
  5462  081C  022E               	subwf	status@i^(0+384),w
  5463  081D                     u5355:	
  5464  081D  1803               	btfsc	3,0
  5465  081E  2837               	goto	l4365
  5466  081F                     l4359:	
  5467                           
  5468                           ;main.c: 358: output[i] = '\0';
  5469  081F  1683               	bsf	3,5	;RP0=1, select bank3
  5470  0820  1703               	bsf	3,6	;RP1=1, select bank3
  5471  0821  082E               	movf	status@i^(0+384),w
  5472  0822  3E90               	addlw	(low (status@output| (0+256)))& (0+255)
  5473  0823  0084               	movwf	4
  5474  0824  1783               	bsf	3,7	;select IRP bank3
  5475  0825  0180               	clrf	0
  5476  0826  3001               	movlw	1
  5477  0827  07AE               	addwf	status@i^(0+384),f
  5478  0828  1803               	skipnc
  5479  0829  0AAF               	incf	(status@i+1)^(0+384),f
  5480  082A  3000               	movlw	0
  5481  082B  07AF               	addwf	(status@i+1)^(0+384),f
  5482  082C  082F               	movf	(status@i+1)^(0+384),w
  5483  082D  3A80               	xorlw	128
  5484  082E  00FF               	movwf	127
  5485  082F  3080               	movlw	128
  5486  0830  027F               	subwf	127,w
  5487  0831  1D03               	skipz
  5488  0832  2835               	goto	u5365
  5489  0833  3019               	movlw	25
  5490  0834  022E               	subwf	status@i^(0+384),w
  5491  0835                     u5365:	
  5492  0835  1C03               	skipc
  5493  0836  281F               	goto	l4359
  5494  0837                     l4365:	
  5495                           
  5496                           ;main.c: 359: }
  5497                           ;main.c: 360: float aux = (float)(pwm)/1023;
  5498  0837  30C0               	movlw	192
  5499  0838  1283               	bcf	3,5	;RP0=0, select bank0
  5500  0839  1303               	bcf	3,6	;RP1=0, select bank0
  5501  083A  00C3               	movwf	___ftdiv@f2
  5502  083B  307F               	movlw	127
  5503  083C  00C4               	movwf	___ftdiv@f2+1
  5504  083D  3044               	movlw	68
  5505  083E  00C5               	movwf	___ftdiv@f2+2
  5506  083F  1683               	bsf	3,5	;RP0=1, select bank1
  5507  0840  1303               	bcf	3,6	;RP1=0, select bank1
  5508  0841  084F               	movf	(_pwm+1)^(0+128),w
  5509  0842  1283               	bcf	3,5	;RP0=0, select bank0
  5510  0843  1303               	bcf	3,6	;RP1=0, select bank0
  5511  0844  00BE               	movwf	___awtoft@c+1
  5512  0845  1683               	bsf	3,5	;RP0=1, select bank1
  5513  0846  1303               	bcf	3,6	;RP1=0, select bank1
  5514  0847  084E               	movf	_pwm^(0+128),w
  5515  0848  1283               	bcf	3,5	;RP0=0, select bank0
  5516  0849  1303               	bcf	3,6	;RP1=0, select bank0
  5517  084A  00BD               	movwf	___awtoft@c
  5518  084B  160A  158A  25B4  120A  158A  	fcall	___awtoft
  5519  0850  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0851  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0852  083D               	movf	?___awtoft,w
  5522  0853  00C6               	movwf	___ftdiv@f1
  5523  0854  083E               	movf	?___awtoft+1,w
  5524  0855  00C7               	movwf	___ftdiv@f1+1
  5525  0856  083F               	movf	?___awtoft+2,w
  5526  0857  00C8               	movwf	___ftdiv@f1+2
  5527  0858  160A  118A  25CE  120A  158A  	fcall	___ftdiv
  5528  085D  1283               	bcf	3,5	;RP0=0, select bank0
  5529  085E  1303               	bcf	3,6	;RP1=0, select bank0
  5530  085F  0843               	movf	?___ftdiv,w
  5531  0860  1683               	bsf	3,5	;RP0=1, select bank3
  5532  0861  1703               	bsf	3,6	;RP1=1, select bank3
  5533  0862  00A9               	movwf	status@aux^(0+384)
  5534  0863  1283               	bcf	3,5	;RP0=0, select bank0
  5535  0864  1303               	bcf	3,6	;RP1=0, select bank0
  5536  0865  0844               	movf	?___ftdiv+1,w
  5537  0866  1683               	bsf	3,5	;RP0=1, select bank3
  5538  0867  1703               	bsf	3,6	;RP1=1, select bank3
  5539  0868  00AA               	movwf	(status@aux+1)^(0+384)
  5540  0869  1283               	bcf	3,5	;RP0=0, select bank0
  5541  086A  1303               	bcf	3,6	;RP1=0, select bank0
  5542  086B  0845               	movf	?___ftdiv+2,w
  5543  086C  1683               	bsf	3,5	;RP0=1, select bank3
  5544  086D  1703               	bsf	3,6	;RP1=1, select bank3
  5545  086E  00AB               	movwf	(status@aux+2)^(0+384)
  5546                           
  5547                           ;main.c: 361: int duty = (int) (aux*100);
  5548  086F  0829               	movf	status@aux^(0+384),w
  5549  0870  1283               	bcf	3,5	;RP0=0, select bank0
  5550  0871  1303               	bcf	3,6	;RP1=0, select bank0
  5551  0872  00C6               	movwf	___ftmul@f2
  5552  0873  1683               	bsf	3,5	;RP0=1, select bank3
  5553  0874  1703               	bsf	3,6	;RP1=1, select bank3
  5554  0875  082A               	movf	(status@aux+1)^(0+384),w
  5555  0876  1283               	bcf	3,5	;RP0=0, select bank0
  5556  0877  1303               	bcf	3,6	;RP1=0, select bank0
  5557  0878  00C7               	movwf	___ftmul@f2+1
  5558  0879  1683               	bsf	3,5	;RP0=1, select bank3
  5559  087A  1703               	bsf	3,6	;RP1=1, select bank3
  5560  087B  082B               	movf	(status@aux+2)^(0+384),w
  5561  087C  1283               	bcf	3,5	;RP0=0, select bank0
  5562  087D  1303               	bcf	3,6	;RP1=0, select bank0
  5563  087E  00C8               	movwf	___ftmul@f2+2
  5564  087F  3000               	movlw	0
  5565  0880  00C3               	movwf	___ftmul@f1
  5566  0881  30C8               	movlw	200
  5567  0882  00C4               	movwf	___ftmul@f1+1
  5568  0883  3042               	movlw	66
  5569  0884  00C5               	movwf	___ftmul@f1+2
  5570  0885  120A  118A  265A  120A  158A  	fcall	___ftmul
  5571  088A  1283               	bcf	3,5	;RP0=0, select bank0
  5572  088B  1303               	bcf	3,6	;RP1=0, select bank0
  5573  088C  0843               	movf	?___ftmul,w
  5574  088D  1683               	bsf	3,5	;RP0=1, select bank1
  5575  088E  1303               	bcf	3,6	;RP1=0, select bank1
  5576  088F  00AA               	movwf	___fttol@f1^(0+128)
  5577  0890  1283               	bcf	3,5	;RP0=0, select bank0
  5578  0891  1303               	bcf	3,6	;RP1=0, select bank0
  5579  0892  0844               	movf	?___ftmul+1,w
  5580  0893  1683               	bsf	3,5	;RP0=1, select bank1
  5581  0894  1303               	bcf	3,6	;RP1=0, select bank1
  5582  0895  00AB               	movwf	(___fttol@f1+1)^(0+128)
  5583  0896  1283               	bcf	3,5	;RP0=0, select bank0
  5584  0897  1303               	bcf	3,6	;RP1=0, select bank0
  5585  0898  0845               	movf	?___ftmul+2,w
  5586  0899  1683               	bsf	3,5	;RP0=1, select bank1
  5587  089A  1303               	bcf	3,6	;RP1=0, select bank1
  5588  089B  00AC               	movwf	(___fttol@f1+2)^(0+128)
  5589  089C  160A  118A  23AD  120A  158A  	fcall	___fttol
  5590  08A1  1683               	bsf	3,5	;RP0=1, select bank1
  5591  08A2  1303               	bcf	3,6	;RP1=0, select bank1
  5592  08A3  082B               	movf	(?___fttol+1)^(0+128),w
  5593  08A4  1683               	bsf	3,5	;RP0=1, select bank3
  5594  08A5  1703               	bsf	3,6	;RP1=1, select bank3
  5595  08A6  00AD               	movwf	(status@duty+1)^(0+384)
  5596  08A7  1683               	bsf	3,5	;RP0=1, select bank1
  5597  08A8  1303               	bcf	3,6	;RP1=0, select bank1
  5598  08A9  082A               	movf	?___fttol^(0+128),w
  5599  08AA  1683               	bsf	3,5	;RP0=1, select bank3
  5600  08AB  1703               	bsf	3,6	;RP1=1, select bank3
  5601  08AC  00AC               	movwf	status@duty^(0+384)
  5602                           
  5603                           ;main.c: 362: strcpy(output, "The duty-cycle of PWM is: ");
  5604  08AD  3082               	movlw	low (STR_58| (0+32768))
  5605  08AE  1283               	bcf	3,5	;RP0=0, select bank0
  5606  08AF  1303               	bcf	3,6	;RP1=0, select bank0
  5607  08B0  00B5               	movwf	strcpy@from
  5608  08B1  3084               	movlw	high (STR_58| (0+32768))
  5609  08B2  00B6               	movwf	strcpy@from+1
  5610  08B3  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5611  08B4  160A  158A  249B  120A  158A  	fcall	_strcpy
  5612                           
  5613                           ;main.c: 363: sprintf(strBuffer,"%d",duty);
  5614  08B9  3051               	movlw	low (STR_52| (0+32768))
  5615  08BA  1283               	bcf	3,5	;RP0=0, select bank0
  5616  08BB  1303               	bcf	3,6	;RP1=0, select bank0
  5617  08BC  00C3               	movwf	sprintf@f
  5618  08BD  3086               	movlw	high (STR_52| (0+32768))
  5619  08BE  00C4               	movwf	sprintf@f+1
  5620  08BF  1683               	bsf	3,5	;RP0=1, select bank3
  5621  08C0  1703               	bsf	3,6	;RP1=1, select bank3
  5622  08C1  082D               	movf	(status@duty+1)^(0+384),w
  5623  08C2  1283               	bcf	3,5	;RP0=0, select bank0
  5624  08C3  1303               	bcf	3,6	;RP1=0, select bank0
  5625  08C4  00C6               	movwf	?_sprintf+3
  5626  08C5  1683               	bsf	3,5	;RP0=1, select bank3
  5627  08C6  1703               	bsf	3,6	;RP1=1, select bank3
  5628  08C7  082C               	movf	status@duty^(0+384),w
  5629  08C8  1283               	bcf	3,5	;RP0=0, select bank0
  5630  08C9  1303               	bcf	3,6	;RP1=0, select bank0
  5631  08CA  00C5               	movwf	?_sprintf+2
  5632  08CB  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5633  08CC  160A  118A  26D6  120A  158A  	fcall	_sprintf
  5634                           
  5635                           ;main.c: 364: strcat(output, strBuffer);
  5636  08D1  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5637  08D2  1283               	bcf	3,5	;RP0=0, select bank0
  5638  08D3  1303               	bcf	3,6	;RP1=0, select bank0
  5639  08D4  00B5               	movwf	strcat@from
  5640  08D5  3001               	movlw	1
  5641  08D6  00B6               	movwf	strcat@from+1
  5642  08D7  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5643  08D8  160A  158A  25D9  120A  158A  	fcall	_strcat
  5644                           
  5645                           ;main.c: 365: strcat(output, "%");
  5646  08DD  3054               	movlw	low (STR_60| (0+32768))
  5647  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  5648  08DF  1303               	bcf	3,6	;RP1=0, select bank0
  5649  08E0  00B5               	movwf	strcat@from
  5650  08E1  3086               	movlw	high (STR_60| (0+32768))
  5651  08E2  00B6               	movwf	strcat@from+1
  5652  08E3  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5653  08E4  160A  158A  25D9  120A  158A  	fcall	_strcat
  5654                           
  5655                           ;main.c: 366: USARTWriteLine(output);
  5656  08E9  3090               	movlw	(low (status@output| (0+256)))& (0+255)
  5657  08EA  1283               	bcf	3,5	;RP0=0, select bank0
  5658  08EB  1303               	bcf	3,6	;RP1=0, select bank0
  5659  08EC  00B8               	movwf	USARTWriteLine@str
  5660  08ED  3001               	movlw	1
  5661  08EE  00B9               	movwf	USARTWriteLine@str+1
  5662  08EF  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  5663                           
  5664                           ;main.c: 367: USARTGotoNewLine();
  5665  08F4  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  5666                           
  5667                           ;main.c: 368: adReadA0();
  5668  08F9  160A  118A  2068   	fcall	_adReadA0
  5669  08FC  0008               	return
  5670  08FD                     __end_of_status:	
  5671                           
  5672                           	psect	text15
  5673  1C9B                     __ptext15:	
  5674 ;; *************** function _strcpy *****************
  5675 ;; Defined at:
  5676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  to              1    wreg     PTR unsigned char 
  5679 ;;		 -> status@output(25), 
  5680 ;;  from            2   21[BANK0 ] PTR const unsigned char 
  5681 ;;		 -> STR_58(27), 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  to              1   24[BANK0 ] PTR unsigned char 
  5684 ;;		 -> status@output(25), 
  5685 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  5686 ;;		 -> status@output(25), 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      PTR unsigned char 
  5689 ;; Registers used:
  5690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5696 ;;      Params:         0       2       0       0       0
  5697 ;;      Locals:         0       2       0       0       0
  5698 ;;      Temps:          0       1       0       0       0
  5699 ;;      Totals:         0       5       0       0       0
  5700 ;;Total ram usage:        5 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    4
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_status
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function _strcpy
  5712  1C9B                     _strcpy:	
  5713                           
  5714                           ;incstack = 0
  5715 ;; using string table level
  5716                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5717                           ;strcpy@to stored from wreg
  5718  1C9B  1283               	bcf	3,5	;RP0=0, select bank0
  5719  1C9C  1303               	bcf	3,6	;RP1=0, select bank0
  5720  1C9D  00B8               	movwf	strcpy@to
  5721  1C9E  0838               	movf	strcpy@to,w
  5722  1C9F  00B7               	movwf	??_strcpy
  5723  1CA0  0837               	movf	??_strcpy,w
  5724  1CA1  00B9               	movwf	strcpy@cp
  5725  1CA2                     l3987:	
  5726  1CA2  0836               	movf	strcpy@from+1,w
  5727  1CA3  00FF               	movwf	127
  5728  1CA4  0835               	movf	strcpy@from,w
  5729  1CA5  0084               	movwf	4
  5730  1CA6  120A  118A  2100  160A  158A  	fcall	stringtab
  5731  1CAB  00B7               	movwf	??_strcpy
  5732  1CAC  0839               	movf	strcpy@cp,w
  5733  1CAD  0084               	movwf	4
  5734  1CAE  0837               	movf	??_strcpy,w
  5735  1CAF  1783               	bsf	3,7	;select IRP bank2
  5736  1CB0  0080               	movwf	0
  5737  1CB1  0800               	movf	0,w
  5738  1CB2  1903               	btfsc	3,2
  5739  1CB3  0008               	return
  5740  1CB4  3001               	movlw	1
  5741  1CB5  00B7               	movwf	??_strcpy
  5742  1CB6  0837               	movf	??_strcpy,w
  5743  1CB7  07B9               	addwf	strcpy@cp,f
  5744  1CB8  3001               	movlw	1
  5745  1CB9  07B5               	addwf	strcpy@from,f
  5746  1CBA  1803               	skipnc
  5747  1CBB  0AB6               	incf	strcpy@from+1,f
  5748  1CBC  2CA2               	goto	l3987
  5749  1CBD                     __end_of_strcpy:	
  5750                           ;	Return value of _strcpy is never used
  5751                           
  5752                           
  5753                           	psect	text16
  5754  1DD9                     __ptext16:	
  5755 ;; *************** function _strcat *****************
  5756 ;; Defined at:
  5757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  to              1    wreg     PTR unsigned char 
  5760 ;;		 -> status@output(25), 
  5761 ;;  from            2   21[BANK0 ] PTR const unsigned char 
  5762 ;;		 -> STR_60(2), strBuffer(25), 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  to              1   24[BANK0 ] PTR unsigned char 
  5765 ;;		 -> status@output(25), 
  5766 ;;  cp              1   25[BANK0 ] PTR unsigned char 
  5767 ;;		 -> status@output(25), 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      PTR unsigned char 
  5770 ;; Registers used:
  5771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5777 ;;      Params:         0       2       0       0       0
  5778 ;;      Locals:         0       2       0       0       0
  5779 ;;      Temps:          0       1       0       0       0
  5780 ;;      Totals:         0       5       0       0       0
  5781 ;;Total ram usage:        5 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    4
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_status
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function _strcat
  5793  1DD9                     _strcat:	
  5794                           
  5795                           ;incstack = 0
  5796 ;; using string table level
  5797                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5798                           ;strcat@to stored from wreg
  5799  1DD9  1283               	bcf	3,5	;RP0=0, select bank0
  5800  1DDA  1303               	bcf	3,6	;RP1=0, select bank0
  5801  1DDB  00B8               	movwf	strcat@to
  5802  1DDC  0838               	movf	strcat@to,w
  5803  1DDD  00B7               	movwf	??_strcat
  5804  1DDE  0837               	movf	??_strcat,w
  5805  1DDF  00B9               	movwf	strcat@cp
  5806  1DE0                     l3993:	
  5807  1DE0  0839               	movf	strcat@cp,w
  5808  1DE1  0084               	movwf	4
  5809  1DE2  1783               	bsf	3,7	;select IRP bank2
  5810  1DE3  0800               	movf	0,w
  5811  1DE4  1903               	btfsc	3,2
  5812  1DE5  2DF3               	goto	l3999
  5813  1DE6  3001               	movlw	1
  5814  1DE7  00B7               	movwf	??_strcat
  5815  1DE8  0837               	movf	??_strcat,w
  5816  1DE9  07B9               	addwf	strcat@cp,f
  5817  1DEA  2DE0               	goto	l3993
  5818  1DEB                     l3995:	
  5819  1DEB  3001               	movlw	1
  5820  1DEC  00B7               	movwf	??_strcat
  5821  1DED  0837               	movf	??_strcat,w
  5822  1DEE  07B9               	addwf	strcat@cp,f
  5823  1DEF  3001               	movlw	1
  5824  1DF0  07B5               	addwf	strcat@from,f
  5825  1DF1  1803               	skipnc
  5826  1DF2  0AB6               	incf	strcat@from+1,f
  5827  1DF3                     l3999:	
  5828  1DF3  0836               	movf	strcat@from+1,w
  5829  1DF4  00FF               	movwf	127
  5830  1DF5  0835               	movf	strcat@from,w
  5831  1DF6  0084               	movwf	4
  5832  1DF7  120A  118A  2100  160A  158A  	fcall	stringtab
  5833  1DFC  00B7               	movwf	??_strcat
  5834  1DFD  0839               	movf	strcat@cp,w
  5835  1DFE  0084               	movwf	4
  5836  1DFF  0837               	movf	??_strcat,w
  5837  1E00  1783               	bsf	3,7	;select IRP bank2
  5838  1E01  0080               	movwf	0
  5839  1E02  0800               	movf	0,w
  5840  1E03  1903               	btfsc	3,2
  5841  1E04  0008               	return
  5842  1E05  2DEB               	goto	l3995
  5843  1E06                     __end_of_strcat:	
  5844                           ;	Return value of _strcat is never used
  5845                           
  5846                           
  5847                           	psect	text17
  5848  1068                     __ptext17:	
  5849 ;; *************** function _adReadA0 *****************
  5850 ;; Defined at:
  5851 ;;		line 398 in file "main.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;		None
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;  valueAD         2   10[BANK1 ] unsigned int 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5865 ;;      Params:         0       0       0       0       0
  5866 ;;      Locals:         0       0       2       0       0
  5867 ;;      Temps:          0       0       0       0       0
  5868 ;;      Totals:         0       0       2       0       0
  5869 ;;Total ram usage:        2 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    6
  5872 ;; This function calls:
  5873 ;;		_USARTWriteString
  5874 ;;		_sampling
  5875 ;;		_sprintf
  5876 ;; This function is called by:
  5877 ;;		_status
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function _adReadA0
  5883  1068                     _adReadA0:	
  5884                           
  5885                           ;main.c: 399: unsigned int valueAD = sampling();
  5886                           
  5887                           ;incstack = 0
  5888 ;; hardware stack exceeded
  5889                           ; Regs used in _adReadA0: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5890  1068  160A  158A  2470  160A  118A  	fcall	_sampling
  5891  106D  1283               	bcf	3,5	;RP0=0, select bank0
  5892  106E  1303               	bcf	3,6	;RP1=0, select bank0
  5893  106F  0836               	movf	?_sampling+1,w
  5894  1070  1683               	bsf	3,5	;RP0=1, select bank1
  5895  1071  1303               	bcf	3,6	;RP1=0, select bank1
  5896  1072  00AB               	movwf	(adReadA0@valueAD+1)^(0+128)
  5897  1073  1283               	bcf	3,5	;RP0=0, select bank0
  5898  1074  1303               	bcf	3,6	;RP1=0, select bank0
  5899  1075  0835               	movf	?_sampling,w
  5900  1076  1683               	bsf	3,5	;RP0=1, select bank1
  5901  1077  1303               	bcf	3,6	;RP1=0, select bank1
  5902  1078  00AA               	movwf	adReadA0@valueAD^(0+128)
  5903                           
  5904                           ;main.c: 400: if(valueAD<=1023 && valueAD >= 0){
  5905  1079  3004               	movlw	4
  5906  107A  022B               	subwf	(adReadA0@valueAD+1)^(0+128),w
  5907  107B  3000               	movlw	0
  5908  107C  1903               	skipnz
  5909  107D  022A               	subwf	adReadA0@valueAD^(0+128),w
  5910  107E  1803               	skipnc
  5911  107F  0008               	return
  5912                           
  5913                           ;main.c: 401: USARTWriteString("The analog value is: ");
  5914  1080  309D               	movlw	low (STR_61| (0+32768))
  5915  1081  1283               	bcf	3,5	;RP0=0, select bank0
  5916  1082  1303               	bcf	3,6	;RP1=0, select bank0
  5917  1083  00B6               	movwf	USARTWriteString@str
  5918  1084  3084               	movlw	high (STR_61| (0+32768))
  5919  1085  00B7               	movwf	USARTWriteString@str+1
  5920  1086  160A  158A  258F  160A  118A  	fcall	_USARTWriteString
  5921                           
  5922                           ;main.c: 402: sprintf(strBuffer,"%d",valueAD);
  5923  108B  3051               	movlw	low (STR_52| (0+32768))
  5924  108C  1283               	bcf	3,5	;RP0=0, select bank0
  5925  108D  1303               	bcf	3,6	;RP1=0, select bank0
  5926  108E  00C3               	movwf	sprintf@f
  5927  108F  3086               	movlw	high (STR_52| (0+32768))
  5928  1090  00C4               	movwf	sprintf@f+1
  5929  1091  1683               	bsf	3,5	;RP0=1, select bank1
  5930  1092  1303               	bcf	3,6	;RP1=0, select bank1
  5931  1093  082B               	movf	(adReadA0@valueAD+1)^(0+128),w
  5932  1094  1283               	bcf	3,5	;RP0=0, select bank0
  5933  1095  1303               	bcf	3,6	;RP1=0, select bank0
  5934  1096  00C6               	movwf	?_sprintf+3
  5935  1097  1683               	bsf	3,5	;RP0=1, select bank1
  5936  1098  1303               	bcf	3,6	;RP1=0, select bank1
  5937  1099  082A               	movf	adReadA0@valueAD^(0+128),w
  5938  109A  1283               	bcf	3,5	;RP0=0, select bank0
  5939  109B  1303               	bcf	3,6	;RP1=0, select bank0
  5940  109C  00C5               	movwf	?_sprintf+2
  5941  109D  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5942  109E  160A  118A  26D6  160A  118A  	fcall	_sprintf
  5943                           
  5944                           ;main.c: 403: USARTWriteString(strBuffer);
  5945  10A3  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  5946  10A4  1283               	bcf	3,5	;RP0=0, select bank0
  5947  10A5  1303               	bcf	3,6	;RP1=0, select bank0
  5948  10A6  00B6               	movwf	USARTWriteString@str
  5949  10A7  3001               	movlw	1
  5950  10A8  00B7               	movwf	USARTWriteString@str+1
  5951  10A9  160A  158A  258F   	fcall	_USARTWriteString
  5952  10AC  0008               	return
  5953  10AD                     __end_of_adReadA0:	
  5954                           
  5955                           	psect	text18
  5956  15CE                     __ptext18:	
  5957 ;; *************** function ___ftdiv *****************
  5958 ;; Defined at:
  5959 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  f2              3   35[BANK0 ] float 
  5962 ;;  f1              3   38[BANK0 ] float 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  f3              3    5[BANK1 ] float 
  5965 ;;  sign            1    9[BANK1 ] unsigned char 
  5966 ;;  exp             1    8[BANK1 ] unsigned char 
  5967 ;;  cntr            1    4[BANK1 ] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  3   35[BANK0 ] float 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0, pclath, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5977 ;;      Params:         0       6       0       0       0
  5978 ;;      Locals:         0       0       6       0       0
  5979 ;;      Temps:          0       0       4       0       0
  5980 ;;      Totals:         0       6      10       0       0
  5981 ;;Total ram usage:       16 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    5
  5984 ;; This function calls:
  5985 ;;		___ftpack
  5986 ;; This function is called by:
  5987 ;;		_status
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           
  5992                           ;psect for function ___ftdiv
  5993  15CE                     ___ftdiv:	
  5994                           
  5995                           ;incstack = 0
  5996 ;; hardware stack exceeded
  5997                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5998  15CE  1283               	bcf	3,5	;RP0=0, select bank0
  5999  15CF  1303               	bcf	3,6	;RP1=0, select bank0
  6000  15D0  0846               	movf	___ftdiv@f1,w
  6001  15D1  1683               	bsf	3,5	;RP0=1, select bank1
  6002  15D2  1303               	bcf	3,6	;RP1=0, select bank1
  6003  15D3  00A0               	movwf	??___ftdiv^(0+128)
  6004  15D4  1283               	bcf	3,5	;RP0=0, select bank0
  6005  15D5  1303               	bcf	3,6	;RP1=0, select bank0
  6006  15D6  0847               	movf	___ftdiv@f1+1,w
  6007  15D7  1683               	bsf	3,5	;RP0=1, select bank1
  6008  15D8  1303               	bcf	3,6	;RP1=0, select bank1
  6009  15D9  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6010  15DA  1283               	bcf	3,5	;RP0=0, select bank0
  6011  15DB  1303               	bcf	3,6	;RP1=0, select bank0
  6012  15DC  0848               	movf	___ftdiv@f1+2,w
  6013  15DD  1683               	bsf	3,5	;RP0=1, select bank1
  6014  15DE  1303               	bcf	3,6	;RP1=0, select bank1
  6015  15DF  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6016  15E0  1003               	clrc
  6017  15E1  0D21               	rlf	(??___ftdiv^(0+128)+1),w
  6018  15E2  0D22               	rlf	(??___ftdiv^(0+128)+2),w
  6019  15E3  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6020  15E4  0823               	movf	(??___ftdiv+3)^(0+128),w
  6021  15E5  00A8               	movwf	___ftdiv@exp^(0+128)
  6022  15E6  0828               	movf	___ftdiv@exp^(0+128),w
  6023  15E7  1D03               	btfss	3,2
  6024  15E8  2DF2               	goto	l4087
  6025  15E9  3000               	movlw	0
  6026  15EA  1283               	bcf	3,5	;RP0=0, select bank0
  6027  15EB  1303               	bcf	3,6	;RP1=0, select bank0
  6028  15EC  00C3               	movwf	?___ftdiv
  6029  15ED  3000               	movlw	0
  6030  15EE  00C4               	movwf	?___ftdiv+1
  6031  15EF  3000               	movlw	0
  6032  15F0  00C5               	movwf	?___ftdiv+2
  6033  15F1  0008               	return
  6034  15F2                     l4087:	
  6035  15F2  1283               	bcf	3,5	;RP0=0, select bank0
  6036  15F3  0843               	movf	___ftdiv@f2,w
  6037  15F4  1683               	bsf	3,5	;RP0=1, select bank1
  6038  15F5  1303               	bcf	3,6	;RP1=0, select bank1
  6039  15F6  00A0               	movwf	??___ftdiv^(0+128)
  6040  15F7  1283               	bcf	3,5	;RP0=0, select bank0
  6041  15F8  1303               	bcf	3,6	;RP1=0, select bank0
  6042  15F9  0844               	movf	___ftdiv@f2+1,w
  6043  15FA  1683               	bsf	3,5	;RP0=1, select bank1
  6044  15FB  1303               	bcf	3,6	;RP1=0, select bank1
  6045  15FC  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6046  15FD  1283               	bcf	3,5	;RP0=0, select bank0
  6047  15FE  1303               	bcf	3,6	;RP1=0, select bank0
  6048  15FF  0845               	movf	___ftdiv@f2+2,w
  6049  1600  1683               	bsf	3,5	;RP0=1, select bank1
  6050  1601  1303               	bcf	3,6	;RP1=0, select bank1
  6051  1602  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6052  1603  1003               	clrc
  6053  1604  0D21               	rlf	(??___ftdiv^(0+128)+1),w
  6054  1605  0D22               	rlf	(??___ftdiv^(0+128)+2),w
  6055  1606  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6056  1607  0823               	movf	(??___ftdiv+3)^(0+128),w
  6057  1608  00A9               	movwf	___ftdiv@sign^(0+128)
  6058  1609  0829               	movf	___ftdiv@sign^(0+128),w
  6059  160A  1D03               	btfss	3,2
  6060  160B  2E15               	goto	l4093
  6061  160C  3000               	movlw	0
  6062  160D  1283               	bcf	3,5	;RP0=0, select bank0
  6063  160E  1303               	bcf	3,6	;RP1=0, select bank0
  6064  160F  00C3               	movwf	?___ftdiv
  6065  1610  3000               	movlw	0
  6066  1611  00C4               	movwf	?___ftdiv+1
  6067  1612  3000               	movlw	0
  6068  1613  00C5               	movwf	?___ftdiv+2
  6069  1614  0008               	return
  6070  1615                     l4093:	
  6071  1615  3000               	movlw	0
  6072  1616  1683               	bsf	3,5	;RP0=1, select bank1
  6073  1617  1303               	bcf	3,6	;RP1=0, select bank1
  6074  1618  00A5               	movwf	___ftdiv@f3^(0+128)
  6075  1619  3000               	movlw	0
  6076  161A  00A6               	movwf	(___ftdiv@f3+1)^(0+128)
  6077  161B  3000               	movlw	0
  6078  161C  00A7               	movwf	(___ftdiv@f3+2)^(0+128)
  6079  161D  3089               	movlw	137
  6080  161E  0729               	addwf	___ftdiv@sign^(0+128),w
  6081  161F  00A0               	movwf	??___ftdiv^(0+128)
  6082  1620  0820               	movf	??___ftdiv^(0+128),w
  6083  1621  02A8               	subwf	___ftdiv@exp^(0+128),f
  6084  1622  1283               	bcf	3,5	;RP0=0, select bank0
  6085  1623  1303               	bcf	3,6	;RP1=0, select bank0
  6086  1624  0846               	movf	___ftdiv@f1,w
  6087  1625  1683               	bsf	3,5	;RP0=1, select bank1
  6088  1626  1303               	bcf	3,6	;RP1=0, select bank1
  6089  1627  00A0               	movwf	??___ftdiv^(0+128)
  6090  1628  1283               	bcf	3,5	;RP0=0, select bank0
  6091  1629  1303               	bcf	3,6	;RP1=0, select bank0
  6092  162A  0847               	movf	___ftdiv@f1+1,w
  6093  162B  1683               	bsf	3,5	;RP0=1, select bank1
  6094  162C  1303               	bcf	3,6	;RP1=0, select bank1
  6095  162D  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6096  162E  1283               	bcf	3,5	;RP0=0, select bank0
  6097  162F  1303               	bcf	3,6	;RP1=0, select bank0
  6098  1630  0848               	movf	___ftdiv@f1+2,w
  6099  1631  1683               	bsf	3,5	;RP0=1, select bank1
  6100  1632  1303               	bcf	3,6	;RP1=0, select bank1
  6101  1633  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6102  1634  3010               	movlw	16
  6103  1635                     u5095:	
  6104  1635  1003               	clrc
  6105  1636  0CA2               	rrf	(??___ftdiv^(0+128)+2),f
  6106  1637  0CA1               	rrf	(??___ftdiv^(0+128)+1),f
  6107  1638  0CA0               	rrf	??___ftdiv^(0+128),f
  6108  1639  3EFF               	addlw	-1
  6109  163A  1D03               	skipz
  6110  163B  2E35               	goto	u5095
  6111  163C  0820               	movf	??___ftdiv^(0+128),w
  6112  163D  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6113  163E  0823               	movf	(??___ftdiv+3)^(0+128),w
  6114  163F  00A9               	movwf	___ftdiv@sign^(0+128)
  6115  1640  1283               	bcf	3,5	;RP0=0, select bank0
  6116  1641  1303               	bcf	3,6	;RP1=0, select bank0
  6117  1642  0843               	movf	___ftdiv@f2,w
  6118  1643  1683               	bsf	3,5	;RP0=1, select bank1
  6119  1644  1303               	bcf	3,6	;RP1=0, select bank1
  6120  1645  00A0               	movwf	??___ftdiv^(0+128)
  6121  1646  1283               	bcf	3,5	;RP0=0, select bank0
  6122  1647  1303               	bcf	3,6	;RP1=0, select bank0
  6123  1648  0844               	movf	___ftdiv@f2+1,w
  6124  1649  1683               	bsf	3,5	;RP0=1, select bank1
  6125  164A  1303               	bcf	3,6	;RP1=0, select bank1
  6126  164B  00A1               	movwf	(??___ftdiv^(0+128)+1)
  6127  164C  1283               	bcf	3,5	;RP0=0, select bank0
  6128  164D  1303               	bcf	3,6	;RP1=0, select bank0
  6129  164E  0845               	movf	___ftdiv@f2+2,w
  6130  164F  1683               	bsf	3,5	;RP0=1, select bank1
  6131  1650  1303               	bcf	3,6	;RP1=0, select bank1
  6132  1651  00A2               	movwf	(??___ftdiv^(0+128)+2)
  6133  1652  3010               	movlw	16
  6134  1653                     u5105:	
  6135  1653  1003               	clrc
  6136  1654  0CA2               	rrf	(??___ftdiv^(0+128)+2),f
  6137  1655  0CA1               	rrf	(??___ftdiv^(0+128)+1),f
  6138  1656  0CA0               	rrf	??___ftdiv^(0+128),f
  6139  1657  3EFF               	addlw	-1
  6140  1658  1D03               	skipz
  6141  1659  2E53               	goto	u5105
  6142  165A  0820               	movf	??___ftdiv^(0+128),w
  6143  165B  00A3               	movwf	(??___ftdiv+3)^(0+128)
  6144  165C  0823               	movf	(??___ftdiv+3)^(0+128),w
  6145  165D  06A9               	xorwf	___ftdiv@sign^(0+128),f
  6146  165E  3080               	movlw	128
  6147  165F  00A0               	movwf	??___ftdiv^(0+128)
  6148  1660  0820               	movf	??___ftdiv^(0+128),w
  6149  1661  05A9               	andwf	___ftdiv@sign^(0+128),f
  6150  1662  1283               	bcf	3,5	;RP0=0, select bank0
  6151  1663  1303               	bcf	3,6	;RP1=0, select bank0
  6152  1664  17C7               	bsf	___ftdiv@f1+1,7
  6153  1665  30FF               	movlw	255
  6154  1666  05C6               	andwf	___ftdiv@f1,f
  6155  1667  30FF               	movlw	255
  6156  1668  05C7               	andwf	___ftdiv@f1+1,f
  6157  1669  3000               	movlw	0
  6158  166A  05C8               	andwf	___ftdiv@f1+2,f
  6159  166B  17C4               	bsf	___ftdiv@f2+1,7
  6160  166C  30FF               	movlw	255
  6161  166D  05C3               	andwf	___ftdiv@f2,f
  6162  166E  30FF               	movlw	255
  6163  166F  05C4               	andwf	___ftdiv@f2+1,f
  6164  1670  3000               	movlw	0
  6165  1671  05C5               	andwf	___ftdiv@f2+2,f
  6166  1672  3018               	movlw	24
  6167  1673  1683               	bsf	3,5	;RP0=1, select bank1
  6168  1674  1303               	bcf	3,6	;RP1=0, select bank1
  6169  1675  00A0               	movwf	??___ftdiv^(0+128)
  6170  1676  0820               	movf	??___ftdiv^(0+128),w
  6171  1677  00A4               	movwf	___ftdiv@cntr^(0+128)
  6172  1678                     l4107:	
  6173  1678  3001               	movlw	1
  6174  1679                     u5115:	
  6175  1679  1003               	clrc
  6176  167A  0DA5               	rlf	___ftdiv@f3^(0+128),f
  6177  167B  0DA6               	rlf	(___ftdiv@f3+1)^(0+128),f
  6178  167C  0DA7               	rlf	(___ftdiv@f3+2)^(0+128),f
  6179  167D  3EFF               	addlw	-1
  6180  167E  1D03               	skipz
  6181  167F  2E79               	goto	u5115
  6182  1680  1283               	bcf	3,5	;RP0=0, select bank0
  6183  1681  1303               	bcf	3,6	;RP1=0, select bank0
  6184  1682  0845               	movf	___ftdiv@f2+2,w
  6185  1683  0248               	subwf	___ftdiv@f1+2,w
  6186  1684  1D03               	skipz
  6187  1685  2E8C               	goto	u5125
  6188  1686  0844               	movf	___ftdiv@f2+1,w
  6189  1687  0247               	subwf	___ftdiv@f1+1,w
  6190  1688  1D03               	skipz
  6191  1689  2E8C               	goto	u5125
  6192  168A  0843               	movf	___ftdiv@f2,w
  6193  168B  0246               	subwf	___ftdiv@f1,w
  6194  168C                     u5125:	
  6195  168C  1C03               	skipc
  6196  168D  2E9B               	goto	l4115
  6197  168E  0843               	movf	___ftdiv@f2,w
  6198  168F  02C6               	subwf	___ftdiv@f1,f
  6199  1690  0844               	movf	___ftdiv@f2+1,w
  6200  1691  1C03               	skipc
  6201  1692  0F44               	incfsz	___ftdiv@f2+1,w
  6202  1693  02C7               	subwf	___ftdiv@f1+1,f
  6203  1694  0845               	movf	___ftdiv@f2+2,w
  6204  1695  1C03               	skipc
  6205  1696  0A45               	incf	___ftdiv@f2+2,w
  6206  1697  02C8               	subwf	___ftdiv@f1+2,f
  6207  1698  1683               	bsf	3,5	;RP0=1, select bank1
  6208  1699  1303               	bcf	3,6	;RP1=0, select bank1
  6209  169A  1425               	bsf	___ftdiv@f3^(0+128),0
  6210  169B                     l4115:	
  6211  169B  3001               	movlw	1
  6212  169C                     u5135:	
  6213  169C  1003               	clrc
  6214  169D  1283               	bcf	3,5	;RP0=0, select bank0
  6215  169E  0DC6               	rlf	___ftdiv@f1,f
  6216  169F  0DC7               	rlf	___ftdiv@f1+1,f
  6217  16A0  0DC8               	rlf	___ftdiv@f1+2,f
  6218  16A1  3EFF               	addlw	-1
  6219  16A2  1D03               	skipz
  6220  16A3  2E9C               	goto	u5135
  6221  16A4  3001               	movlw	1
  6222  16A5  1683               	bsf	3,5	;RP0=1, select bank1
  6223  16A6  1303               	bcf	3,6	;RP1=0, select bank1
  6224  16A7  02A4               	subwf	___ftdiv@cntr^(0+128),f
  6225  16A8  1D03               	btfss	3,2
  6226  16A9  2E78               	goto	l4107
  6227  16AA  0825               	movf	___ftdiv@f3^(0+128),w
  6228  16AB  1283               	bcf	3,5	;RP0=0, select bank0
  6229  16AC  1303               	bcf	3,6	;RP1=0, select bank0
  6230  16AD  00B5               	movwf	___ftpack@arg
  6231  16AE  1683               	bsf	3,5	;RP0=1, select bank1
  6232  16AF  1303               	bcf	3,6	;RP1=0, select bank1
  6233  16B0  0826               	movf	(___ftdiv@f3+1)^(0+128),w
  6234  16B1  1283               	bcf	3,5	;RP0=0, select bank0
  6235  16B2  1303               	bcf	3,6	;RP1=0, select bank0
  6236  16B3  00B6               	movwf	___ftpack@arg+1
  6237  16B4  1683               	bsf	3,5	;RP0=1, select bank1
  6238  16B5  1303               	bcf	3,6	;RP1=0, select bank1
  6239  16B6  0827               	movf	(___ftdiv@f3+2)^(0+128),w
  6240  16B7  1283               	bcf	3,5	;RP0=0, select bank0
  6241  16B8  1303               	bcf	3,6	;RP1=0, select bank0
  6242  16B9  00B7               	movwf	___ftpack@arg+2
  6243  16BA  1683               	bsf	3,5	;RP0=1, select bank1
  6244  16BB  1303               	bcf	3,6	;RP1=0, select bank1
  6245  16BC  0828               	movf	___ftdiv@exp^(0+128),w
  6246  16BD  00A0               	movwf	??___ftdiv^(0+128)
  6247  16BE  0820               	movf	??___ftdiv^(0+128),w
  6248  16BF  1283               	bcf	3,5	;RP0=0, select bank0
  6249  16C0  1303               	bcf	3,6	;RP1=0, select bank0
  6250  16C1  00B8               	movwf	___ftpack@exp
  6251  16C2  1683               	bsf	3,5	;RP0=1, select bank1
  6252  16C3  1303               	bcf	3,6	;RP1=0, select bank1
  6253  16C4  0829               	movf	___ftdiv@sign^(0+128),w
  6254  16C5  00A1               	movwf	(??___ftdiv+1)^(0+128)
  6255  16C6  0821               	movf	(??___ftdiv+1)^(0+128),w
  6256  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  6257  16C8  1303               	bcf	3,6	;RP1=0, select bank0
  6258  16C9  00B9               	movwf	___ftpack@sign
  6259  16CA  160A  118A  22CE   	fcall	___ftpack
  6260  16CD  1283               	bcf	3,5	;RP0=0, select bank0
  6261  16CE  1303               	bcf	3,6	;RP1=0, select bank0
  6262  16CF  0835               	movf	?___ftpack,w
  6263  16D0  00C3               	movwf	?___ftdiv
  6264  16D1  0836               	movf	?___ftpack+1,w
  6265  16D2  00C4               	movwf	?___ftdiv+1
  6266  16D3  0837               	movf	?___ftpack+2,w
  6267  16D4  00C5               	movwf	?___ftdiv+2
  6268  16D5  0008               	return
  6269  16D6                     __end_of___ftdiv:	
  6270                           
  6271                           	psect	text19
  6272  1F80                     __ptext19:	
  6273 ;; *************** function _run *****************
  6274 ;; Defined at:
  6275 ;;		line 339 in file "main.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  duty            2   28[BANK1 ] int 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;		None
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      void 
  6282 ;; Registers used:
  6283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6289 ;;      Params:         0       0       2       0       0
  6290 ;;      Locals:         0       0       0       0       0
  6291 ;;      Temps:          0       0       0       0       0
  6292 ;;      Totals:         0       0       2       0       0
  6293 ;;Total ram usage:        2 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    7
  6296 ;; This function calls:
  6297 ;;		_USARTWriteLine
  6298 ;;		_acquire
  6299 ;;		_set_pwm
  6300 ;; This function is called by:
  6301 ;;		_choice
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function _run
  6307  1F80                     _run:	
  6308                           
  6309                           ;main.c: 341: if(duty>100){
  6310                           
  6311                           ;incstack = 0
  6312 ;; hardware stack exceeded
  6313                           ; Regs used in _run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6314  1F80  1683               	bsf	3,5	;RP0=1, select bank1
  6315  1F81  1303               	bcf	3,6	;RP1=0, select bank1
  6316  1F82  083D               	movf	(run@duty+1)^(0+128),w
  6317  1F83  3A80               	xorlw	128
  6318  1F84  00FF               	movwf	127
  6319  1F85  3080               	movlw	128
  6320  1F86  027F               	subwf	127,w
  6321  1F87  1D03               	skipz
  6322  1F88  2F8B               	goto	u5305
  6323  1F89  3065               	movlw	101
  6324  1F8A  023C               	subwf	run@duty^(0+128),w
  6325  1F8B                     u5305:	
  6326  1F8B  1C03               	skipc
  6327  1F8C  2F92               	goto	l4299
  6328                           
  6329                           ;main.c: 342: duty=0;
  6330  1F8D  1683               	bsf	3,5	;RP0=1, select bank1
  6331  1F8E  1303               	bcf	3,6	;RP1=0, select bank1
  6332  1F8F  01BC               	clrf	run@duty^(0+128)
  6333  1F90  01BD               	clrf	(run@duty+1)^(0+128)
  6334                           
  6335                           ;main.c: 343: }
  6336  1F91  2F9C               	goto	l4303
  6337  1F92                     l4299:	
  6338                           
  6339                           ;main.c: 344: else if(duty == 0){
  6340  1F92  1683               	bsf	3,5	;RP0=1, select bank1
  6341  1F93  1303               	bcf	3,6	;RP1=0, select bank1
  6342  1F94  083C               	movf	run@duty^(0+128),w
  6343  1F95  043D               	iorwf	(run@duty+1)^(0+128),w
  6344  1F96  1D03               	btfss	3,2
  6345  1F97  2F9C               	goto	l4303
  6346                           
  6347                           ;main.c: 346: duty = 100;
  6348  1F98  3064               	movlw	100
  6349  1F99  00BC               	movwf	run@duty^(0+128)
  6350  1F9A  3000               	movlw	0
  6351  1F9B  00BD               	movwf	(run@duty^(0+128)+1)
  6352  1F9C                     l4303:	
  6353                           
  6354                           ;main.c: 347: }
  6355                           ;main.c: 348: set_pwm(duty);
  6356  1F9C  083D               	movf	(run@duty+1)^(0+128),w
  6357  1F9D  00B9               	movwf	(set_pwm@percent+1)^(0+128)
  6358  1F9E  083C               	movf	run@duty^(0+128),w
  6359  1F9F  00B8               	movwf	set_pwm@percent^(0+128)
  6360  1FA0  120A  118A  2057  160A  158A  	fcall	_set_pwm
  6361                           
  6362                           ;main.c: 350: acquire();
  6363  1FA5  160A  118A  226C  160A  158A  	fcall	_acquire
  6364                           
  6365                           ;main.c: 351: USARTWriteLine("If you want stop the system, type:");
  6366  1FAA  3005               	movlw	low ((STR_24+8)| (0+32768))
  6367  1FAB  1283               	bcf	3,5	;RP0=0, select bank0
  6368  1FAC  1303               	bcf	3,6	;RP1=0, select bank0
  6369  1FAD  00B8               	movwf	USARTWriteLine@str
  6370  1FAE  3084               	movlw	high ((STR_24+8)| (0+32768))
  6371  1FAF  00B9               	movwf	USARTWriteLine@str+1
  6372  1FB0  160A  158A  2485  160A  158A  	fcall	_USARTWriteLine
  6373                           
  6374                           ;main.c: 352: USARTWriteLine("stop()");
  6375  1FB5  303A               	movlw	low (STR_46| (0+32768))
  6376  1FB6  1283               	bcf	3,5	;RP0=0, select bank0
  6377  1FB7  1303               	bcf	3,6	;RP1=0, select bank0
  6378  1FB8  00B8               	movwf	USARTWriteLine@str
  6379  1FB9  3086               	movlw	high (STR_46| (0+32768))
  6380  1FBA  00B9               	movwf	USARTWriteLine@str+1
  6381  1FBB  160A  158A  2485   	fcall	_USARTWriteLine
  6382  1FBE  0008               	return
  6383  1FBF                     __end_of_run:	
  6384                           
  6385                           	psect	text20
  6386  0057                     __ptext20:	
  6387 ;; *************** function _set_pwm *****************
  6388 ;; Defined at:
  6389 ;;		line 300 in file "main.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  percent         2   24[BANK1 ] int 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      void 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2, status,0, pclath, cstack
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6403 ;;      Params:         0       0       2       0       0
  6404 ;;      Locals:         0       0       0       0       0
  6405 ;;      Temps:          0       0       2       0       0
  6406 ;;      Totals:         0       0       4       0       0
  6407 ;;Total ram usage:        4 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    6
  6410 ;; This function calls:
  6411 ;;		___awtoft
  6412 ;;		___ftmul
  6413 ;;		___fttol
  6414 ;; This function is called by:
  6415 ;;		_step
  6416 ;;		_run
  6417 ;;		_stop
  6418 ;;		_sys
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           
  6423                           ;psect for function _set_pwm
  6424  0057                     _set_pwm:	
  6425                           
  6426                           ;main.c: 301: pwm = (percent*10.23);
  6427                           
  6428                           ;incstack = 0
  6429                           ; Regs used in _set_pwm: [wreg+status,2+status,0+pclath+cstack]
  6430  0057  1683               	bsf	3,5	;RP0=1, select bank1
  6431  0058  1303               	bcf	3,6	;RP1=0, select bank1
  6432  0059  0839               	movf	(set_pwm@percent+1)^(0+128),w
  6433  005A  1283               	bcf	3,5	;RP0=0, select bank0
  6434  005B  1303               	bcf	3,6	;RP1=0, select bank0
  6435  005C  00BE               	movwf	___awtoft@c+1
  6436  005D  1683               	bsf	3,5	;RP0=1, select bank1
  6437  005E  1303               	bcf	3,6	;RP1=0, select bank1
  6438  005F  0838               	movf	set_pwm@percent^(0+128),w
  6439  0060  1283               	bcf	3,5	;RP0=0, select bank0
  6440  0061  1303               	bcf	3,6	;RP1=0, select bank0
  6441  0062  00BD               	movwf	___awtoft@c
  6442  0063  160A  158A  25B4  120A  118A  	fcall	___awtoft
  6443  0068  1283               	bcf	3,5	;RP0=0, select bank0
  6444  0069  1303               	bcf	3,6	;RP1=0, select bank0
  6445  006A  083D               	movf	?___awtoft,w
  6446  006B  00C6               	movwf	___ftmul@f2
  6447  006C  083E               	movf	?___awtoft+1,w
  6448  006D  00C7               	movwf	___ftmul@f2+1
  6449  006E  083F               	movf	?___awtoft+2,w
  6450  006F  00C8               	movwf	___ftmul@f2+2
  6451  0070  30AE               	movlw	174
  6452  0071  00C3               	movwf	___ftmul@f1
  6453  0072  3023               	movlw	35
  6454  0073  00C4               	movwf	___ftmul@f1+1
  6455  0074  3041               	movlw	65
  6456  0075  00C5               	movwf	___ftmul@f1+2
  6457  0076  120A  118A  265A  120A  118A  	fcall	___ftmul
  6458  007B  1283               	bcf	3,5	;RP0=0, select bank0
  6459  007C  1303               	bcf	3,6	;RP1=0, select bank0
  6460  007D  0843               	movf	?___ftmul,w
  6461  007E  1683               	bsf	3,5	;RP0=1, select bank1
  6462  007F  1303               	bcf	3,6	;RP1=0, select bank1
  6463  0080  00AA               	movwf	___fttol@f1^(0+128)
  6464  0081  1283               	bcf	3,5	;RP0=0, select bank0
  6465  0082  1303               	bcf	3,6	;RP1=0, select bank0
  6466  0083  0844               	movf	?___ftmul+1,w
  6467  0084  1683               	bsf	3,5	;RP0=1, select bank1
  6468  0085  1303               	bcf	3,6	;RP1=0, select bank1
  6469  0086  00AB               	movwf	(___fttol@f1+1)^(0+128)
  6470  0087  1283               	bcf	3,5	;RP0=0, select bank0
  6471  0088  1303               	bcf	3,6	;RP1=0, select bank0
  6472  0089  0845               	movf	?___ftmul+2,w
  6473  008A  1683               	bsf	3,5	;RP0=1, select bank1
  6474  008B  1303               	bcf	3,6	;RP1=0, select bank1
  6475  008C  00AC               	movwf	(___fttol@f1+2)^(0+128)
  6476  008D  160A  118A  23AD  120A  118A  	fcall	___fttol
  6477  0092  1683               	bsf	3,5	;RP0=1, select bank1
  6478  0093  1303               	bcf	3,6	;RP1=0, select bank1
  6479  0094  082B               	movf	(?___fttol+1)^(0+128),w
  6480  0095  00CF               	movwf	(_pwm+1)^(0+128)
  6481  0096  082A               	movf	?___fttol^(0+128),w
  6482  0097  00CE               	movwf	_pwm^(0+128)
  6483                           
  6484                           ;main.c: 302: CCPR1L = pwm>>2;
  6485  0098  084F               	movf	(_pwm+1)^(0+128),w
  6486  0099  00BB               	movwf	(??_set_pwm^(0+128)+1)
  6487  009A  084E               	movf	_pwm^(0+128),w
  6488  009B  00BA               	movwf	??_set_pwm^(0+128)
  6489  009C  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6490  009D  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6491  009E  0CBA               	rrf	??_set_pwm^(0+128),f
  6492  009F  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6493  00A0  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6494  00A1  0CBA               	rrf	??_set_pwm^(0+128),f
  6495  00A2  083A               	movf	??_set_pwm^(0+128),w
  6496  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  6497  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  6498  00A5  0095               	movwf	21	;volatile
  6499                           
  6500                           ;main.c: 303: CCPR2L = pwm>>2;
  6501  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  6502  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  6503  00A8  084F               	movf	(_pwm+1)^(0+128),w
  6504  00A9  00BB               	movwf	(??_set_pwm^(0+128)+1)
  6505  00AA  084E               	movf	_pwm^(0+128),w
  6506  00AB  00BA               	movwf	??_set_pwm^(0+128)
  6507  00AC  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6508  00AD  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6509  00AE  0CBA               	rrf	??_set_pwm^(0+128),f
  6510  00AF  0D3B               	rlf	(??_set_pwm^(0+128)+1),w
  6511  00B0  0CBB               	rrf	(??_set_pwm^(0+128)+1),f
  6512  00B1  0CBA               	rrf	??_set_pwm^(0+128),f
  6513  00B2  083A               	movf	??_set_pwm^(0+128),w
  6514  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  6515  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  6516  00B5  009B               	movwf	27	;volatile
  6517                           
  6518                           ;main.c: 304: CCP1CONbits.CCP1Y = pwm & 0b00000001;
  6519  00B6  1683               	bsf	3,5	;RP0=1, select bank1
  6520  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  6521  00B8  084E               	movf	_pwm^(0+128),w
  6522  00B9  3901               	andlw	1
  6523  00BA  00BA               	movwf	??_set_pwm^(0+128)
  6524  00BB  0EBA               	swapf	??_set_pwm^(0+128),f
  6525  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  6526  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  6527  00BE  0817               	movf	23,w	;volatile
  6528  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  6529  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  6530  00C1  063A               	xorwf	??_set_pwm^(0+128),w
  6531  00C2  39EF               	andlw	-17
  6532  00C3  063A               	xorwf	??_set_pwm^(0+128),w
  6533  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  6534  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  6535  00C6  0097               	movwf	23	;volatile
  6536                           
  6537                           ;main.c: 305: CCP1CONbits.CCP1X = pwm & 0b00000010;
  6538  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  6539  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  6540  00C9  084E               	movf	_pwm^(0+128),w
  6541  00CA  3902               	andlw	2
  6542  00CB  00BA               	movwf	??_set_pwm^(0+128)
  6543  00CC  0EBA               	swapf	??_set_pwm^(0+128),f
  6544  00CD  0DBA               	rlf	??_set_pwm^(0+128),f
  6545  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  6546  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  6547  00D0  0817               	movf	23,w	;volatile
  6548  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  6549  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  6550  00D3  063A               	xorwf	??_set_pwm^(0+128),w
  6551  00D4  39DF               	andlw	-33
  6552  00D5  063A               	xorwf	??_set_pwm^(0+128),w
  6553  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  6554  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  6555  00D8  0097               	movwf	23	;volatile
  6556                           
  6557                           ;main.c: 306: CCP2CONbits.CCP2Y = pwm & 0b00000001;
  6558  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  6559  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  6560  00DB  084E               	movf	_pwm^(0+128),w
  6561  00DC  3901               	andlw	1
  6562  00DD  00BA               	movwf	??_set_pwm^(0+128)
  6563  00DE  0EBA               	swapf	??_set_pwm^(0+128),f
  6564  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  6565  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  6566  00E1  081D               	movf	29,w	;volatile
  6567  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  6568  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  6569  00E4  063A               	xorwf	??_set_pwm^(0+128),w
  6570  00E5  39EF               	andlw	-17
  6571  00E6  063A               	xorwf	??_set_pwm^(0+128),w
  6572  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  6573  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  6574  00E9  009D               	movwf	29	;volatile
  6575                           
  6576                           ;main.c: 307: CCP2CONbits.CCP2X = pwm & 0b00000010;
  6577  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  6578  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  6579  00EC  084E               	movf	_pwm^(0+128),w
  6580  00ED  3902               	andlw	2
  6581  00EE  00BA               	movwf	??_set_pwm^(0+128)
  6582  00EF  0EBA               	swapf	??_set_pwm^(0+128),f
  6583  00F0  0DBA               	rlf	??_set_pwm^(0+128),f
  6584  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  6585  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  6586  00F3  081D               	movf	29,w	;volatile
  6587  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  6588  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  6589  00F6  063A               	xorwf	??_set_pwm^(0+128),w
  6590  00F7  39DF               	andlw	-33
  6591  00F8  063A               	xorwf	??_set_pwm^(0+128),w
  6592  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  6593  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  6594  00FB  009D               	movwf	29	;volatile
  6595  00FC  0008               	return
  6596  00FD                     __end_of_set_pwm:	
  6597                           
  6598                           	psect	text21
  6599  13AD                     __ptext21:	
  6600 ;; *************** function ___fttol *****************
  6601 ;; Defined at:
  6602 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;  f1              3   10[BANK1 ] float 
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;  lval            4   19[BANK1 ] unsigned long 
  6607 ;;  exp1            1   23[BANK1 ] unsigned char 
  6608 ;;  sign1           1   18[BANK1 ] unsigned char 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  4   10[BANK1 ] long 
  6611 ;; Registers used:
  6612 ;;		wreg, status,2, status,0
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6618 ;;      Params:         0       0       4       0       0
  6619 ;;      Locals:         0       0       6       0       0
  6620 ;;      Temps:          0       0       4       0       0
  6621 ;;      Totals:         0       0      14       0       0
  6622 ;;Total ram usage:       14 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    4
  6625 ;; This function calls:
  6626 ;;		Nothing
  6627 ;; This function is called by:
  6628 ;;		_set_pwm
  6629 ;;		_status
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function ___fttol
  6635  13AD                     ___fttol:	
  6636                           
  6637                           ;incstack = 0
  6638                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6639  13AD  1683               	bsf	3,5	;RP0=1, select bank1
  6640  13AE  1303               	bcf	3,6	;RP1=0, select bank1
  6641  13AF  082A               	movf	___fttol@f1^(0+128),w
  6642  13B0  00AE               	movwf	??___fttol^(0+128)
  6643  13B1  082B               	movf	(___fttol@f1+1)^(0+128),w
  6644  13B2  00AF               	movwf	(??___fttol^(0+128)+1)
  6645  13B3  082C               	movf	(___fttol@f1+2)^(0+128),w
  6646  13B4  00B0               	movwf	(??___fttol^(0+128)+2)
  6647  13B5  1003               	clrc
  6648  13B6  0D2F               	rlf	(??___fttol^(0+128)+1),w
  6649  13B7  0D30               	rlf	(??___fttol^(0+128)+2),w
  6650  13B8  00B1               	movwf	(??___fttol+3)^(0+128)
  6651  13B9  0831               	movf	(??___fttol+3)^(0+128),w
  6652  13BA  00B7               	movwf	___fttol@exp1^(0+128)
  6653  13BB  0837               	movf	___fttol@exp1^(0+128),w
  6654  13BC  1D03               	btfss	3,2
  6655  13BD  2BC7               	goto	l3741
  6656  13BE  3000               	movlw	0
  6657  13BF  00AD               	movwf	(?___fttol+3)^(0+128)
  6658  13C0  3000               	movlw	0
  6659  13C1  00AC               	movwf	(?___fttol+2)^(0+128)
  6660  13C2  3000               	movlw	0
  6661  13C3  00AB               	movwf	(?___fttol+1)^(0+128)
  6662  13C4  3000               	movlw	0
  6663  13C5  00AA               	movwf	?___fttol^(0+128)
  6664  13C6  0008               	return
  6665  13C7                     l3741:	
  6666  13C7  082A               	movf	___fttol@f1^(0+128),w
  6667  13C8  00AE               	movwf	??___fttol^(0+128)
  6668  13C9  082B               	movf	(___fttol@f1+1)^(0+128),w
  6669  13CA  00AF               	movwf	(??___fttol^(0+128)+1)
  6670  13CB  082C               	movf	(___fttol@f1+2)^(0+128),w
  6671  13CC  00B0               	movwf	(??___fttol^(0+128)+2)
  6672  13CD  3017               	movlw	23
  6673  13CE                     u4445:	
  6674  13CE  1003               	clrc
  6675  13CF  0CB0               	rrf	(??___fttol^(0+128)+2),f
  6676  13D0  0CAF               	rrf	(??___fttol^(0+128)+1),f
  6677  13D1  0CAE               	rrf	??___fttol^(0+128),f
  6678  13D2  3EFF               	addlw	-1
  6679  13D3  1D03               	skipz
  6680  13D4  2BCE               	goto	u4445
  6681  13D5  082E               	movf	??___fttol^(0+128),w
  6682  13D6  00B1               	movwf	(??___fttol+3)^(0+128)
  6683  13D7  0831               	movf	(??___fttol+3)^(0+128),w
  6684  13D8  00B2               	movwf	___fttol@sign1^(0+128)
  6685  13D9  17AB               	bsf	(___fttol@f1^(0+128)+1),7
  6686  13DA  30FF               	movlw	255
  6687  13DB  05AA               	andwf	___fttol@f1^(0+128),f
  6688  13DC  30FF               	movlw	255
  6689  13DD  05AB               	andwf	(___fttol@f1+1)^(0+128),f
  6690  13DE  3000               	movlw	0
  6691  13DF  05AC               	andwf	(___fttol@f1+2)^(0+128),f
  6692  13E0  082A               	movf	___fttol@f1^(0+128),w
  6693  13E1  00B3               	movwf	___fttol@lval^(0+128)
  6694  13E2  082B               	movf	(___fttol@f1+1)^(0+128),w
  6695  13E3  00B4               	movwf	(___fttol@lval^(0+128)+1)
  6696  13E4  082C               	movf	(___fttol@f1+2)^(0+128),w
  6697  13E5  00B5               	movwf	(___fttol@lval^(0+128)+2)
  6698  13E6  01B6               	clrf	(___fttol@lval^(0+128)+3)
  6699  13E7  308E               	movlw	142
  6700  13E8  02B7               	subwf	___fttol@exp1^(0+128),f
  6701  13E9  1FB7               	btfss	___fttol@exp1^(0+128),7
  6702  13EA  2C09               	goto	l3761
  6703  13EB  0837               	movf	___fttol@exp1^(0+128),w
  6704  13EC  3A80               	xorlw	128
  6705  13ED  3E8F               	addlw	143
  6706  13EE  1803               	skipnc
  6707  13EF  2BF9               	goto	l3759
  6708  13F0  3000               	movlw	0
  6709  13F1  00AD               	movwf	(?___fttol+3)^(0+128)
  6710  13F2  3000               	movlw	0
  6711  13F3  00AC               	movwf	(?___fttol+2)^(0+128)
  6712  13F4  3000               	movlw	0
  6713  13F5  00AB               	movwf	(?___fttol+1)^(0+128)
  6714  13F6  3000               	movlw	0
  6715  13F7  00AA               	movwf	?___fttol^(0+128)
  6716  13F8  0008               	return
  6717  13F9                     l3759:	
  6718  13F9  3001               	movlw	1
  6719  13FA                     u4475:	
  6720  13FA  1003               	clrc
  6721  13FB  0CB6               	rrf	(___fttol@lval+3)^(0+128),f
  6722  13FC  0CB5               	rrf	(___fttol@lval+2)^(0+128),f
  6723  13FD  0CB4               	rrf	(___fttol@lval+1)^(0+128),f
  6724  13FE  0CB3               	rrf	___fttol@lval^(0+128),f
  6725  13FF  3EFF               	addlw	-1
  6726  1400  1D03               	skipz
  6727  1401  2BFA               	goto	u4475
  6728  1402  3001               	movlw	1
  6729  1403  00AE               	movwf	??___fttol^(0+128)
  6730  1404  082E               	movf	??___fttol^(0+128),w
  6731  1405  07B7               	addwf	___fttol@exp1^(0+128),f
  6732  1406  1903               	btfsc	3,2
  6733  1407  2C24               	goto	l3769
  6734  1408  2BF9               	goto	l3759
  6735  1409                     l3761:	
  6736  1409  3018               	movlw	24
  6737  140A  0237               	subwf	___fttol@exp1^(0+128),w
  6738  140B  1C03               	skipc
  6739  140C  2C21               	goto	l744
  6740  140D  3000               	movlw	0
  6741  140E  00AD               	movwf	(?___fttol+3)^(0+128)
  6742  140F  3000               	movlw	0
  6743  1410  00AC               	movwf	(?___fttol+2)^(0+128)
  6744  1411  3000               	movlw	0
  6745  1412  00AB               	movwf	(?___fttol+1)^(0+128)
  6746  1413  3000               	movlw	0
  6747  1414  00AA               	movwf	?___fttol^(0+128)
  6748  1415  0008               	return
  6749  1416                     l3767:	
  6750  1416  3001               	movlw	1
  6751  1417  00AE               	movwf	??___fttol^(0+128)
  6752  1418                     u4505:	
  6753  1418  1003               	clrc
  6754  1419  0DB3               	rlf	___fttol@lval^(0+128),f
  6755  141A  0DB4               	rlf	(___fttol@lval+1)^(0+128),f
  6756  141B  0DB5               	rlf	(___fttol@lval+2)^(0+128),f
  6757  141C  0DB6               	rlf	(___fttol@lval+3)^(0+128),f
  6758  141D  0BAE               	decfsz	??___fttol^(0+128),f
  6759  141E  2C18               	goto	u4505
  6760  141F  3001               	movlw	1
  6761  1420  02B7               	subwf	___fttol@exp1^(0+128),f
  6762  1421                     l744:	
  6763  1421  0837               	movf	___fttol@exp1^(0+128),w
  6764  1422  1D03               	btfss	3,2
  6765  1423  2C16               	goto	l3767
  6766  1424                     l3769:	
  6767  1424  0832               	movf	___fttol@sign1^(0+128),w
  6768  1425  1903               	btfsc	3,2
  6769  1426  2C32               	goto	l3773
  6770  1427  09B3               	comf	___fttol@lval^(0+128),f
  6771  1428  09B4               	comf	(___fttol@lval+1)^(0+128),f
  6772  1429  09B5               	comf	(___fttol@lval+2)^(0+128),f
  6773  142A  09B6               	comf	(___fttol@lval+3)^(0+128),f
  6774  142B  0AB3               	incf	___fttol@lval^(0+128),f
  6775  142C  1903               	skipnz
  6776  142D  0AB4               	incf	(___fttol@lval+1)^(0+128),f
  6777  142E  1903               	skipnz
  6778  142F  0AB5               	incf	(___fttol@lval+2)^(0+128),f
  6779  1430  1903               	skipnz
  6780  1431  0AB6               	incf	(___fttol@lval+3)^(0+128),f
  6781  1432                     l3773:	
  6782  1432  0836               	movf	(___fttol@lval+3)^(0+128),w
  6783  1433  00AD               	movwf	(?___fttol+3)^(0+128)
  6784  1434  0835               	movf	(___fttol@lval+2)^(0+128),w
  6785  1435  00AC               	movwf	(?___fttol+2)^(0+128)
  6786  1436  0834               	movf	(___fttol@lval+1)^(0+128),w
  6787  1437  00AB               	movwf	(?___fttol+1)^(0+128)
  6788  1438  0833               	movf	___fttol@lval^(0+128),w
  6789  1439  00AA               	movwf	?___fttol^(0+128)
  6790  143A  0008               	return
  6791  143B                     __end_of___fttol:	
  6792                           
  6793                           	psect	text22
  6794  065A                     __ptext22:	
  6795 ;; *************** function ___ftmul *****************
  6796 ;; Defined at:
  6797 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  f1              3   35[BANK0 ] float 
  6800 ;;  f2              3   38[BANK0 ] float 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  f3_as_produc    3    5[BANK1 ] unsigned um
  6803 ;;  sign            1    9[BANK1 ] unsigned char 
  6804 ;;  cntr            1    8[BANK1 ] unsigned char 
  6805 ;;  exp             1    4[BANK1 ] unsigned char 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  3   35[BANK0 ] float 
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0, pclath, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6815 ;;      Params:         0       6       0       0       0
  6816 ;;      Locals:         0       0       6       0       0
  6817 ;;      Temps:          0       0       4       0       0
  6818 ;;      Totals:         0       6      10       0       0
  6819 ;;Total ram usage:       16 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    5
  6822 ;; This function calls:
  6823 ;;		___ftpack
  6824 ;; This function is called by:
  6825 ;;		_set_pwm
  6826 ;;		_status
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           
  6831                           ;psect for function ___ftmul
  6832  065A                     ___ftmul:	
  6833                           
  6834                           ;incstack = 0
  6835                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6836  065A  1283               	bcf	3,5	;RP0=0, select bank0
  6837  065B  1303               	bcf	3,6	;RP1=0, select bank0
  6838  065C  0843               	movf	___ftmul@f1,w
  6839  065D  1683               	bsf	3,5	;RP0=1, select bank1
  6840  065E  1303               	bcf	3,6	;RP1=0, select bank1
  6841  065F  00A0               	movwf	??___ftmul^(0+128)
  6842  0660  1283               	bcf	3,5	;RP0=0, select bank0
  6843  0661  1303               	bcf	3,6	;RP1=0, select bank0
  6844  0662  0844               	movf	___ftmul@f1+1,w
  6845  0663  1683               	bsf	3,5	;RP0=1, select bank1
  6846  0664  1303               	bcf	3,6	;RP1=0, select bank1
  6847  0665  00A1               	movwf	(??___ftmul^(0+128)+1)
  6848  0666  1283               	bcf	3,5	;RP0=0, select bank0
  6849  0667  1303               	bcf	3,6	;RP1=0, select bank0
  6850  0668  0845               	movf	___ftmul@f1+2,w
  6851  0669  1683               	bsf	3,5	;RP0=1, select bank1
  6852  066A  1303               	bcf	3,6	;RP1=0, select bank1
  6853  066B  00A2               	movwf	(??___ftmul^(0+128)+2)
  6854  066C  1003               	clrc
  6855  066D  0D21               	rlf	(??___ftmul^(0+128)+1),w
  6856  066E  0D22               	rlf	(??___ftmul^(0+128)+2),w
  6857  066F  00A3               	movwf	(??___ftmul+3)^(0+128)
  6858  0670  0823               	movf	(??___ftmul+3)^(0+128),w
  6859  0671  00A4               	movwf	___ftmul@exp^(0+128)
  6860  0672  0824               	movf	___ftmul@exp^(0+128),w
  6861  0673  1D03               	btfss	3,2
  6862  0674  2E7E               	goto	l3691
  6863  0675  3000               	movlw	0
  6864  0676  1283               	bcf	3,5	;RP0=0, select bank0
  6865  0677  1303               	bcf	3,6	;RP1=0, select bank0
  6866  0678  00C3               	movwf	?___ftmul
  6867  0679  3000               	movlw	0
  6868  067A  00C4               	movwf	?___ftmul+1
  6869  067B  3000               	movlw	0
  6870  067C  00C5               	movwf	?___ftmul+2
  6871  067D  0008               	return
  6872  067E                     l3691:	
  6873  067E  1283               	bcf	3,5	;RP0=0, select bank0
  6874  067F  0846               	movf	___ftmul@f2,w
  6875  0680  1683               	bsf	3,5	;RP0=1, select bank1
  6876  0681  1303               	bcf	3,6	;RP1=0, select bank1
  6877  0682  00A0               	movwf	??___ftmul^(0+128)
  6878  0683  1283               	bcf	3,5	;RP0=0, select bank0
  6879  0684  1303               	bcf	3,6	;RP1=0, select bank0
  6880  0685  0847               	movf	___ftmul@f2+1,w
  6881  0686  1683               	bsf	3,5	;RP0=1, select bank1
  6882  0687  1303               	bcf	3,6	;RP1=0, select bank1
  6883  0688  00A1               	movwf	(??___ftmul^(0+128)+1)
  6884  0689  1283               	bcf	3,5	;RP0=0, select bank0
  6885  068A  1303               	bcf	3,6	;RP1=0, select bank0
  6886  068B  0848               	movf	___ftmul@f2+2,w
  6887  068C  1683               	bsf	3,5	;RP0=1, select bank1
  6888  068D  1303               	bcf	3,6	;RP1=0, select bank1
  6889  068E  00A2               	movwf	(??___ftmul^(0+128)+2)
  6890  068F  1003               	clrc
  6891  0690  0D21               	rlf	(??___ftmul^(0+128)+1),w
  6892  0691  0D22               	rlf	(??___ftmul^(0+128)+2),w
  6893  0692  00A3               	movwf	(??___ftmul+3)^(0+128)
  6894  0693  0823               	movf	(??___ftmul+3)^(0+128),w
  6895  0694  00A9               	movwf	___ftmul@sign^(0+128)
  6896  0695  0829               	movf	___ftmul@sign^(0+128),w
  6897  0696  1D03               	btfss	3,2
  6898  0697  2EA1               	goto	l3697
  6899  0698  3000               	movlw	0
  6900  0699  1283               	bcf	3,5	;RP0=0, select bank0
  6901  069A  1303               	bcf	3,6	;RP1=0, select bank0
  6902  069B  00C3               	movwf	?___ftmul
  6903  069C  3000               	movlw	0
  6904  069D  00C4               	movwf	?___ftmul+1
  6905  069E  3000               	movlw	0
  6906  069F  00C5               	movwf	?___ftmul+2
  6907  06A0  0008               	return
  6908  06A1                     l3697:	
  6909  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  6910  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  6911  06A3  0829               	movf	___ftmul@sign^(0+128),w
  6912  06A4  3E7B               	addlw	123
  6913  06A5  00A0               	movwf	??___ftmul^(0+128)
  6914  06A6  0820               	movf	??___ftmul^(0+128),w
  6915  06A7  07A4               	addwf	___ftmul@exp^(0+128),f
  6916  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  6917  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  6918  06AA  0843               	movf	___ftmul@f1,w
  6919  06AB  1683               	bsf	3,5	;RP0=1, select bank1
  6920  06AC  1303               	bcf	3,6	;RP1=0, select bank1
  6921  06AD  00A0               	movwf	??___ftmul^(0+128)
  6922  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  6923  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  6924  06B0  0844               	movf	___ftmul@f1+1,w
  6925  06B1  1683               	bsf	3,5	;RP0=1, select bank1
  6926  06B2  1303               	bcf	3,6	;RP1=0, select bank1
  6927  06B3  00A1               	movwf	(??___ftmul^(0+128)+1)
  6928  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  6929  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  6930  06B6  0845               	movf	___ftmul@f1+2,w
  6931  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  6932  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  6933  06B9  00A2               	movwf	(??___ftmul^(0+128)+2)
  6934  06BA  3010               	movlw	16
  6935  06BB                     u4315:	
  6936  06BB  1003               	clrc
  6937  06BC  0CA2               	rrf	(??___ftmul^(0+128)+2),f
  6938  06BD  0CA1               	rrf	(??___ftmul^(0+128)+1),f
  6939  06BE  0CA0               	rrf	??___ftmul^(0+128),f
  6940  06BF  3EFF               	addlw	-1
  6941  06C0  1D03               	skipz
  6942  06C1  2EBB               	goto	u4315
  6943  06C2  0820               	movf	??___ftmul^(0+128),w
  6944  06C3  00A3               	movwf	(??___ftmul+3)^(0+128)
  6945  06C4  0823               	movf	(??___ftmul+3)^(0+128),w
  6946  06C5  00A9               	movwf	___ftmul@sign^(0+128)
  6947  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  6948  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  6949  06C8  0846               	movf	___ftmul@f2,w
  6950  06C9  1683               	bsf	3,5	;RP0=1, select bank1
  6951  06CA  1303               	bcf	3,6	;RP1=0, select bank1
  6952  06CB  00A0               	movwf	??___ftmul^(0+128)
  6953  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  6954  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  6955  06CE  0847               	movf	___ftmul@f2+1,w
  6956  06CF  1683               	bsf	3,5	;RP0=1, select bank1
  6957  06D0  1303               	bcf	3,6	;RP1=0, select bank1
  6958  06D1  00A1               	movwf	(??___ftmul^(0+128)+1)
  6959  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  6960  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  6961  06D4  0848               	movf	___ftmul@f2+2,w
  6962  06D5  1683               	bsf	3,5	;RP0=1, select bank1
  6963  06D6  1303               	bcf	3,6	;RP1=0, select bank1
  6964  06D7  00A2               	movwf	(??___ftmul^(0+128)+2)
  6965  06D8  3010               	movlw	16
  6966  06D9                     u4325:	
  6967  06D9  1003               	clrc
  6968  06DA  0CA2               	rrf	(??___ftmul^(0+128)+2),f
  6969  06DB  0CA1               	rrf	(??___ftmul^(0+128)+1),f
  6970  06DC  0CA0               	rrf	??___ftmul^(0+128),f
  6971  06DD  3EFF               	addlw	-1
  6972  06DE  1D03               	skipz
  6973  06DF  2ED9               	goto	u4325
  6974  06E0  0820               	movf	??___ftmul^(0+128),w
  6975  06E1  00A3               	movwf	(??___ftmul+3)^(0+128)
  6976  06E2  0823               	movf	(??___ftmul+3)^(0+128),w
  6977  06E3  06A9               	xorwf	___ftmul@sign^(0+128),f
  6978  06E4  3080               	movlw	128
  6979  06E5  00A0               	movwf	??___ftmul^(0+128)
  6980  06E6  0820               	movf	??___ftmul^(0+128),w
  6981  06E7  05A9               	andwf	___ftmul@sign^(0+128),f
  6982  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  6983  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  6984  06EA  17C4               	bsf	___ftmul@f1+1,7
  6985  06EB  17C7               	bsf	___ftmul@f2+1,7
  6986  06EC  30FF               	movlw	255
  6987  06ED  05C6               	andwf	___ftmul@f2,f
  6988  06EE  30FF               	movlw	255
  6989  06EF  05C7               	andwf	___ftmul@f2+1,f
  6990  06F0  3000               	movlw	0
  6991  06F1  05C8               	andwf	___ftmul@f2+2,f
  6992  06F2  3000               	movlw	0
  6993  06F3  1683               	bsf	3,5	;RP0=1, select bank1
  6994  06F4  1303               	bcf	3,6	;RP1=0, select bank1
  6995  06F5  00A5               	movwf	___ftmul@f3_as_product^(0+128)
  6996  06F6  3000               	movlw	0
  6997  06F7  00A6               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  6998  06F8  3000               	movlw	0
  6999  06F9  00A7               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  7000  06FA  3007               	movlw	7
  7001  06FB  00A0               	movwf	??___ftmul^(0+128)
  7002  06FC  0820               	movf	??___ftmul^(0+128),w
  7003  06FD  00A8               	movwf	___ftmul@cntr^(0+128)
  7004  06FE                     l3709:	
  7005  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  7006  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  7007  0700  1C43               	btfss	___ftmul@f1,0
  7008  0701  2F20               	goto	l3713
  7009  0702  0846               	movf	___ftmul@f2,w
  7010  0703  1683               	bsf	3,5	;RP0=1, select bank1
  7011  0704  1303               	bcf	3,6	;RP1=0, select bank1
  7012  0705  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
  7013  0706  1283               	bcf	3,5	;RP0=0, select bank0
  7014  0707  1303               	bcf	3,6	;RP1=0, select bank0
  7015  0708  0847               	movf	___ftmul@f2+1,w
  7016  0709  1103               	clrz
  7017  070A  1803               	skipnc
  7018  070B  0A47               	incf	___ftmul@f2+1,w
  7019  070C  1903               	skipnz
  7020  070D  2F11               	goto	u4341
  7021  070E  1683               	bsf	3,5	;RP0=1, select bank1
  7022  070F  1303               	bcf	3,6	;RP1=0, select bank1
  7023  0710  07A6               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  7024  0711                     u4341:	
  7025  0711  1283               	bcf	3,5	;RP0=0, select bank0
  7026  0712  1303               	bcf	3,6	;RP1=0, select bank0
  7027  0713  0848               	movf	___ftmul@f2+2,w
  7028  0714  1103               	clrz
  7029  0715  1803               	skipnc
  7030  0716  0A48               	incf	___ftmul@f2+2,w
  7031  0717  1903               	skipnz
  7032  0718  2F1C               	goto	u4342
  7033  0719  1683               	bsf	3,5	;RP0=1, select bank1
  7034  071A  1303               	bcf	3,6	;RP1=0, select bank1
  7035  071B  07A7               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  7036  071C                     u4342:	
  7037  071C  1283               	bcf	3,5	;RP0=0, select bank0
  7038  071D  1303               	bcf	3,6	;RP1=0, select bank0
  7039  071E  1683               	bsf	3,5	;RP0=1, select bank1
  7040  071F  1303               	bcf	3,6	;RP1=0, select bank1
  7041  0720                     l3713:	
  7042  0720  3001               	movlw	1
  7043  0721                     u4355:	
  7044  0721  1003               	clrc
  7045  0722  1283               	bcf	3,5	;RP0=0, select bank0
  7046  0723  0CC5               	rrf	___ftmul@f1+2,f
  7047  0724  0CC4               	rrf	___ftmul@f1+1,f
  7048  0725  0CC3               	rrf	___ftmul@f1,f
  7049  0726  3EFF               	addlw	-1
  7050  0727  1D03               	skipz
  7051  0728  2F21               	goto	u4355
  7052  0729  3001               	movlw	1
  7053  072A                     u4365:	
  7054  072A  1003               	clrc
  7055  072B  0DC6               	rlf	___ftmul@f2,f
  7056  072C  0DC7               	rlf	___ftmul@f2+1,f
  7057  072D  0DC8               	rlf	___ftmul@f2+2,f
  7058  072E  3EFF               	addlw	-1
  7059  072F  1D03               	skipz
  7060  0730  2F2A               	goto	u4365
  7061  0731  3001               	movlw	1
  7062  0732  1683               	bsf	3,5	;RP0=1, select bank1
  7063  0733  1303               	bcf	3,6	;RP1=0, select bank1
  7064  0734  02A8               	subwf	___ftmul@cntr^(0+128),f
  7065  0735  1D03               	btfss	3,2
  7066  0736  2EFE               	goto	l3709
  7067  0737  3009               	movlw	9
  7068  0738  00A0               	movwf	??___ftmul^(0+128)
  7069  0739  0820               	movf	??___ftmul^(0+128),w
  7070  073A  00A8               	movwf	___ftmul@cntr^(0+128)
  7071  073B                     l3721:	
  7072  073B  1283               	bcf	3,5	;RP0=0, select bank0
  7073  073C  1303               	bcf	3,6	;RP1=0, select bank0
  7074  073D  1C43               	btfss	___ftmul@f1,0
  7075  073E  2F5D               	goto	l3725
  7076  073F  0846               	movf	___ftmul@f2,w
  7077  0740  1683               	bsf	3,5	;RP0=1, select bank1
  7078  0741  1303               	bcf	3,6	;RP1=0, select bank1
  7079  0742  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
  7080  0743  1283               	bcf	3,5	;RP0=0, select bank0
  7081  0744  1303               	bcf	3,6	;RP1=0, select bank0
  7082  0745  0847               	movf	___ftmul@f2+1,w
  7083  0746  1103               	clrz
  7084  0747  1803               	skipnc
  7085  0748  0A47               	incf	___ftmul@f2+1,w
  7086  0749  1903               	skipnz
  7087  074A  2F4E               	goto	u4391
  7088  074B  1683               	bsf	3,5	;RP0=1, select bank1
  7089  074C  1303               	bcf	3,6	;RP1=0, select bank1
  7090  074D  07A6               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  7091  074E                     u4391:	
  7092  074E  1283               	bcf	3,5	;RP0=0, select bank0
  7093  074F  1303               	bcf	3,6	;RP1=0, select bank0
  7094  0750  0848               	movf	___ftmul@f2+2,w
  7095  0751  1103               	clrz
  7096  0752  1803               	skipnc
  7097  0753  0A48               	incf	___ftmul@f2+2,w
  7098  0754  1903               	skipnz
  7099  0755  2F59               	goto	u4392
  7100  0756  1683               	bsf	3,5	;RP0=1, select bank1
  7101  0757  1303               	bcf	3,6	;RP1=0, select bank1
  7102  0758  07A7               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  7103  0759                     u4392:	
  7104  0759  1283               	bcf	3,5	;RP0=0, select bank0
  7105  075A  1303               	bcf	3,6	;RP1=0, select bank0
  7106  075B  1683               	bsf	3,5	;RP0=1, select bank1
  7107  075C  1303               	bcf	3,6	;RP1=0, select bank1
  7108  075D                     l3725:	
  7109  075D  3001               	movlw	1
  7110  075E                     u4405:	
  7111  075E  1003               	clrc
  7112  075F  1283               	bcf	3,5	;RP0=0, select bank0
  7113  0760  0CC5               	rrf	___ftmul@f1+2,f
  7114  0761  0CC4               	rrf	___ftmul@f1+1,f
  7115  0762  0CC3               	rrf	___ftmul@f1,f
  7116  0763  3EFF               	addlw	-1
  7117  0764  1D03               	skipz
  7118  0765  2F5E               	goto	u4405
  7119  0766  3001               	movlw	1
  7120  0767                     u4415:	
  7121  0767  1003               	clrc
  7122  0768  1683               	bsf	3,5	;RP0=1, select bank1
  7123  0769  1303               	bcf	3,6	;RP1=0, select bank1
  7124  076A  0CA7               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  7125  076B  0CA6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  7126  076C  0CA5               	rrf	___ftmul@f3_as_product^(0+128),f
  7127  076D  3EFF               	addlw	-1
  7128  076E  1D03               	skipz
  7129  076F  2F67               	goto	u4415
  7130  0770  3001               	movlw	1
  7131  0771  02A8               	subwf	___ftmul@cntr^(0+128),f
  7132  0772  1D03               	btfss	3,2
  7133  0773  2F3B               	goto	l3721
  7134  0774  0825               	movf	___ftmul@f3_as_product^(0+128),w
  7135  0775  1283               	bcf	3,5	;RP0=0, select bank0
  7136  0776  1303               	bcf	3,6	;RP1=0, select bank0
  7137  0777  00B5               	movwf	___ftpack@arg
  7138  0778  1683               	bsf	3,5	;RP0=1, select bank1
  7139  0779  1303               	bcf	3,6	;RP1=0, select bank1
  7140  077A  0826               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  7141  077B  1283               	bcf	3,5	;RP0=0, select bank0
  7142  077C  1303               	bcf	3,6	;RP1=0, select bank0
  7143  077D  00B6               	movwf	___ftpack@arg+1
  7144  077E  1683               	bsf	3,5	;RP0=1, select bank1
  7145  077F  1303               	bcf	3,6	;RP1=0, select bank1
  7146  0780  0827               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  7147  0781  1283               	bcf	3,5	;RP0=0, select bank0
  7148  0782  1303               	bcf	3,6	;RP1=0, select bank0
  7149  0783  00B7               	movwf	___ftpack@arg+2
  7150  0784  1683               	bsf	3,5	;RP0=1, select bank1
  7151  0785  1303               	bcf	3,6	;RP1=0, select bank1
  7152  0786  0824               	movf	___ftmul@exp^(0+128),w
  7153  0787  00A0               	movwf	??___ftmul^(0+128)
  7154  0788  0820               	movf	??___ftmul^(0+128),w
  7155  0789  1283               	bcf	3,5	;RP0=0, select bank0
  7156  078A  1303               	bcf	3,6	;RP1=0, select bank0
  7157  078B  00B8               	movwf	___ftpack@exp
  7158  078C  1683               	bsf	3,5	;RP0=1, select bank1
  7159  078D  1303               	bcf	3,6	;RP1=0, select bank1
  7160  078E  0829               	movf	___ftmul@sign^(0+128),w
  7161  078F  00A1               	movwf	(??___ftmul+1)^(0+128)
  7162  0790  0821               	movf	(??___ftmul+1)^(0+128),w
  7163  0791  1283               	bcf	3,5	;RP0=0, select bank0
  7164  0792  1303               	bcf	3,6	;RP1=0, select bank0
  7165  0793  00B9               	movwf	___ftpack@sign
  7166  0794  160A  118A  22CE   	fcall	___ftpack
  7167  0797  1283               	bcf	3,5	;RP0=0, select bank0
  7168  0798  1303               	bcf	3,6	;RP1=0, select bank0
  7169  0799  0835               	movf	?___ftpack,w
  7170  079A  00C3               	movwf	?___ftmul
  7171  079B  0836               	movf	?___ftpack+1,w
  7172  079C  00C4               	movwf	?___ftmul+1
  7173  079D  0837               	movf	?___ftpack+2,w
  7174  079E  00C5               	movwf	?___ftmul+2
  7175  079F  0008               	return
  7176  07A0                     __end_of___ftmul:	
  7177                           
  7178                           	psect	text23
  7179  1DB4                     __ptext23:	
  7180 ;; *************** function ___awtoft *****************
  7181 ;; Defined at:
  7182 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  c               2   29[BANK0 ] int 
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;  sign            1   34[BANK0 ] unsigned char 
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  3   29[BANK0 ] float 
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0, pclath, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7196 ;;      Params:         0       3       0       0       0
  7197 ;;      Locals:         0       1       0       0       0
  7198 ;;      Temps:          0       2       0       0       0
  7199 ;;      Totals:         0       6       0       0       0
  7200 ;;Total ram usage:        6 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    5
  7203 ;; This function calls:
  7204 ;;		___ftpack
  7205 ;; This function is called by:
  7206 ;;		_set_pwm
  7207 ;;		_status
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function ___awtoft
  7213  1DB4                     ___awtoft:	
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7217  1DB4  1283               	bcf	3,5	;RP0=0, select bank0
  7218  1DB5  1303               	bcf	3,6	;RP1=0, select bank0
  7219  1DB6  01C2               	clrf	___awtoft@sign
  7220  1DB7  1FBE               	btfss	___awtoft@c+1,7
  7221  1DB8  2DC0               	goto	l3681
  7222  1DB9  09BD               	comf	___awtoft@c,f
  7223  1DBA  09BE               	comf	___awtoft@c+1,f
  7224  1DBB  0ABD               	incf	___awtoft@c,f
  7225  1DBC  1903               	skipnz
  7226  1DBD  0ABE               	incf	___awtoft@c+1,f
  7227  1DBE  01C2               	clrf	___awtoft@sign
  7228  1DBF  0AC2               	incf	___awtoft@sign,f
  7229  1DC0                     l3681:	
  7230  1DC0  083D               	movf	___awtoft@c,w
  7231  1DC1  00B5               	movwf	___ftpack@arg
  7232  1DC2  083E               	movf	___awtoft@c+1,w
  7233  1DC3  00B6               	movwf	___ftpack@arg+1
  7234  1DC4  01B7               	clrf	___ftpack@arg+2
  7235  1DC5  308E               	movlw	142
  7236  1DC6  00C0               	movwf	??___awtoft
  7237  1DC7  0840               	movf	??___awtoft,w
  7238  1DC8  00B8               	movwf	___ftpack@exp
  7239  1DC9  0842               	movf	___awtoft@sign,w
  7240  1DCA  00C1               	movwf	??___awtoft+1
  7241  1DCB  0841               	movf	??___awtoft+1,w
  7242  1DCC  00B9               	movwf	___ftpack@sign
  7243  1DCD  160A  118A  22CE   	fcall	___ftpack
  7244  1DD0  1283               	bcf	3,5	;RP0=0, select bank0
  7245  1DD1  1303               	bcf	3,6	;RP1=0, select bank0
  7246  1DD2  0835               	movf	?___ftpack,w
  7247  1DD3  00BD               	movwf	?___awtoft
  7248  1DD4  0836               	movf	?___ftpack+1,w
  7249  1DD5  00BE               	movwf	?___awtoft+1
  7250  1DD6  0837               	movf	?___ftpack+2,w
  7251  1DD7  00BF               	movwf	?___awtoft+2
  7252  1DD8  0008               	return
  7253  1DD9                     __end_of___awtoft:	
  7254                           
  7255                           	psect	text24
  7256  12CE                     __ptext24:	
  7257 ;; *************** function ___ftpack *****************
  7258 ;; Defined at:
  7259 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  arg             3   21[BANK0 ] unsigned um
  7262 ;;  exp             1   24[BANK0 ] unsigned char 
  7263 ;;  sign            1   25[BANK0 ] unsigned char 
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;		None
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  3   21[BANK0 ] float 
  7268 ;; Registers used:
  7269 ;;		wreg, status,2, status,0
  7270 ;; Tracked objects:
  7271 ;;		On entry : 0/0
  7272 ;;		On exit  : 0/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7275 ;;      Params:         0       5       0       0       0
  7276 ;;      Locals:         0       0       0       0       0
  7277 ;;      Temps:          0       3       0       0       0
  7278 ;;      Totals:         0       8       0       0       0
  7279 ;;Total ram usage:        8 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    4
  7282 ;; This function calls:
  7283 ;;		Nothing
  7284 ;; This function is called by:
  7285 ;;		___awtoft
  7286 ;;		___ftdiv
  7287 ;;		___ftmul
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           
  7292                           ;psect for function ___ftpack
  7293  12CE                     ___ftpack:	
  7294                           
  7295                           ;incstack = 0
  7296                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7297  12CE  1283               	bcf	3,5	;RP0=0, select bank0
  7298  12CF  1303               	bcf	3,6	;RP1=0, select bank0
  7299  12D0  0838               	movf	___ftpack@exp,w
  7300  12D1  1903               	btfsc	3,2
  7301  12D2  2AD8               	goto	l3641
  7302  12D3  0837               	movf	___ftpack@arg+2,w
  7303  12D4  0436               	iorwf	___ftpack@arg+1,w
  7304  12D5  0435               	iorwf	___ftpack@arg,w
  7305  12D6  1D03               	skipz
  7306  12D7  2AEB               	goto	l3647
  7307  12D8                     l3641:	
  7308  12D8  3000               	movlw	0
  7309  12D9  00B5               	movwf	?___ftpack
  7310  12DA  3000               	movlw	0
  7311  12DB  00B6               	movwf	?___ftpack+1
  7312  12DC  3000               	movlw	0
  7313  12DD  00B7               	movwf	?___ftpack+2
  7314  12DE  0008               	return
  7315  12DF                     l3645:	
  7316  12DF  3001               	movlw	1
  7317  12E0  00BA               	movwf	??___ftpack
  7318  12E1  083A               	movf	??___ftpack,w
  7319  12E2  07B8               	addwf	___ftpack@exp,f
  7320  12E3  3001               	movlw	1
  7321  12E4                     u4175:	
  7322  12E4  1003               	clrc
  7323  12E5  0CB7               	rrf	___ftpack@arg+2,f
  7324  12E6  0CB6               	rrf	___ftpack@arg+1,f
  7325  12E7  0CB5               	rrf	___ftpack@arg,f
  7326  12E8  3EFF               	addlw	-1
  7327  12E9  1D03               	skipz
  7328  12EA  2AE4               	goto	u4175
  7329  12EB                     l3647:	
  7330  12EB  30FE               	movlw	254
  7331  12EC  0537               	andwf	___ftpack@arg+2,w
  7332  12ED  1903               	btfsc	3,2
  7333  12EE  2B06               	goto	l653
  7334  12EF  2ADF               	goto	l3645
  7335  12F0                     l3649:	
  7336  12F0  3001               	movlw	1
  7337  12F1  00BA               	movwf	??___ftpack
  7338  12F2  083A               	movf	??___ftpack,w
  7339  12F3  07B8               	addwf	___ftpack@exp,f
  7340  12F4  3001               	movlw	1
  7341  12F5  07B5               	addwf	___ftpack@arg,f
  7342  12F6  3000               	movlw	0
  7343  12F7  1803               	skipnc
  7344  12F8  3001               	movlw	1
  7345  12F9  07B6               	addwf	___ftpack@arg+1,f
  7346  12FA  3000               	movlw	0
  7347  12FB  1803               	skipnc
  7348  12FC  3001               	movlw	1
  7349  12FD  07B7               	addwf	___ftpack@arg+2,f
  7350  12FE  3001               	movlw	1
  7351  12FF                     u4195:	
  7352  12FF  1003               	clrc
  7353  1300  0CB7               	rrf	___ftpack@arg+2,f
  7354  1301  0CB6               	rrf	___ftpack@arg+1,f
  7355  1302  0CB5               	rrf	___ftpack@arg,f
  7356  1303  3EFF               	addlw	-1
  7357  1304  1D03               	skipz
  7358  1305  2AFF               	goto	u4195
  7359  1306                     l653:	
  7360  1306  30FF               	movlw	255
  7361  1307  0537               	andwf	___ftpack@arg+2,w
  7362  1308  1903               	btfsc	3,2
  7363  1309  2B15               	goto	l3657
  7364  130A  2AF0               	goto	l3649
  7365  130B                     l3655:	
  7366  130B  3001               	movlw	1
  7367  130C  02B8               	subwf	___ftpack@exp,f
  7368  130D  3001               	movlw	1
  7369  130E                     u4215:	
  7370  130E  1003               	clrc
  7371  130F  0DB5               	rlf	___ftpack@arg,f
  7372  1310  0DB6               	rlf	___ftpack@arg+1,f
  7373  1311  0DB7               	rlf	___ftpack@arg+2,f
  7374  1312  3EFF               	addlw	-1
  7375  1313  1D03               	skipz
  7376  1314  2B0E               	goto	u4215
  7377  1315                     l3657:	
  7378  1315  1BB6               	btfsc	___ftpack@arg+1,7
  7379  1316  2B1B               	goto	l660
  7380  1317  3002               	movlw	2
  7381  1318  0238               	subwf	___ftpack@exp,w
  7382  1319  1803               	skipnc
  7383  131A  2B0B               	goto	l3655
  7384  131B                     l660:	
  7385  131B  1838               	btfsc	___ftpack@exp,0
  7386  131C  2B23               	goto	l661
  7387  131D  30FF               	movlw	255
  7388  131E  05B5               	andwf	___ftpack@arg,f
  7389  131F  307F               	movlw	127
  7390  1320  05B6               	andwf	___ftpack@arg+1,f
  7391  1321  30FF               	movlw	255
  7392  1322  05B7               	andwf	___ftpack@arg+2,f
  7393  1323                     l661:	
  7394  1323  1003               	clrc
  7395  1324  0CB8               	rrf	___ftpack@exp,f
  7396  1325  0838               	movf	___ftpack@exp,w
  7397  1326  00BA               	movwf	??___ftpack
  7398  1327  01BB               	clrf	??___ftpack+1
  7399  1328  01BC               	clrf	??___ftpack+2
  7400  1329  3010               	movlw	16
  7401  132A                     u4255:	
  7402  132A  1003               	clrc
  7403  132B  0DBA               	rlf	??___ftpack,f
  7404  132C  0DBB               	rlf	??___ftpack+1,f
  7405  132D  0DBC               	rlf	??___ftpack+2,f
  7406  132E  3EFF               	addlw	-1
  7407  132F  1D03               	skipz
  7408  1330  2B2A               	goto	u4255
  7409  1331  083A               	movf	??___ftpack,w
  7410  1332  04B5               	iorwf	___ftpack@arg,f
  7411  1333  083B               	movf	??___ftpack+1,w
  7412  1334  04B6               	iorwf	___ftpack@arg+1,f
  7413  1335  083C               	movf	??___ftpack+2,w
  7414  1336  04B7               	iorwf	___ftpack@arg+2,f
  7415  1337  0839               	movf	___ftpack@sign,w
  7416  1338  1903               	btfsc	3,2
  7417  1339  0008               	return
  7418  133A  17B7               	bsf	___ftpack@arg+2,7
  7419  133B  0008               	return
  7420  133C                     __end_of___ftpack:	
  7421                           
  7422                           	psect	text25
  7423  126C                     __ptext25:	
  7424 ;; *************** function _acquire *****************
  7425 ;; Defined at:
  7426 ;;		line 384 in file "main.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;		None
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;  valueAD         2   10[BANK1 ] unsigned int 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7440 ;;      Params:         0       0       0       0       0
  7441 ;;      Locals:         0       0       2       0       0
  7442 ;;      Temps:          0       0       0       0       0
  7443 ;;      Totals:         0       0       2       0       0
  7444 ;;Total ram usage:        2 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    6
  7447 ;; This function calls:
  7448 ;;		_USARTDataAvailable
  7449 ;;		_USARTGotoNewLine
  7450 ;;		_USARTWriteString
  7451 ;;		_sampling
  7452 ;;		_sprintf
  7453 ;; This function is called by:
  7454 ;;		_choice
  7455 ;;		_step
  7456 ;;		_run
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           
  7461                           ;psect for function _acquire
  7462  126C                     _acquire:	
  7463                           
  7464                           ;main.c: 385: USARTGotoNewLine();
  7465                           
  7466                           ;incstack = 0
  7467 ;; hardware stack exceeded
  7468                           ; Regs used in _acquire: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7469  126C  160A  158A  2447  160A  118A  	fcall	_USARTGotoNewLine
  7470                           
  7471                           ;main.c: 386: acquirement = 1;
  7472  1271  1283               	bcf	3,5	;RP0=0, select bank0
  7473  1272  1303               	bcf	3,6	;RP1=0, select bank0
  7474  1273  01D8               	clrf	_acquirement
  7475  1274  0AD8               	incf	_acquirement,f
  7476  1275                     l3971:	
  7477                           ;main.c: 387: while(USARTDataAvailable() == 0 &&acquirement){
  7478                           
  7479  1275  160A  158A  2549  160A  118A  	fcall	_USARTDataAvailable
  7480  127A  3A00               	xorlw	0
  7481  127B  1D03               	skipz
  7482  127C  0008               	return
  7483  127D  1283               	bcf	3,5	;RP0=0, select bank0
  7484  127E  1303               	bcf	3,6	;RP1=0, select bank0
  7485  127F  0858               	movf	_acquirement,w
  7486  1280  1903               	btfsc	3,2
  7487  1281  0008               	return
  7488                           
  7489                           ;main.c: 388: unsigned int valueAD = sampling();
  7490  1282  160A  158A  2470  160A  118A  	fcall	_sampling
  7491  1287  1283               	bcf	3,5	;RP0=0, select bank0
  7492  1288  1303               	bcf	3,6	;RP1=0, select bank0
  7493  1289  0836               	movf	?_sampling+1,w
  7494  128A  1683               	bsf	3,5	;RP0=1, select bank1
  7495  128B  1303               	bcf	3,6	;RP1=0, select bank1
  7496  128C  00AB               	movwf	(acquire@valueAD+1)^(0+128)
  7497  128D  1283               	bcf	3,5	;RP0=0, select bank0
  7498  128E  1303               	bcf	3,6	;RP1=0, select bank0
  7499  128F  0835               	movf	?_sampling,w
  7500  1290  1683               	bsf	3,5	;RP0=1, select bank1
  7501  1291  1303               	bcf	3,6	;RP1=0, select bank1
  7502  1292  00AA               	movwf	acquire@valueAD^(0+128)
  7503                           
  7504                           ;main.c: 389: if(valueAD<=1023 && valueAD >= 0){
  7505  1293  3004               	movlw	4
  7506  1294  022B               	subwf	(acquire@valueAD+1)^(0+128),w
  7507  1295  3000               	movlw	0
  7508  1296  1903               	skipnz
  7509  1297  022A               	subwf	acquire@valueAD^(0+128),w
  7510  1298  1803               	skipnc
  7511  1299  2A75               	goto	l3971
  7512                           
  7513                           ;main.c: 390: USARTWriteString("The analog value is: ");
  7514  129A  309D               	movlw	low (STR_61| (0+32768))
  7515  129B  1283               	bcf	3,5	;RP0=0, select bank0
  7516  129C  1303               	bcf	3,6	;RP1=0, select bank0
  7517  129D  00B6               	movwf	USARTWriteString@str
  7518  129E  3084               	movlw	high (STR_61| (0+32768))
  7519  129F  00B7               	movwf	USARTWriteString@str+1
  7520  12A0  160A  158A  258F  160A  118A  	fcall	_USARTWriteString
  7521                           
  7522                           ;main.c: 391: sprintf(strBuffer,"%d",valueAD);
  7523  12A5  3051               	movlw	low (STR_52| (0+32768))
  7524  12A6  1283               	bcf	3,5	;RP0=0, select bank0
  7525  12A7  1303               	bcf	3,6	;RP1=0, select bank0
  7526  12A8  00C3               	movwf	sprintf@f
  7527  12A9  3086               	movlw	high (STR_52| (0+32768))
  7528  12AA  00C4               	movwf	sprintf@f+1
  7529  12AB  1683               	bsf	3,5	;RP0=1, select bank1
  7530  12AC  1303               	bcf	3,6	;RP1=0, select bank1
  7531  12AD  082B               	movf	(acquire@valueAD+1)^(0+128),w
  7532  12AE  1283               	bcf	3,5	;RP0=0, select bank0
  7533  12AF  1303               	bcf	3,6	;RP1=0, select bank0
  7534  12B0  00C6               	movwf	?_sprintf+3
  7535  12B1  1683               	bsf	3,5	;RP0=1, select bank1
  7536  12B2  1303               	bcf	3,6	;RP1=0, select bank1
  7537  12B3  082A               	movf	acquire@valueAD^(0+128),w
  7538  12B4  1283               	bcf	3,5	;RP0=0, select bank0
  7539  12B5  1303               	bcf	3,6	;RP1=0, select bank0
  7540  12B6  00C5               	movwf	?_sprintf+2
  7541  12B7  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  7542  12B8  160A  118A  26D6  160A  118A  	fcall	_sprintf
  7543                           
  7544                           ;main.c: 392: USARTWriteString(strBuffer);
  7545  12BD  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
  7546  12BE  1283               	bcf	3,5	;RP0=0, select bank0
  7547  12BF  1303               	bcf	3,6	;RP1=0, select bank0
  7548  12C0  00B6               	movwf	USARTWriteString@str
  7549  12C1  3001               	movlw	1
  7550  12C2  00B7               	movwf	USARTWriteString@str+1
  7551  12C3  160A  158A  258F  160A  118A  	fcall	_USARTWriteString
  7552                           
  7553                           ;main.c: 393: USARTGotoNewLine();
  7554  12C8  160A  158A  2447  160A  118A  	fcall	_USARTGotoNewLine
  7555  12CD  2A75               	goto	l3971
  7556  12CE                     __end_of_acquire:	
  7557                           
  7558                           	psect	text26
  7559  16D6                     __ptext26:	
  7560 ;; *************** function _sprintf *****************
  7561 ;; Defined at:
  7562 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;  sp              1    wreg     PTR unsigned char 
  7565 ;;		 -> strBuffer(25), 
  7566 ;;  f               2   35[BANK0 ] PTR const unsigned char 
  7567 ;;		 -> STR_70(3), STR_68(3), STR_66(3), STR_64(3), 
  7568 ;;		 -> STR_62(3), STR_59(3), STR_53(3), STR_52(3), 
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;  sp              1    8[BANK1 ] PTR unsigned char 
  7571 ;;		 -> strBuffer(25), 
  7572 ;;  tmpval          4    0        struct .
  7573 ;;  val             2    6[BANK1 ] unsigned int 
  7574 ;;  cp              2    0        PTR const unsigned char 
  7575 ;;  len             2    0        unsigned int 
  7576 ;;  c               1    9[BANK1 ] char 
  7577 ;;  prec            1    5[BANK1 ] char 
  7578 ;;  flag            1    4[BANK1 ] unsigned char 
  7579 ;;  ap              1    3[BANK1 ] PTR void [1]
  7580 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  2   35[BANK0 ] int 
  7583 ;; Registers used:
  7584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7590 ;;      Params:         0       6       0       0       0
  7591 ;;      Locals:         0       0       7       0       0
  7592 ;;      Temps:          0       0       3       0       0
  7593 ;;      Totals:         0       6      10       0       0
  7594 ;;Total ram usage:       16 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    5
  7597 ;; This function calls:
  7598 ;;		___lwdiv
  7599 ;;		___lwmod
  7600 ;; This function is called by:
  7601 ;;		_step
  7602 ;;		_status
  7603 ;;		_acquire
  7604 ;;		_adReadA0
  7605 ;;		_sys
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _sprintf
  7611  16D6                     _sprintf:	
  7612                           
  7613                           ;incstack = 0
  7614 ;; hardware stack exceeded
  7615                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7616                           ;sprintf@sp stored from wreg
  7617  16D6  1683               	bsf	3,5	;RP0=1, select bank1
  7618  16D7  1303               	bcf	3,6	;RP1=0, select bank1
  7619  16D8  00A8               	movwf	sprintf@sp^(0+128)
  7620                           
  7621                           ;doprnt.c: 494: va_list ap;
  7622                           ;doprnt.c: 499: signed char c;
  7623                           ;doprnt.c: 506: signed char prec;
  7624                           ;doprnt.c: 508: unsigned char flag;
  7625                           ;doprnt.c: 523: union {
  7626                           ;doprnt.c: 524: unsigned long vd;
  7627                           ;doprnt.c: 525: double integ;
  7628                           ;doprnt.c: 526: } tmpval;
  7629                           ;doprnt.c: 528: unsigned int val;
  7630                           ;doprnt.c: 529: unsigned len;
  7631                           ;doprnt.c: 530: const char * cp;
  7632                           ;doprnt.c: 533: *ap = __va_start();
  7633  16D9  3045               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7634  16DA  00A0               	movwf	??_sprintf^(0+128)
  7635  16DB  0820               	movf	??_sprintf^(0+128),w
  7636  16DC  00A3               	movwf	sprintf@ap^(0+128)
  7637  16DD                     l3927:	
  7638                           ;doprnt.c: 536: while(c = *f++) {
  7639                           
  7640  16DD  1283               	bcf	3,5	;RP0=0, select bank0
  7641  16DE  1303               	bcf	3,6	;RP1=0, select bank0
  7642  16DF  0844               	movf	sprintf@f+1,w
  7643  16E0  1683               	bsf	3,5	;RP0=1, select bank1
  7644  16E1  1303               	bcf	3,6	;RP1=0, select bank1
  7645  16E2  00A1               	movwf	(??_sprintf^(0+128)+1)
  7646  16E3  1283               	bcf	3,5	;RP0=0, select bank0
  7647  16E4  1303               	bcf	3,6	;RP1=0, select bank0
  7648  16E5  0843               	movf	sprintf@f,w
  7649  16E6  1683               	bsf	3,5	;RP0=1, select bank1
  7650  16E7  1303               	bcf	3,6	;RP1=0, select bank1
  7651  16E8  00A0               	movwf	??_sprintf^(0+128)
  7652  16E9  1283               	bcf	3,5	;RP0=0, select bank0
  7653  16EA  1303               	bcf	3,6	;RP1=0, select bank0
  7654  16EB  0AC3               	incf	sprintf@f,f
  7655  16EC  1903               	skipnz
  7656  16ED  0AC4               	incf	sprintf@f+1,f
  7657  16EE  1683               	bsf	3,5	;RP0=1, select bank1
  7658  16EF  1303               	bcf	3,6	;RP1=0, select bank1
  7659  16F0  0821               	movf	(??_sprintf+1)^(0+128),w
  7660  16F1  1283               	bcf	3,5	;RP0=0, select bank0
  7661  16F2  1303               	bcf	3,6	;RP1=0, select bank0
  7662  16F3  00FF               	movwf	127
  7663  16F4  1683               	bsf	3,5	;RP0=1, select bank1
  7664  16F5  1303               	bcf	3,6	;RP1=0, select bank1
  7665  16F6  0820               	movf	??_sprintf^(0+128),w
  7666  16F7  0084               	movwf	4
  7667  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  7668  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  7669  16FA  120A  118A  2100  160A  118A  	fcall	stringtab
  7670  16FF  1683               	bsf	3,5	;RP0=1, select bank1
  7671  1700  1303               	bcf	3,6	;RP1=0, select bank1
  7672  1701  00A2               	movwf	(??_sprintf+2)^(0+128)
  7673  1702  0822               	movf	(??_sprintf+2)^(0+128),w
  7674  1703  00A9               	movwf	sprintf@c^(0+128)
  7675  1704  0829               	movf	sprintf@c^(0+128),w
  7676  1705  1903               	btfsc	3,2
  7677  1706  2FFB               	goto	l3929
  7678                           
  7679                           ;doprnt.c: 538: if(c != '%')
  7680  1707  3025               	movlw	37
  7681  1708  0629               	xorwf	sprintf@c^(0+128),w
  7682  1709  1903               	btfsc	3,2
  7683  170A  2F17               	goto	l3883
  7684                           
  7685                           ;doprnt.c: 540: {
  7686                           ;doprnt.c: 541: ((*sp++ = (c)));
  7687  170B  0829               	movf	sprintf@c^(0+128),w
  7688  170C  00A0               	movwf	??_sprintf^(0+128)
  7689  170D  0828               	movf	sprintf@sp^(0+128),w
  7690  170E  0084               	movwf	4
  7691  170F  0820               	movf	??_sprintf^(0+128),w
  7692  1710  1783               	bsf	3,7	;select IRP bank2
  7693  1711  0080               	movwf	0
  7694  1712  3001               	movlw	1
  7695  1713  00A0               	movwf	??_sprintf^(0+128)
  7696  1714  0820               	movf	??_sprintf^(0+128),w
  7697  1715  07A8               	addwf	sprintf@sp^(0+128),f
  7698                           
  7699                           ;doprnt.c: 542: continue;
  7700  1716  2EDD               	goto	l3927
  7701  1717                     l3883:	
  7702                           
  7703                           ;doprnt.c: 543: }
  7704                           ;doprnt.c: 548: flag = 0;
  7705  1717  01A4               	clrf	sprintf@flag^(0+128)
  7706                           
  7707                           ;doprnt.c: 822: }
  7708                           
  7709                           ;doprnt.c: 813: continue;
  7710                           
  7711                           ;doprnt.c: 802: default:
  7712                           
  7713                           ;doprnt.c: 698: case 'i':
  7714                           ;doprnt.c: 699: break;
  7715                           
  7716                           ;doprnt.c: 697: case 'd':
  7717                           
  7718                           ;doprnt.c: 638: goto alldone;
  7719                           
  7720                           ;doprnt.c: 637: case 0:
  7721                           
  7722                           ;doprnt.c: 635: switch(c = *f++) {
  7723  1718  1283               	bcf	3,5	;RP0=0, select bank0
  7724  1719  1303               	bcf	3,6	;RP1=0, select bank0
  7725  171A  0844               	movf	sprintf@f+1,w
  7726  171B  1683               	bsf	3,5	;RP0=1, select bank1
  7727  171C  1303               	bcf	3,6	;RP1=0, select bank1
  7728  171D  00A1               	movwf	(??_sprintf^(0+128)+1)
  7729  171E  1283               	bcf	3,5	;RP0=0, select bank0
  7730  171F  1303               	bcf	3,6	;RP1=0, select bank0
  7731  1720  0843               	movf	sprintf@f,w
  7732  1721  1683               	bsf	3,5	;RP0=1, select bank1
  7733  1722  1303               	bcf	3,6	;RP1=0, select bank1
  7734  1723  00A0               	movwf	??_sprintf^(0+128)
  7735  1724  1283               	bcf	3,5	;RP0=0, select bank0
  7736  1725  1303               	bcf	3,6	;RP1=0, select bank0
  7737  1726  0AC3               	incf	sprintf@f,f
  7738  1727  1903               	skipnz
  7739  1728  0AC4               	incf	sprintf@f+1,f
  7740  1729  1683               	bsf	3,5	;RP0=1, select bank1
  7741  172A  1303               	bcf	3,6	;RP1=0, select bank1
  7742  172B  0821               	movf	(??_sprintf+1)^(0+128),w
  7743  172C  1283               	bcf	3,5	;RP0=0, select bank0
  7744  172D  1303               	bcf	3,6	;RP1=0, select bank0
  7745  172E  00FF               	movwf	127
  7746  172F  1683               	bsf	3,5	;RP0=1, select bank1
  7747  1730  1303               	bcf	3,6	;RP1=0, select bank1
  7748  1731  0820               	movf	??_sprintf^(0+128),w
  7749  1732  0084               	movwf	4
  7750  1733  1283               	bcf	3,5	;RP0=0, select bank0
  7751  1734  1303               	bcf	3,6	;RP1=0, select bank0
  7752  1735  120A  118A  2100  160A  118A  	fcall	stringtab
  7753  173A  1683               	bsf	3,5	;RP0=1, select bank1
  7754  173B  1303               	bcf	3,6	;RP1=0, select bank1
  7755  173C  00A9               	movwf	sprintf@c^(0+128)
  7756                           
  7757                           ; Switch size 1, requested type "space"
  7758                           ; Number of cases is 3, Range of values is 0 to 105
  7759                           ; switch strategies available:
  7760                           ; Name         Instructions Cycles
  7761                           ; simple_byte           10     6 (average)
  7762                           ; jumptable            260     6 (fixed)
  7763                           ;	Chosen strategy is simple_byte
  7764  173D  3A00               	xorlw	0	; case 0
  7765  173E  1903               	skipnz
  7766  173F  2FFB               	goto	l3929
  7767  1740  3A64               	xorlw	100	; case 100
  7768  1741  1903               	skipnz
  7769  1742  2F47               	goto	l3889
  7770  1743  3A0D               	xorlw	13	; case 105
  7771  1744  1903               	skipnz
  7772  1745  2F47               	goto	l3889
  7773  1746  2EDD               	goto	l3927
  7774  1747                     l3889:	
  7775                           
  7776                           ;doprnt.c: 1253: {
  7777                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7778  1747  0823               	movf	sprintf@ap^(0+128),w
  7779  1748  0084               	movwf	4
  7780  1749  1383               	bcf	3,7	;select IRP bank0
  7781  174A  0800               	movf	0,w
  7782  174B  00A6               	movwf	sprintf@val^(0+128)
  7783  174C  0A84               	incf	4,f
  7784  174D  0800               	movf	0,w
  7785  174E  00A7               	movwf	(sprintf@val+1)^(0+128)
  7786  174F  3002               	movlw	2
  7787  1750  00A0               	movwf	??_sprintf^(0+128)
  7788  1751  0820               	movf	??_sprintf^(0+128),w
  7789  1752  07A3               	addwf	sprintf@ap^(0+128),f
  7790                           
  7791                           ;doprnt.c: 1261: if((int)val < 0) {
  7792  1753  1FA7               	btfss	(sprintf@val+1)^(0+128),7
  7793  1754  2F5E               	goto	l3899
  7794                           
  7795                           ;doprnt.c: 1262: flag |= 0x03;
  7796  1755  3003               	movlw	3
  7797  1756  00A0               	movwf	??_sprintf^(0+128)
  7798  1757  0820               	movf	??_sprintf^(0+128),w
  7799  1758  04A4               	iorwf	sprintf@flag^(0+128),f
  7800                           
  7801                           ;doprnt.c: 1263: val = -val;
  7802  1759  09A6               	comf	sprintf@val^(0+128),f
  7803  175A  09A7               	comf	(sprintf@val+1)^(0+128),f
  7804  175B  0AA6               	incf	sprintf@val^(0+128),f
  7805  175C  1903               	skipnz
  7806  175D  0AA7               	incf	(sprintf@val+1)^(0+128),f
  7807  175E                     l3899:	
  7808                           
  7809                           ;doprnt.c: 1264: }
  7810                           ;doprnt.c: 1266: }
  7811                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7812  175E  01A9               	clrf	sprintf@c^(0+128)
  7813  175F  0AA9               	incf	sprintf@c^(0+128),f
  7814  1760  3005               	movlw	5
  7815  1761  0629               	xorwf	sprintf@c^(0+128),w
  7816  1762  1903               	btfsc	3,2
  7817  1763  2F91               	goto	l3911
  7818  1764                     l3905:	
  7819                           
  7820                           ;doprnt.c: 1306: if(val < dpowers[c])
  7821  1764  0829               	movf	sprintf@c^(0+128),w
  7822  1765  00A0               	movwf	??_sprintf^(0+128)
  7823  1766  0720               	addwf	??_sprintf^(0+128),w
  7824  1767  3E12               	addlw	low (_dpowers| (0+32768))
  7825  1768  0084               	movwf	4
  7826  1769  3081               	movlw	high (_dpowers| (0+32768))
  7827  176A  1803               	skipnc
  7828  176B  3E01               	addlw	1
  7829  176C  1283               	bcf	3,5	;RP0=0, select bank0
  7830  176D  1303               	bcf	3,6	;RP1=0, select bank0
  7831  176E  00FF               	movwf	127
  7832  176F  120A  118A  2100  160A  118A  	fcall	stringtab
  7833  1774  1683               	bsf	3,5	;RP0=1, select bank1
  7834  1775  1303               	bcf	3,6	;RP1=0, select bank1
  7835  1776  00A1               	movwf	(??_sprintf+1)^(0+128)
  7836  1777  1283               	bcf	3,5	;RP0=0, select bank0
  7837  1778  1303               	bcf	3,6	;RP1=0, select bank0
  7838  1779  120A  118A  2100  160A  118A  	fcall	stringtab
  7839  177E  1683               	bsf	3,5	;RP0=1, select bank1
  7840  177F  1303               	bcf	3,6	;RP1=0, select bank1
  7841  1780  00A2               	movwf	((??_sprintf+1)^(0+128)+1)
  7842  1781  0822               	movf	(??_sprintf+2)^(0+128),w
  7843  1782  0227               	subwf	(sprintf@val+1)^(0+128),w
  7844  1783  1D03               	skipz
  7845  1784  2F87               	goto	u4735
  7846  1785  0821               	movf	(??_sprintf+1)^(0+128),w
  7847  1786  0226               	subwf	sprintf@val^(0+128),w
  7848  1787                     u4735:	
  7849  1787  1C03               	btfss	3,0
  7850  1788  2F91               	goto	l3911
  7851                           
  7852                           ;doprnt.c: 1307: break;
  7853  1789  3001               	movlw	1
  7854  178A  00A0               	movwf	??_sprintf^(0+128)
  7855  178B  0820               	movf	??_sprintf^(0+128),w
  7856  178C  07A9               	addwf	sprintf@c^(0+128),f
  7857  178D  3005               	movlw	5
  7858  178E  0629               	xorwf	sprintf@c^(0+128),w
  7859  178F  1D03               	btfss	3,2
  7860  1790  2F64               	goto	l3905
  7861  1791                     l3911:	
  7862                           
  7863                           ;doprnt.c: 1422: {
  7864                           ;doprnt.c: 1438: if(flag & 0x03)
  7865  1791  0824               	movf	sprintf@flag^(0+128),w
  7866  1792  3903               	andlw	3
  7867  1793  1903               	btfsc	3,2
  7868  1794  2FA0               	goto	l3917
  7869                           
  7870                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7871  1795  302D               	movlw	45
  7872  1796  00A0               	movwf	??_sprintf^(0+128)
  7873  1797  0828               	movf	sprintf@sp^(0+128),w
  7874  1798  0084               	movwf	4
  7875  1799  0820               	movf	??_sprintf^(0+128),w
  7876  179A  1783               	bsf	3,7	;select IRP bank2
  7877  179B  0080               	movwf	0
  7878  179C  3001               	movlw	1
  7879  179D  00A0               	movwf	??_sprintf^(0+128)
  7880  179E  0820               	movf	??_sprintf^(0+128),w
  7881  179F  07A8               	addwf	sprintf@sp^(0+128),f
  7882  17A0                     l3917:	
  7883                           
  7884                           ;doprnt.c: 1469: }
  7885                           ;doprnt.c: 1472: prec = c;
  7886  17A0  0829               	movf	sprintf@c^(0+128),w
  7887  17A1  00A0               	movwf	??_sprintf^(0+128)
  7888  17A2  0820               	movf	??_sprintf^(0+128),w
  7889  17A3  00A5               	movwf	sprintf@prec^(0+128)
  7890  17A4                     l3925:	
  7891                           ;doprnt.c: 1474: while(prec--) {
  7892                           
  7893  17A4  30FF               	movlw	255
  7894  17A5  00A0               	movwf	??_sprintf^(0+128)
  7895  17A6  0820               	movf	??_sprintf^(0+128),w
  7896  17A7  07A5               	addwf	sprintf@prec^(0+128),f
  7897  17A8  0A25               	incf	sprintf@prec^(0+128),w
  7898  17A9  1903               	btfsc	3,2
  7899  17AA  2EDD               	goto	l3927
  7900                           
  7901                           ;doprnt.c: 1478: {
  7902                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7903  17AB  300A               	movlw	10
  7904  17AC  1283               	bcf	3,5	;RP0=0, select bank0
  7905  17AD  1303               	bcf	3,6	;RP1=0, select bank0
  7906  17AE  00BD               	movwf	___lwmod@divisor
  7907  17AF  3000               	movlw	0
  7908  17B0  00BE               	movwf	___lwmod@divisor+1
  7909  17B1  1683               	bsf	3,5	;RP0=1, select bank1
  7910  17B2  1303               	bcf	3,6	;RP1=0, select bank1
  7911  17B3  0825               	movf	sprintf@prec^(0+128),w
  7912  17B4  00A0               	movwf	??_sprintf^(0+128)
  7913  17B5  0720               	addwf	??_sprintf^(0+128),w
  7914  17B6  3E12               	addlw	low (_dpowers| (0+32768))
  7915  17B7  0084               	movwf	4
  7916  17B8  3081               	movlw	high (_dpowers| (0+32768))
  7917  17B9  1803               	skipnc
  7918  17BA  3E01               	addlw	1
  7919  17BB  1283               	bcf	3,5	;RP0=0, select bank0
  7920  17BC  1303               	bcf	3,6	;RP1=0, select bank0
  7921  17BD  00FF               	movwf	127
  7922  17BE  120A  118A  2100  160A  118A  	fcall	stringtab
  7923  17C3  00B5               	movwf	___lwdiv@divisor
  7924  17C4  120A  118A  2100  160A  118A  	fcall	stringtab
  7925  17C9  00B6               	movwf	___lwdiv@divisor+1
  7926  17CA  1683               	bsf	3,5	;RP0=1, select bank1
  7927  17CB  1303               	bcf	3,6	;RP1=0, select bank1
  7928  17CC  0827               	movf	(sprintf@val+1)^(0+128),w
  7929  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  7930  17CE  1303               	bcf	3,6	;RP1=0, select bank0
  7931  17CF  00B8               	movwf	___lwdiv@dividend+1
  7932  17D0  1683               	bsf	3,5	;RP0=1, select bank1
  7933  17D1  1303               	bcf	3,6	;RP1=0, select bank1
  7934  17D2  0826               	movf	sprintf@val^(0+128),w
  7935  17D3  1283               	bcf	3,5	;RP0=0, select bank0
  7936  17D4  1303               	bcf	3,6	;RP1=0, select bank0
  7937  17D5  00B7               	movwf	___lwdiv@dividend
  7938  17D6  160A  158A  2742  160A  118A  	fcall	___lwdiv
  7939  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  7940  17DC  1303               	bcf	3,6	;RP1=0, select bank0
  7941  17DD  0836               	movf	?___lwdiv+1,w
  7942  17DE  00C0               	movwf	___lwmod@dividend+1
  7943  17DF  0835               	movf	?___lwdiv,w
  7944  17E0  00BF               	movwf	___lwmod@dividend
  7945  17E1  160A  158A  269B  160A  118A  	fcall	___lwmod
  7946  17E6  1283               	bcf	3,5	;RP0=0, select bank0
  7947  17E7  1303               	bcf	3,6	;RP1=0, select bank0
  7948  17E8  083D               	movf	?___lwmod,w
  7949  17E9  3E30               	addlw	48
  7950  17EA  1683               	bsf	3,5	;RP0=1, select bank1
  7951  17EB  1303               	bcf	3,6	;RP1=0, select bank1
  7952  17EC  00A1               	movwf	(??_sprintf+1)^(0+128)
  7953  17ED  0821               	movf	(??_sprintf+1)^(0+128),w
  7954  17EE  00A9               	movwf	sprintf@c^(0+128)
  7955                           
  7956                           ;doprnt.c: 1523: }
  7957                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7958  17EF  0829               	movf	sprintf@c^(0+128),w
  7959  17F0  00A0               	movwf	??_sprintf^(0+128)
  7960  17F1  0828               	movf	sprintf@sp^(0+128),w
  7961  17F2  0084               	movwf	4
  7962  17F3  0820               	movf	??_sprintf^(0+128),w
  7963  17F4  1783               	bsf	3,7	;select IRP bank2
  7964  17F5  0080               	movwf	0
  7965  17F6  3001               	movlw	1
  7966  17F7  00A0               	movwf	??_sprintf^(0+128)
  7967  17F8  0820               	movf	??_sprintf^(0+128),w
  7968  17F9  07A8               	addwf	sprintf@sp^(0+128),f
  7969  17FA  2FA4               	goto	l3925
  7970  17FB                     l3929:	
  7971                           ;doprnt.c: 1525: }
  7972                           ;doprnt.c: 1533: }
  7973                           ;doprnt.c: 1535: alldone:
  7974                           
  7975                           
  7976                           ;doprnt.c: 1538: *sp = 0;
  7977  17FB  0828               	movf	sprintf@sp^(0+128),w
  7978  17FC  0084               	movwf	4
  7979  17FD  1783               	bsf	3,7	;select IRP bank2
  7980  17FE  0180               	clrf	0
  7981  17FF  0008               	return
  7982  1800                     __end_of_sprintf:	
  7983                           ;doprnt.c: 1540: return 0;
  7984                           ;	Return value of _sprintf is never used
  7985                           
  7986                           
  7987                           	psect	text27
  7988  1E9B                     __ptext27:	
  7989 ;; *************** function ___lwmod *****************
  7990 ;; Defined at:
  7991 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  divisor         2   29[BANK0 ] unsigned int 
  7994 ;;  dividend        2   31[BANK0 ] unsigned int 
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  counter         1   34[BANK0 ] unsigned char 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  2   29[BANK0 ] unsigned int 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2, status,0
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8006 ;;      Params:         0       4       0       0       0
  8007 ;;      Locals:         0       1       0       0       0
  8008 ;;      Temps:          0       1       0       0       0
  8009 ;;      Totals:         0       6       0       0       0
  8010 ;;Total ram usage:        6 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    4
  8013 ;; This function calls:
  8014 ;;		Nothing
  8015 ;; This function is called by:
  8016 ;;		_sprintf
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function ___lwmod
  8022  1E9B                     ___lwmod:	
  8023                           
  8024                           ;incstack = 0
  8025 ;; hardware stack exceeded
  8026                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8027  1E9B  1283               	bcf	3,5	;RP0=0, select bank0
  8028  1E9C  1303               	bcf	3,6	;RP1=0, select bank0
  8029  1E9D  083D               	movf	___lwmod@divisor,w
  8030  1E9E  043E               	iorwf	___lwmod@divisor+1,w
  8031  1E9F  1903               	btfsc	3,2
  8032  1EA0  2ECA               	goto	l3821
  8033  1EA1  01C2               	clrf	___lwmod@counter
  8034  1EA2  0AC2               	incf	___lwmod@counter,f
  8035  1EA3                     l3811:	
  8036  1EA3  1BBE               	btfsc	___lwmod@divisor+1,7
  8037  1EA4  2EB1               	goto	l3813
  8038  1EA5  3001               	movlw	1
  8039  1EA6                     u4615:	
  8040  1EA6  1003               	clrc
  8041  1EA7  0DBD               	rlf	___lwmod@divisor,f
  8042  1EA8  0DBE               	rlf	___lwmod@divisor+1,f
  8043  1EA9  3EFF               	addlw	-1
  8044  1EAA  1D03               	skipz
  8045  1EAB  2EA6               	goto	u4615
  8046  1EAC  3001               	movlw	1
  8047  1EAD  00C1               	movwf	??___lwmod
  8048  1EAE  0841               	movf	??___lwmod,w
  8049  1EAF  07C2               	addwf	___lwmod@counter,f
  8050  1EB0  2EA3               	goto	l3811
  8051  1EB1                     l3813:	
  8052  1EB1  083E               	movf	___lwmod@divisor+1,w
  8053  1EB2  0240               	subwf	___lwmod@dividend+1,w
  8054  1EB3  1D03               	skipz
  8055  1EB4  2EB7               	goto	u4635
  8056  1EB5  083D               	movf	___lwmod@divisor,w
  8057  1EB6  023F               	subwf	___lwmod@dividend,w
  8058  1EB7                     u4635:	
  8059  1EB7  1C03               	skipc
  8060  1EB8  2EBF               	goto	l3817
  8061  1EB9  083D               	movf	___lwmod@divisor,w
  8062  1EBA  02BF               	subwf	___lwmod@dividend,f
  8063  1EBB  083E               	movf	___lwmod@divisor+1,w
  8064  1EBC  1C03               	skipc
  8065  1EBD  03C0               	decf	___lwmod@dividend+1,f
  8066  1EBE  02C0               	subwf	___lwmod@dividend+1,f
  8067  1EBF                     l3817:	
  8068  1EBF  3001               	movlw	1
  8069  1EC0                     u4645:	
  8070  1EC0  1003               	clrc
  8071  1EC1  0CBE               	rrf	___lwmod@divisor+1,f
  8072  1EC2  0CBD               	rrf	___lwmod@divisor,f
  8073  1EC3  3EFF               	addlw	-1
  8074  1EC4  1D03               	skipz
  8075  1EC5  2EC0               	goto	u4645
  8076  1EC6  3001               	movlw	1
  8077  1EC7  02C2               	subwf	___lwmod@counter,f
  8078  1EC8  1D03               	btfss	3,2
  8079  1EC9  2EB1               	goto	l3813
  8080  1ECA                     l3821:	
  8081  1ECA  0840               	movf	___lwmod@dividend+1,w
  8082  1ECB  00BE               	movwf	?___lwmod+1
  8083  1ECC  083F               	movf	___lwmod@dividend,w
  8084  1ECD  00BD               	movwf	?___lwmod
  8085  1ECE  0008               	return
  8086  1ECF                     __end_of___lwmod:	
  8087                           
  8088                           	psect	text28
  8089  1F42                     __ptext28:	
  8090 ;; *************** function ___lwdiv *****************
  8091 ;; Defined at:
  8092 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  divisor         2   21[BANK0 ] unsigned int 
  8095 ;;  dividend        2   23[BANK0 ] unsigned int 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  quotient        2   27[BANK0 ] unsigned int 
  8098 ;;  counter         1   26[BANK0 ] unsigned char 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  2   21[BANK0 ] unsigned int 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8108 ;;      Params:         0       4       0       0       0
  8109 ;;      Locals:         0       3       0       0       0
  8110 ;;      Temps:          0       1       0       0       0
  8111 ;;      Totals:         0       8       0       0       0
  8112 ;;Total ram usage:        8 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    4
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_sprintf
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function ___lwdiv
  8124  1F42                     ___lwdiv:	
  8125                           
  8126                           ;incstack = 0
  8127 ;; hardware stack exceeded
  8128                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8129  1F42  1283               	bcf	3,5	;RP0=0, select bank0
  8130  1F43  1303               	bcf	3,6	;RP1=0, select bank0
  8131  1F44  01BB               	clrf	___lwdiv@quotient
  8132  1F45  01BC               	clrf	___lwdiv@quotient+1
  8133  1F46  0835               	movf	___lwdiv@divisor,w
  8134  1F47  0436               	iorwf	___lwdiv@divisor+1,w
  8135  1F48  1903               	btfsc	3,2
  8136  1F49  2F7B               	goto	l3799
  8137  1F4A  01BA               	clrf	___lwdiv@counter
  8138  1F4B  0ABA               	incf	___lwdiv@counter,f
  8139  1F4C                     l3787:	
  8140  1F4C  1BB6               	btfsc	___lwdiv@divisor+1,7
  8141  1F4D  2F5A               	goto	l3789
  8142  1F4E  3001               	movlw	1
  8143  1F4F                     u4545:	
  8144  1F4F  1003               	clrc
  8145  1F50  0DB5               	rlf	___lwdiv@divisor,f
  8146  1F51  0DB6               	rlf	___lwdiv@divisor+1,f
  8147  1F52  3EFF               	addlw	-1
  8148  1F53  1D03               	skipz
  8149  1F54  2F4F               	goto	u4545
  8150  1F55  3001               	movlw	1
  8151  1F56  00B9               	movwf	??___lwdiv
  8152  1F57  0839               	movf	??___lwdiv,w
  8153  1F58  07BA               	addwf	___lwdiv@counter,f
  8154  1F59  2F4C               	goto	l3787
  8155  1F5A                     l3789:	
  8156  1F5A  3001               	movlw	1
  8157  1F5B                     u4565:	
  8158  1F5B  1003               	clrc
  8159  1F5C  0DBB               	rlf	___lwdiv@quotient,f
  8160  1F5D  0DBC               	rlf	___lwdiv@quotient+1,f
  8161  1F5E  3EFF               	addlw	-1
  8162  1F5F  1D03               	skipz
  8163  1F60  2F5B               	goto	u4565
  8164  1F61  0836               	movf	___lwdiv@divisor+1,w
  8165  1F62  0238               	subwf	___lwdiv@dividend+1,w
  8166  1F63  1D03               	skipz
  8167  1F64  2F67               	goto	u4575
  8168  1F65  0835               	movf	___lwdiv@divisor,w
  8169  1F66  0237               	subwf	___lwdiv@dividend,w
  8170  1F67                     u4575:	
  8171  1F67  1C03               	skipc
  8172  1F68  2F70               	goto	l3795
  8173  1F69  0835               	movf	___lwdiv@divisor,w
  8174  1F6A  02B7               	subwf	___lwdiv@dividend,f
  8175  1F6B  0836               	movf	___lwdiv@divisor+1,w
  8176  1F6C  1C03               	skipc
  8177  1F6D  03B8               	decf	___lwdiv@dividend+1,f
  8178  1F6E  02B8               	subwf	___lwdiv@dividend+1,f
  8179  1F6F  143B               	bsf	___lwdiv@quotient,0
  8180  1F70                     l3795:	
  8181  1F70  3001               	movlw	1
  8182  1F71                     u4585:	
  8183  1F71  1003               	clrc
  8184  1F72  0CB6               	rrf	___lwdiv@divisor+1,f
  8185  1F73  0CB5               	rrf	___lwdiv@divisor,f
  8186  1F74  3EFF               	addlw	-1
  8187  1F75  1D03               	skipz
  8188  1F76  2F71               	goto	u4585
  8189  1F77  3001               	movlw	1
  8190  1F78  02BA               	subwf	___lwdiv@counter,f
  8191  1F79  1D03               	btfss	3,2
  8192  1F7A  2F5A               	goto	l3789
  8193  1F7B                     l3799:	
  8194  1F7B  083C               	movf	___lwdiv@quotient+1,w
  8195  1F7C  00B6               	movwf	?___lwdiv+1
  8196  1F7D  083B               	movf	___lwdiv@quotient,w
  8197  1F7E  00B5               	movwf	?___lwdiv
  8198  1F7F  0008               	return
  8199  1F80                     __end_of___lwdiv:	
  8200                           
  8201                           	psect	text29
  8202  1C70                     __ptext29:	
  8203 ;; *************** function _sampling *****************
  8204 ;; Defined at:
  8205 ;;		line 377 in file "main.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;		None
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;		None
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  2   21[BANK0 ] unsigned int 
  8212 ;; Registers used:
  8213 ;;		wreg
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8219 ;;      Params:         0       2       0       0       0
  8220 ;;      Locals:         0       0       0       0       0
  8221 ;;      Temps:          0       1       0       0       0
  8222 ;;      Totals:         0       3       0       0       0
  8223 ;;Total ram usage:        3 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    4
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		_acquire
  8230 ;;		_adReadA0
  8231 ;;		_sys
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           
  8236                           ;psect for function _sampling
  8237  1C70                     _sampling:	
  8238                           
  8239                           ;main.c: 378: _delay((unsigned long)((100)*(20000000/4000000.0)));
  8240                           
  8241                           ;incstack = 0
  8242                           ; Regs used in _sampling: [wreg]
  8243  1C70  30A5               	movlw	165
  8244  1C71  1283               	bcf	3,5	;RP0=0, select bank0
  8245  1C72  1303               	bcf	3,6	;RP1=0, select bank0
  8246  1C73  00B7               	movwf	??_sampling
  8247  1C74                     u5807:	
  8248  1C74  0BB7               	decfsz	??_sampling,f
  8249  1C75  2C74               	goto	u5807
  8250  1C76  2C77               	nop2
  8251                           
  8252                           ;main.c: 379: ADCON0bits.GO_nDONE = 1;
  8253  1C77  1283               	bcf	3,5	;RP0=0, select bank0
  8254  1C78  1303               	bcf	3,6	;RP1=0, select bank0
  8255  1C79  151F               	bsf	31,2	;volatile
  8256  1C7A                     l340:	
  8257                           ;main.c: 380: while(ADCON0bits.GO_nDONE){}
  8258                           
  8259  1C7A  191F               	btfsc	31,2	;volatile
  8260  1C7B  2C7A               	goto	l340
  8261                           
  8262                           ;main.c: 381: return (int)(ADRESH << 8) + (ADRESL);
  8263  1C7C  081E               	movf	30,w	;volatile
  8264  1C7D  00B6               	movwf	?_sampling+1
  8265  1C7E  1683               	bsf	3,5	;RP0=1, select bank1
  8266  1C7F  1303               	bcf	3,6	;RP1=0, select bank1
  8267  1C80  081E               	movf	30,w	;volatile
  8268  1C81  1283               	bcf	3,5	;RP0=0, select bank0
  8269  1C82  1303               	bcf	3,6	;RP1=0, select bank0
  8270  1C83  00B5               	movwf	?_sampling
  8271  1C84  0008               	return
  8272  1C85                     __end_of_sampling:	
  8273                           
  8274                           	psect	text30
  8275  1D49                     __ptext30:	
  8276 ;; *************** function _USARTDataAvailable *****************
  8277 ;; Defined at:
  8278 ;;		line 151 in file "usart_pic16.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      unsigned char 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8292 ;;      Params:         0       0       0       0       0
  8293 ;;      Locals:         0       0       0       0       0
  8294 ;;      Temps:          0       1       0       0       0
  8295 ;;      Totals:         0       1       0       0       0
  8296 ;;Total ram usage:        1 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    4
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_getData
  8303 ;;		_acquire
  8304 ;;		_sys
  8305 ;;		_USARTFlushBuffer
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _USARTDataAvailable
  8311  1D49                     _USARTDataAvailable:	
  8312                           
  8313                           ;usart_pic16.c: 153: if(UQFront==-1) return 0;
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
  8317  1D49  1283               	bcf	3,5	;RP0=0, select bank0
  8318  1D4A  1303               	bcf	3,6	;RP1=0, select bank0
  8319  1D4B  0A5A               	incf	_UQFront,w	;volatile
  8320  1D4C  1D03               	btfss	3,2
  8321  1D4D  2D50               	goto	l3839
  8322  1D4E  3000               	movlw	0
  8323  1D4F  0008               	return
  8324  1D50                     l3839:	
  8325                           
  8326                           ;usart_pic16.c: 154: if(UQFront<UQEnd)
  8327  1D50  085A               	movf	_UQFront,w	;volatile
  8328  1D51  3A80               	xorlw	128
  8329  1D52  00B5               	movwf	??_USARTDataAvailable
  8330  1D53  0859               	movf	_UQEnd,w	;volatile
  8331  1D54  3A80               	xorlw	128
  8332  1D55  02B5               	subwf	??_USARTDataAvailable,f
  8333  1D56  1803               	skipnc
  8334  1D57  2D5D               	goto	l3847
  8335                           
  8336                           ;usart_pic16.c: 155: return(UQEnd-UQFront+1);
  8337  1D58  035A               	decf	_UQFront,w	;volatile
  8338  1D59  3AFF               	xorlw	255
  8339  1D5A  0759               	addwf	_UQEnd,w	;volatile
  8340  1D5B  3E01               	addlw	1
  8341  1D5C  0008               	return
  8342  1D5D                     l3847:	
  8343                           
  8344                           ;usart_pic16.c: 156: else if(UQFront>UQEnd)
  8345  1D5D  0859               	movf	_UQEnd,w	;volatile
  8346  1D5E  3A80               	xorlw	128
  8347  1D5F  00B5               	movwf	??_USARTDataAvailable
  8348  1D60  085A               	movf	_UQFront,w	;volatile
  8349  1D61  3A80               	xorlw	128
  8350  1D62  02B5               	subwf	??_USARTDataAvailable,f
  8351  1D63  1803               	skipnc
  8352  1D64  2D6A               	goto	l3855
  8353                           
  8354                           ;usart_pic16.c: 157: return (64-UQFront+UQEnd+1);
  8355  1D65  035A               	decf	_UQFront,w	;volatile
  8356  1D66  3AFF               	xorlw	255
  8357  1D67  0759               	addwf	_UQEnd,w	;volatile
  8358  1D68  3E41               	addlw	65
  8359  1D69  0008               	return
  8360  1D6A                     l3855:	
  8361                           
  8362                           ;usart_pic16.c: 158: else
  8363                           ;usart_pic16.c: 159: return 1;
  8364  1D6A  3001               	movlw	1
  8365  1D6B  0008               	return
  8366  1D6C                     __end_of_USARTDataAvailable:	
  8367                           
  8368                           	psect	text31
  8369  1024                     __ptext31:	
  8370 ;; *************** function _memcmp *****************
  8371 ;; Defined at:
  8372 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcmp.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  s1              1    wreg     PTR const void 
  8375 ;;		 -> content(25), 
  8376 ;;  s2              2   21[BANK0 ] PTR const void 
  8377 ;;		 -> STR_49(7), STR_48(10), STR_47(9), STR_46(7), 
  8378 ;;		 -> STR_43(5), STR_40(5), STR_36(6), 
  8379 ;;  n               2   23[BANK0 ] unsigned int 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  s1              1   27[BANK0 ] PTR const void 
  8382 ;;		 -> content(25), 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  2   21[BANK0 ] int 
  8385 ;; Registers used:
  8386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8392 ;;      Params:         0       4       0       0       0
  8393 ;;      Locals:         0       1       0       0       0
  8394 ;;      Temps:          0       2       0       0       0
  8395 ;;      Totals:         0       7       0       0       0
  8396 ;;Total ram usage:        7 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    4
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_choice
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _memcmp
  8408  1024                     _memcmp:	
  8409                           
  8410                           ;incstack = 0
  8411                           ; Regs used in _memcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  8412                           ;memcmp@s1 stored from wreg
  8413  1024  1283               	bcf	3,5	;RP0=0, select bank0
  8414  1025  1303               	bcf	3,6	;RP1=0, select bank0
  8415  1026  00BB               	movwf	memcmp@s1
  8416  1027                     l854:	
  8417  1027  3001               	movlw	1
  8418  1028  02B7               	subwf	memcmp@n,f
  8419  1029  3000               	movlw	0
  8420  102A  1C03               	skipc
  8421  102B  03B8               	decf	memcmp@n+1,f
  8422  102C  02B8               	subwf	memcmp@n+1,f
  8423  102D  0A37               	incf	memcmp@n,w
  8424  102E  1903               	btfsc	3,2
  8425  102F  0A38               	incf	memcmp@n+1,w
  8426  1030  1903               	btfsc	3,2
  8427  1031  2865               	goto	l4207
  8428  1032  0836               	movf	memcmp@s2+1,w
  8429  1033  00FF               	movwf	127
  8430  1034  0835               	movf	memcmp@s2,w
  8431  1035  0084               	movwf	4
  8432  1036  120A  118A  2100  160A  118A  	fcall	stringtab
  8433  103B  00B9               	movwf	??_memcmp
  8434  103C  083B               	movf	memcmp@s1,w
  8435  103D  0084               	movwf	4
  8436  103E  1383               	bcf	3,7	;select IRP bank0
  8437  103F  0800               	movf	0,w
  8438  1040  0639               	xorwf	??_memcmp,w
  8439  1041  1903               	skipnz
  8440  1042  285C               	goto	l4203
  8441  1043  0836               	movf	memcmp@s2+1,w
  8442  1044  00FF               	movwf	127
  8443  1045  0835               	movf	memcmp@s2,w
  8444  1046  0084               	movwf	4
  8445  1047  120A  118A  2100   	fcall	stringtab
  8446  104A  00B9               	movwf	??_memcmp
  8447  104B  01BA               	clrf	??_memcmp+1
  8448  104C  09B9               	comf	??_memcmp,f
  8449  104D  09BA               	comf	??_memcmp+1,f
  8450  104E  0AB9               	incf	??_memcmp,f
  8451  104F  1903               	skipnz
  8452  1050  0ABA               	incf	??_memcmp+1,f
  8453  1051  083B               	movf	memcmp@s1,w
  8454  1052  0084               	movwf	4
  8455  1053  1383               	bcf	3,7	;select IRP bank0
  8456  1054  0800               	movf	0,w
  8457  1055  0739               	addwf	??_memcmp,w
  8458  1056  00B5               	movwf	?_memcmp
  8459  1057  083A               	movf	??_memcmp+1,w
  8460  1058  1803               	skipnc
  8461  1059  0A3A               	incf	??_memcmp+1,w
  8462  105A  00B6               	movwf	?_memcmp+1
  8463  105B  0008               	return
  8464  105C                     l4203:	
  8465  105C  3001               	movlw	1
  8466  105D  00B9               	movwf	??_memcmp
  8467  105E  0839               	movf	??_memcmp,w
  8468  105F  07BB               	addwf	memcmp@s1,f
  8469  1060  3001               	movlw	1
  8470  1061  07B5               	addwf	memcmp@s2,f
  8471  1062  1803               	skipnc
  8472  1063  0AB6               	incf	memcmp@s2+1,f
  8473  1064  2827               	goto	l854
  8474  1065                     l4207:	
  8475  1065  01B5               	clrf	?_memcmp
  8476  1066  01B6               	clrf	?_memcmp+1
  8477  1067  0008               	return
  8478  1068                     __end_of_memcmp:	
  8479                           
  8480                           	psect	text32
  8481  0A32                     __ptext32:	
  8482 ;; *************** function _help *****************
  8483 ;; Defined at:
  8484 ;;		line 147 in file "main.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;		None
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;		None
  8489 ;; Return value:  Size  Location     Type
  8490 ;;                  1    wreg      void 
  8491 ;; Registers used:
  8492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8498 ;;      Params:         0       0       0       0       0
  8499 ;;      Locals:         0       0       0       0       0
  8500 ;;      Temps:          0       0       0       0       0
  8501 ;;      Totals:         0       0       0       0       0
  8502 ;;Total ram usage:        0 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; Hardware stack levels required when called:    7
  8505 ;; This function calls:
  8506 ;;		_USARTGotoNewLine
  8507 ;;		_USARTWriteLine
  8508 ;; This function is called by:
  8509 ;;		_main
  8510 ;;		_choice
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           
  8515                           ;psect for function _help
  8516  0A32                     _help:	
  8517                           
  8518                           ;main.c: 149: USARTWriteLine("**********************************************************
      +                          **********************************");
  8519                           
  8520                           ;incstack = 0
  8521                           ; Regs used in _help: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8522  0A32  301D               	movlw	low ((STR_35+1)| (0+32768))
  8523  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  8524  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  8525  0A35  00B8               	movwf	USARTWriteLine@str
  8526  0A36  3081               	movlw	high ((STR_35+1)| (0+32768))
  8527  0A37  00B9               	movwf	USARTWriteLine@str+1
  8528  0A38  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8529                           
  8530                           ;main.c: 150: USARTWriteLine("        Welcome to the Inverted Pendulum Plant!");
  8531  0A3D  30CD               	movlw	low (STR_3| (0+32768))
  8532  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  8533  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  8534  0A40  00B8               	movwf	USARTWriteLine@str
  8535  0A41  3083               	movlw	high (STR_3| (0+32768))
  8536  0A42  00B9               	movwf	USARTWriteLine@str+1
  8537  0A43  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8538                           
  8539                           ;main.c: 151: USARTWriteLine("        To operate the system, type on options in below.")
      +                          ;
  8540  0A48  305C               	movlw	low (STR_4| (0+32768))
  8541  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  8542  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  8543  0A4B  00B8               	movwf	USARTWriteLine@str
  8544  0A4C  3083               	movlw	high (STR_4| (0+32768))
  8545  0A4D  00B9               	movwf	USARTWriteLine@str+1
  8546  0A4E  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8547                           
  8548                           ;main.c: 152: USARTGotoNewLine();
  8549  0A53  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8550                           
  8551                           ;main.c: 153: USARTWriteLine("        Example 0:");
  8552  0A58  3027               	movlw	low (STR_5| (0+32768))
  8553  0A59  1283               	bcf	3,5	;RP0=0, select bank0
  8554  0A5A  1303               	bcf	3,6	;RP1=0, select bank0
  8555  0A5B  00B8               	movwf	USARTWriteLine@str
  8556  0A5C  3085               	movlw	high (STR_5| (0+32768))
  8557  0A5D  00B9               	movwf	USARTWriteLine@str+1
  8558  0A5E  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8559                           
  8560                           ;main.c: 154: USARTWriteLine("        If you want give a step with 100% of duty-cycle, u
      +                          ntil you type anything, type:");
  8561  0A63  307A               	movlw	low (STR_6| (0+32768))
  8562  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  8563  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  8564  0A66  00B8               	movwf	USARTWriteLine@str
  8565  0A67  3081               	movlw	high (STR_6| (0+32768))
  8566  0A68  00B9               	movwf	USARTWriteLine@str+1
  8567  0A69  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8568                           
  8569                           ;main.c: 155: USARTWriteLine("        step()");
  8570  0A6E  30F7               	movlw	low (STR_7| (0+32768))
  8571  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  8572  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  8573  0A71  00B8               	movwf	USARTWriteLine@str
  8574  0A72  3085               	movlw	high (STR_7| (0+32768))
  8575  0A73  00B9               	movwf	USARTWriteLine@str+1
  8576  0A74  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8577                           
  8578                           ;main.c: 156: USARTGotoNewLine();
  8579  0A79  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8580                           
  8581                           ;main.c: 157: USARTWriteLine("        Example 1:");
  8582  0A7E  303A               	movlw	low (STR_8| (0+32768))
  8583  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  8584  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  8585  0A81  00B8               	movwf	USARTWriteLine@str
  8586  0A82  3085               	movlw	high (STR_8| (0+32768))
  8587  0A83  00B9               	movwf	USARTWriteLine@str+1
  8588  0A84  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8589                           
  8590                           ;main.c: 158: USARTWriteLine("        If you want give a step with 100% of duty-cycle, f
      +                          or 200 milliseconds, type:");
  8591  0A89  30D2               	movlw	low (STR_9| (0+32768))
  8592  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  8593  0A8B  1303               	bcf	3,6	;RP1=0, select bank0
  8594  0A8C  00B8               	movwf	USARTWriteLine@str
  8595  0A8D  3081               	movlw	high (STR_9| (0+32768))
  8596  0A8E  00B9               	movwf	USARTWriteLine@str+1
  8597  0A8F  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8598                           
  8599                           ;main.c: 159: USARTWriteLine("        step(200)");
  8600  0A94  30E5               	movlw	low (STR_10| (0+32768))
  8601  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  8602  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  8603  0A97  00B8               	movwf	USARTWriteLine@str
  8604  0A98  3085               	movlw	high (STR_10| (0+32768))
  8605  0A99  00B9               	movwf	USARTWriteLine@str+1
  8606  0A9A  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8607                           
  8608                           ;main.c: 160: USARTGotoNewLine();
  8609  0A9F  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8610                           
  8611                           ;main.c: 161: USARTWriteLine("        Example 2:");
  8612  0AA4  304D               	movlw	low (STR_11| (0+32768))
  8613  0AA5  1283               	bcf	3,5	;RP0=0, select bank0
  8614  0AA6  1303               	bcf	3,6	;RP1=0, select bank0
  8615  0AA7  00B8               	movwf	USARTWriteLine@str
  8616  0AA8  3085               	movlw	high (STR_11| (0+32768))
  8617  0AA9  00B9               	movwf	USARTWriteLine@str+1
  8618  0AAA  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8619                           
  8620                           ;main.c: 162: USARTWriteLine("        If you want give a step with 50% of duty-cycle,for
      +                           300 milliseconds, type:");
  8621  0AAF  3027               	movlw	low (STR_12| (0+32768))
  8622  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  8623  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  8624  0AB2  00B8               	movwf	USARTWriteLine@str
  8625  0AB3  3082               	movlw	high (STR_12| (0+32768))
  8626  0AB4  00B9               	movwf	USARTWriteLine@str+1
  8627  0AB5  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8628                           
  8629                           ;main.c: 163: USARTWriteLine("        step(50,300)");
  8630  0ABA  30B3               	movlw	low (STR_13| (0+32768))
  8631  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  8632  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  8633  0ABD  00B8               	movwf	USARTWriteLine@str
  8634  0ABE  3084               	movlw	high (STR_13| (0+32768))
  8635  0ABF  00B9               	movwf	USARTWriteLine@str+1
  8636  0AC0  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8637                           
  8638                           ;main.c: 164: USARTGotoNewLine();
  8639  0AC5  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8640                           
  8641                           ;main.c: 165: USARTWriteLine("        Example 3:");
  8642  0ACA  3060               	movlw	low (STR_14| (0+32768))
  8643  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  8644  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  8645  0ACD  00B8               	movwf	USARTWriteLine@str
  8646  0ACE  3085               	movlw	high (STR_14| (0+32768))
  8647  0ACF  00B9               	movwf	USARTWriteLine@str+1
  8648  0AD0  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8649                           
  8650                           ;main.c: 166: USARTWriteLine("        If you want operate the system continually with 10
      +                          0% of duty-cycle, type:");
  8651  0AD5  307A               	movlw	low (STR_15| (0+32768))
  8652  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  8653  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  8654  0AD8  00B8               	movwf	USARTWriteLine@str
  8655  0AD9  3082               	movlw	high (STR_15| (0+32768))
  8656  0ADA  00B9               	movwf	USARTWriteLine@str+1
  8657  0ADB  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8658                           
  8659                           ;main.c: 167: USARTWriteLine("        run()     ");
  8660  0AE0  30C8               	movlw	low (STR_16| (0+32768))
  8661  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  8662  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  8663  0AE3  00B8               	movwf	USARTWriteLine@str
  8664  0AE4  3084               	movlw	high (STR_16| (0+32768))
  8665  0AE5  00B9               	movwf	USARTWriteLine@str+1
  8666  0AE6  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8667                           
  8668                           ;main.c: 168: USARTGotoNewLine();
  8669  0AEB  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8670                           
  8671                           ;main.c: 169: USARTWriteLine("        Example 4:");
  8672  0AF0  3073               	movlw	low (STR_17| (0+32768))
  8673  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  8674  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  8675  0AF3  00B8               	movwf	USARTWriteLine@str
  8676  0AF4  3085               	movlw	high (STR_17| (0+32768))
  8677  0AF5  00B9               	movwf	USARTWriteLine@str+1
  8678  0AF6  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8679                           
  8680                           ;main.c: 170: USARTWriteLine("        If you want to identify the system parsing a RBS s
      +                          inal, type:");
  8681  0AFB  3016               	movlw	low (STR_18| (0+32768))
  8682  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  8683  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  8684  0AFE  00B8               	movwf	USARTWriteLine@str
  8685  0AFF  3083               	movlw	high (STR_18| (0+32768))
  8686  0B00  00B9               	movwf	USARTWriteLine@str+1
  8687  0B01  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8688                           
  8689                           ;main.c: 171: USARTWriteLine("        sys(max_duty_cicle)");
  8690  0B06  3066               	movlw	low (STR_19| (0+32768))
  8691  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  8692  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  8693  0B09  00B8               	movwf	USARTWriteLine@str
  8694  0B0A  3084               	movlw	high (STR_19| (0+32768))
  8695  0B0B  00B9               	movwf	USARTWriteLine@str+1
  8696  0B0C  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8697                           
  8698                           ;main.c: 172: USARTGotoNewLine();
  8699  0B11  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8700                           
  8701                           ;main.c: 173: USARTWriteLine("        Example 5:");
  8702  0B16  3086               	movlw	low (STR_20| (0+32768))
  8703  0B17  1283               	bcf	3,5	;RP0=0, select bank0
  8704  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  8705  0B19  00B8               	movwf	USARTWriteLine@str
  8706  0B1A  3085               	movlw	high (STR_20| (0+32768))
  8707  0B1B  00B9               	movwf	USARTWriteLine@str+1
  8708  0B1C  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8709                           
  8710                           ;main.c: 174: USARTWriteLine("        If you want a help, type:");
  8711  0B21  3028               	movlw	low (STR_21| (0+32768))
  8712  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  8713  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  8714  0B24  00B8               	movwf	USARTWriteLine@str
  8715  0B25  3084               	movlw	high (STR_21| (0+32768))
  8716  0B26  00B9               	movwf	USARTWriteLine@str+1
  8717  0B27  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8718                           
  8719                           ;main.c: 175: USARTWriteLine("        help()    ");
  8720  0B2C  30DB               	movlw	low (STR_22| (0+32768))
  8721  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  8722  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  8723  0B2F  00B8               	movwf	USARTWriteLine@str
  8724  0B30  3084               	movlw	high (STR_22| (0+32768))
  8725  0B31  00B9               	movwf	USARTWriteLine@str+1
  8726  0B32  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8727                           
  8728                           ;main.c: 176: USARTGotoNewLine();
  8729  0B37  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8730                           
  8731                           ;main.c: 177: USARTWriteLine("        Example 6:");
  8732  0B3C  3099               	movlw	low (STR_23| (0+32768))
  8733  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
  8734  0B3E  1303               	bcf	3,6	;RP1=0, select bank0
  8735  0B3F  00B8               	movwf	USARTWriteLine@str
  8736  0B40  3085               	movlw	high (STR_23| (0+32768))
  8737  0B41  00B9               	movwf	USARTWriteLine@str+1
  8738  0B42  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8739                           
  8740                           ;main.c: 178: USARTWriteLine("        If you want stop the system, type:");
  8741  0B47  30FD               	movlw	low (STR_24| (0+32768))
  8742  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  8743  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  8744  0B4A  00B8               	movwf	USARTWriteLine@str
  8745  0B4B  3083               	movlw	high (STR_24| (0+32768))
  8746  0B4C  00B9               	movwf	USARTWriteLine@str+1
  8747  0B4D  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8748                           
  8749                           ;main.c: 179: USARTWriteLine("        stop()    ");
  8750  0B52  30EE               	movlw	low (STR_25| (0+32768))
  8751  0B53  1283               	bcf	3,5	;RP0=0, select bank0
  8752  0B54  1303               	bcf	3,6	;RP1=0, select bank0
  8753  0B55  00B8               	movwf	USARTWriteLine@str
  8754  0B56  3084               	movlw	high (STR_25| (0+32768))
  8755  0B57  00B9               	movwf	USARTWriteLine@str+1
  8756  0B58  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8757                           
  8758                           ;main.c: 180: USARTGotoNewLine();
  8759  0B5D  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8760                           
  8761                           ;main.c: 181: USARTWriteLine("        Example 7:");
  8762  0B62  30AC               	movlw	low (STR_26| (0+32768))
  8763  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  8764  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  8765  0B65  00B8               	movwf	USARTWriteLine@str
  8766  0B66  3085               	movlw	high (STR_26| (0+32768))
  8767  0B67  00B9               	movwf	USARTWriteLine@str+1
  8768  0B68  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8769                           
  8770                           ;main.c: 182: USARTWriteLine("        If you want acquire the data obtained by sensors o
      +                          f system, type:");
  8771  0B6D  30CC               	movlw	low (STR_27| (0+32768))
  8772  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  8773  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  8774  0B70  00B8               	movwf	USARTWriteLine@str
  8775  0B71  3082               	movlw	high (STR_27| (0+32768))
  8776  0B72  00B9               	movwf	USARTWriteLine@str+1
  8777  0B73  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8778                           
  8779                           ;main.c: 183: USARTWriteLine("        acquire() ");
  8780  0B78  3014               	movlw	low (STR_28| (0+32768))
  8781  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  8782  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  8783  0B7B  00B8               	movwf	USARTWriteLine@str
  8784  0B7C  3085               	movlw	high (STR_28| (0+32768))
  8785  0B7D  00B9               	movwf	USARTWriteLine@str+1
  8786  0B7E  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8787                           
  8788                           ;main.c: 184: USARTWriteLine("        Example 8:");
  8789  0B83  30BF               	movlw	low (STR_29| (0+32768))
  8790  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  8791  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  8792  0B86  00B8               	movwf	USARTWriteLine@str
  8793  0B87  3085               	movlw	high (STR_29| (0+32768))
  8794  0B88  00B9               	movwf	USARTWriteLine@str+1
  8795  0B89  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8796                           
  8797                           ;main.c: 185: USARTWriteLine("        If you want to know the status of system, type:");
  8798  0B8E  3095               	movlw	low (STR_30| (0+32768))
  8799  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  8800  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  8801  0B91  00B8               	movwf	USARTWriteLine@str
  8802  0B92  3083               	movlw	high (STR_30| (0+32768))
  8803  0B93  00B9               	movwf	USARTWriteLine@str+1
  8804  0B94  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8805                           
  8806                           ;main.c: 186: USARTWriteLine("        status()  ");
  8807  0B99  3001               	movlw	low (STR_31| (0+32768))
  8808  0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  8809  0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  8810  0B9C  00B8               	movwf	USARTWriteLine@str
  8811  0B9D  3085               	movlw	high (STR_31| (0+32768))
  8812  0B9E  00B9               	movwf	USARTWriteLine@str+1
  8813  0B9F  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8814                           
  8815                           ;main.c: 187: USARTGotoNewLine();
  8816  0BA4  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8817                           
  8818                           ;main.c: 188: USARTWriteLine("        Example 9:");
  8819  0BA9  30D2               	movlw	low (STR_32| (0+32768))
  8820  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  8821  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  8822  0BAC  00B8               	movwf	USARTWriteLine@str
  8823  0BAD  3085               	movlw	high (STR_32| (0+32768))
  8824  0BAE  00B9               	movwf	USARTWriteLine@str+1
  8825  0BAF  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8826                           
  8827                           ;main.c: 189: USARTWriteLine("        If you want a help, type:");
  8828  0BB4  3028               	movlw	low (STR_21| (0+32768))
  8829  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  8830  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  8831  0BB7  00B8               	movwf	USARTWriteLine@str
  8832  0BB8  3084               	movlw	high (STR_21| (0+32768))
  8833  0BB9  00B9               	movwf	USARTWriteLine@str+1
  8834  0BBA  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8835                           
  8836                           ;main.c: 190: USARTWriteLine("        help()    ");
  8837  0BBF  30DB               	movlw	low (STR_22| (0+32768))
  8838  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  8839  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  8840  0BC2  00B8               	movwf	USARTWriteLine@str
  8841  0BC3  3084               	movlw	high (STR_22| (0+32768))
  8842  0BC4  00B9               	movwf	USARTWriteLine@str+1
  8843  0BC5  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8844                           
  8845                           ;main.c: 191: USARTWriteLine("**********************************************************
      +                          ***********************************");
  8846  0BCA  301C               	movlw	low (STR_35| (0+32768))
  8847  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  8848  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  8849  0BCD  00B8               	movwf	USARTWriteLine@str
  8850  0BCE  3081               	movlw	high (STR_35| (0+32768))
  8851  0BCF  00B9               	movwf	USARTWriteLine@str+1
  8852  0BD0  160A  158A  2485  120A  158A  	fcall	_USARTWriteLine
  8853                           
  8854                           ;main.c: 192: USARTGotoNewLine();
  8855  0BD5  160A  158A  2447  120A  158A  	fcall	_USARTGotoNewLine
  8856                           
  8857                           ;main.c: 193: USARTGotoNewLine();
  8858  0BDA  160A  158A  2447   	fcall	_USARTGotoNewLine
  8859  0BDD  0008               	return
  8860  0BDE                     __end_of_help:	
  8861                           
  8862                           	psect	text33
  8863  1C85                     __ptext33:	
  8864 ;; *************** function _USARTWriteLine *****************
  8865 ;; Defined at:
  8866 ;;		line 87 in file "usart_pic16.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  str             2   24[BANK0 ] PTR const unsigned char 
  8869 ;;		 -> STR_72(7), STR_71(35), status@output(25), STR_57(7), 
  8870 ;;		 -> STR_56(35), STR_55(7), STR_54(35), strBuffer(25), 
  8871 ;;		 -> STR_50(28), STR_35(94), STR_34(19), STR_33(34), 
  8872 ;;		 -> STR_32(19), STR_31(19), STR_30(56), STR_29(19), 
  8873 ;;		 -> STR_28(19), STR_27(74), STR_26(19), STR_25(19), 
  8874 ;;		 -> STR_24(43), STR_23(19), STR_22(19), STR_21(34), 
  8875 ;;		 -> STR_20(19), STR_19(28), STR_18(70), STR_17(19), 
  8876 ;;		 -> STR_16(19), STR_15(82), STR_14(19), STR_13(21), 
  8877 ;;		 -> STR_12(83), STR_11(19), STR_10(18), STR_9(85), 
  8878 ;;		 -> STR_8(19), STR_7(15), STR_6(88), STR_5(19), 
  8879 ;;		 -> STR_4(57), STR_3(48), STR_2(93), 
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      void 
  8884 ;; Registers used:
  8885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8891 ;;      Params:         0       2       0       0       0
  8892 ;;      Locals:         0       0       0       0       0
  8893 ;;      Temps:          0       0       0       0       0
  8894 ;;      Totals:         0       2       0       0       0
  8895 ;;Total ram usage:        2 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    6
  8898 ;; This function calls:
  8899 ;;		_USARTWriteChar
  8900 ;;		_USARTWriteString
  8901 ;; This function is called by:
  8902 ;;		_help
  8903 ;;		_choice
  8904 ;;		_step
  8905 ;;		_run
  8906 ;;		_status
  8907 ;;		_sys
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           
  8912                           ;psect for function _USARTWriteLine
  8913  1C85                     _USARTWriteLine:	
  8914                           
  8915                           ;usart_pic16.c: 89: USARTWriteChar('\r');
  8916                           
  8917                           ;incstack = 0
  8918                           ; Regs used in _USARTWriteLine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8919  1C85  300D               	movlw	13
  8920  1C86  160A  158A  242C  160A  158A  	fcall	_USARTWriteChar
  8921                           
  8922                           ;usart_pic16.c: 90: USARTWriteChar('\n');
  8923  1C8B  300A               	movlw	10
  8924  1C8C  160A  158A  242C  160A  158A  	fcall	_USARTWriteChar
  8925                           
  8926                           ;usart_pic16.c: 92: USARTWriteString(str);
  8927  1C91  1283               	bcf	3,5	;RP0=0, select bank0
  8928  1C92  1303               	bcf	3,6	;RP1=0, select bank0
  8929  1C93  0838               	movf	USARTWriteLine@str,w
  8930  1C94  00B6               	movwf	USARTWriteString@str
  8931  1C95  0839               	movf	USARTWriteLine@str+1,w
  8932  1C96  00B7               	movwf	USARTWriteString@str+1
  8933  1C97  160A  158A  258F   	fcall	_USARTWriteString
  8934  1C9A  0008               	return
  8935  1C9B                     __end_of_USARTWriteLine:	
  8936                           
  8937                           	psect	text34
  8938  1D8F                     __ptext34:	
  8939 ;; *************** function _USARTWriteString *****************
  8940 ;; Defined at:
  8941 ;;		line 78 in file "usart_pic16.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  str             2   22[BANK0 ] PTR const unsigned char 
  8944 ;;		 -> STR_72(7), STR_71(35), STR_69(8), STR_67(9), 
  8945 ;;		 -> STR_65(9), STR_63(22), STR_61(22), status@output(25), 
  8946 ;;		 -> STR_57(7), STR_56(35), STR_55(7), STR_54(35), 
  8947 ;;		 -> strBuffer(25), STR_51(2), STR_50(28), STR_35(94), 
  8948 ;;		 -> STR_34(19), STR_33(34), STR_32(19), STR_31(19), 
  8949 ;;		 -> STR_30(56), STR_29(19), STR_28(19), STR_27(74), 
  8950 ;;		 -> STR_26(19), STR_25(19), STR_24(43), STR_23(19), 
  8951 ;;		 -> STR_22(19), STR_21(34), STR_20(19), STR_19(28), 
  8952 ;;		 -> STR_18(70), STR_17(19), STR_16(19), STR_15(82), 
  8953 ;;		 -> STR_14(19), STR_13(21), STR_12(83), STR_11(19), 
  8954 ;;		 -> STR_10(18), STR_9(85), STR_8(19), STR_7(15), 
  8955 ;;		 -> STR_6(88), STR_5(19), STR_4(57), STR_3(48), 
  8956 ;;		 -> STR_2(93), STR_1(2), 
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;		None
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  1    wreg      void 
  8961 ;; Registers used:
  8962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8963 ;; Tracked objects:
  8964 ;;		On entry : 0/0
  8965 ;;		On exit  : 0/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8968 ;;      Params:         0       2       0       0       0
  8969 ;;      Locals:         0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0
  8971 ;;      Totals:         0       2       0       0       0
  8972 ;;Total ram usage:        2 bytes
  8973 ;; Hardware stack levels used:    1
  8974 ;; Hardware stack levels required when called:    5
  8975 ;; This function calls:
  8976 ;;		_USARTWriteChar
  8977 ;; This function is called by:
  8978 ;;		_USARTWriteLine
  8979 ;;		_main
  8980 ;;		_choice
  8981 ;;		_acquire
  8982 ;;		_adReadA0
  8983 ;;		_sys
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _USARTWriteString
  8989  1D8F                     _USARTWriteString:	
  8990  1D8F                     l3831:	
  8991                           ;usart_pic16.c: 80: while(*str!='\0')
  8992                           
  8993                           ;incstack = 0
  8994 ;; using string table level
  8995                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8996                           
  8997  1D8F  1283               	bcf	3,5	;RP0=0, select bank0
  8998  1D90  1303               	bcf	3,6	;RP1=0, select bank0
  8999  1D91  0837               	movf	USARTWriteString@str+1,w
  9000  1D92  00FF               	movwf	127
  9001  1D93  0836               	movf	USARTWriteString@str,w
  9002  1D94  0084               	movwf	4
  9003  1D95  120A  118A  2100  160A  158A  	fcall	stringtab
  9004  1D9A  3A00               	xorlw	0
  9005  1D9B  1903               	btfsc	3,2
  9006  1D9C  0008               	return
  9007                           
  9008                           ;usart_pic16.c: 81: {
  9009                           ;usart_pic16.c: 82: USARTWriteChar(*str);
  9010  1D9D  1283               	bcf	3,5	;RP0=0, select bank0
  9011  1D9E  1303               	bcf	3,6	;RP1=0, select bank0
  9012  1D9F  0837               	movf	USARTWriteString@str+1,w
  9013  1DA0  00FF               	movwf	127
  9014  1DA1  0836               	movf	USARTWriteString@str,w
  9015  1DA2  0084               	movwf	4
  9016  1DA3  120A  118A  2100  160A  158A  	fcall	stringtab
  9017  1DA8  160A  158A  242C  160A  158A  	fcall	_USARTWriteChar
  9018                           
  9019                           ;usart_pic16.c: 83: str++;
  9020  1DAD  3001               	movlw	1
  9021  1DAE  1283               	bcf	3,5	;RP0=0, select bank0
  9022  1DAF  1303               	bcf	3,6	;RP1=0, select bank0
  9023  1DB0  07B6               	addwf	USARTWriteString@str,f
  9024  1DB1  1803               	skipnc
  9025  1DB2  0AB7               	incf	USARTWriteString@str+1,f
  9026  1DB3  2D8F               	goto	l3831
  9027  1DB4                     __end_of_USARTWriteString:	
  9028                           
  9029                           	psect	text35
  9030  1C47                     __ptext35:	
  9031 ;; *************** function _USARTGotoNewLine *****************
  9032 ;; Defined at:
  9033 ;;		line 202 in file "usart_pic16.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;		None
  9036 ;; Auto vars:     Size  Location     Type
  9037 ;;		None
  9038 ;; Return value:  Size  Location     Type
  9039 ;;                  1    wreg      void 
  9040 ;; Registers used:
  9041 ;;		wreg, status,2, status,0, pclath, cstack
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9047 ;;      Params:         0       0       0       0       0
  9048 ;;      Locals:         0       0       0       0       0
  9049 ;;      Temps:          0       0       0       0       0
  9050 ;;      Totals:         0       0       0       0       0
  9051 ;;Total ram usage:        0 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; Hardware stack levels required when called:    5
  9054 ;; This function calls:
  9055 ;;		_USARTWriteChar
  9056 ;; This function is called by:
  9057 ;;		_help
  9058 ;;		_choice
  9059 ;;		_status
  9060 ;;		_acquire
  9061 ;;		_sys
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           
  9066                           ;psect for function _USARTGotoNewLine
  9067  1C47                     _USARTGotoNewLine:	
  9068                           
  9069                           ;usart_pic16.c: 204: USARTWriteChar('\r');
  9070                           
  9071                           ;incstack = 0
  9072                           ; Regs used in _USARTGotoNewLine: [wreg+status,2+status,0+pclath+cstack]
  9073  1C47  300D               	movlw	13
  9074  1C48  160A  158A  242C  160A  158A  	fcall	_USARTWriteChar
  9075                           
  9076                           ;usart_pic16.c: 205: USARTWriteChar('\n');
  9077  1C4D  300A               	movlw	10
  9078  1C4E  160A  158A  242C   	fcall	_USARTWriteChar
  9079  1C51  0008               	return
  9080  1C52                     __end_of_USARTGotoNewLine:	
  9081                           
  9082                           	psect	text36
  9083  1C2C                     __ptext36:	
  9084 ;; *************** function _USARTWriteChar *****************
  9085 ;; Defined at:
  9086 ;;		line 71 in file "usart_pic16.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  ch              1    wreg     unsigned char 
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;  ch              1   21[BANK0 ] unsigned char 
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  1    wreg      void 
  9093 ;; Registers used:
  9094 ;;		wreg
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9100 ;;      Params:         0       0       0       0       0
  9101 ;;      Locals:         0       1       0       0       0
  9102 ;;      Temps:          0       0       0       0       0
  9103 ;;      Totals:         0       1       0       0       0
  9104 ;;Total ram usage:        1 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:    4
  9107 ;; This function calls:
  9108 ;;		Nothing
  9109 ;; This function is called by:
  9110 ;;		_USARTWriteString
  9111 ;;		_USARTWriteLine
  9112 ;;		_USARTGotoNewLine
  9113 ;;		_getData
  9114 ;;		_USARTWriteInt
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _USARTWriteChar
  9120  1C2C                     _USARTWriteChar:	
  9121                           
  9122                           ;incstack = 0
  9123                           ; Regs used in _USARTWriteChar: [wreg]
  9124                           ;USARTWriteChar@ch stored from wreg
  9125  1C2C  1283               	bcf	3,5	;RP0=0, select bank0
  9126  1C2D  1303               	bcf	3,6	;RP1=0, select bank0
  9127  1C2E  00B5               	movwf	USARTWriteChar@ch
  9128  1C2F                     l38:	
  9129                           ;usart_pic16.c: 73: while(!PIR1bits.TXIF);
  9130                           
  9131  1C2F  1E0C               	btfss	12,4	;volatile
  9132  1C30  2C2F               	goto	l38
  9133                           
  9134                           ;usart_pic16.c: 75: TXREG=ch;
  9135  1C31  0835               	movf	USARTWriteChar@ch,w
  9136  1C32  0099               	movwf	25	;volatile
  9137  1C33  0008               	return
  9138  1C34                     __end_of_USARTWriteChar:	
  9139                           
  9140                           	psect	text37
  9141  133C                     __ptext37:	
  9142 ;; *************** function _atoi *****************
  9143 ;; Defined at:
  9144 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;  s               1    wreg     PTR const unsigned char 
  9147 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;  s               1   34[BANK0 ] PTR const unsigned char 
  9150 ;;		 -> choice@duty_541(10), choice@duty_534(10), choice@time(10), choice@duty(10), 
  9151 ;;  a               2   32[BANK0 ] int 
  9152 ;;  sign            1   31[BANK0 ] unsigned char 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  2   27[BANK0 ] int 
  9155 ;; Registers used:
  9156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9162 ;;      Params:         0       2       0       0       0
  9163 ;;      Locals:         0       4       0       0       0
  9164 ;;      Temps:          0       2       0       0       0
  9165 ;;      Totals:         0       8       0       0       0
  9166 ;;Total ram usage:        8 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    5
  9169 ;; This function calls:
  9170 ;;		___wmul
  9171 ;;		_isdigit
  9172 ;; This function is called by:
  9173 ;;		_choice
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function _atoi
  9179  133C                     _atoi:	
  9180                           
  9181                           ;incstack = 0
  9182                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9183                           ;atoi@s stored from wreg
  9184  133C  1283               	bcf	3,5	;RP0=0, select bank0
  9185  133D  1303               	bcf	3,6	;RP1=0, select bank0
  9186  133E  00C2               	movwf	atoi@s
  9187  133F                     l4235:	
  9188  133F  0842               	movf	atoi@s,w
  9189  1340  0084               	movwf	4
  9190  1341  3020               	movlw	32
  9191  1342  1783               	bsf	3,7	;select IRP bank2
  9192  1343  0600               	xorwf	0,w
  9193  1344  1D03               	btfss	3,2
  9194  1345  2B4B               	goto	l4237
  9195  1346                     l4233:	
  9196  1346  3001               	movlw	1
  9197  1347  00BD               	movwf	??_atoi
  9198  1348  083D               	movf	??_atoi,w
  9199  1349  07C2               	addwf	atoi@s,f
  9200  134A  2B3F               	goto	l4235
  9201  134B                     l4237:	
  9202  134B  0842               	movf	atoi@s,w
  9203  134C  0084               	movwf	4
  9204  134D  3009               	movlw	9
  9205  134E  0600               	xorwf	0,w
  9206  134F  1903               	btfsc	3,2
  9207  1350  2B46               	goto	l4233
  9208  1351  01C0               	clrf	atoi@a
  9209  1352  01C1               	clrf	atoi@a+1
  9210  1353  01BF               	clrf	atoi@sign
  9211  1354  0842               	movf	atoi@s,w
  9212  1355  0084               	movwf	4
  9213  1356  302D               	movlw	45
  9214  1357  0600               	xorwf	0,w
  9215  1358  1D03               	btfss	3,2
  9216  1359  2B5F               	goto	l4245
  9217  135A  3001               	movlw	1
  9218  135B  00BD               	movwf	??_atoi
  9219  135C  083D               	movf	??_atoi,w
  9220  135D  07BF               	addwf	atoi@sign,f
  9221  135E  2B65               	goto	l4251
  9222  135F                     l4245:	
  9223  135F  0842               	movf	atoi@s,w
  9224  1360  0084               	movwf	4
  9225  1361  302B               	movlw	43
  9226  1362  0600               	xorwf	0,w
  9227  1363  1D03               	btfss	3,2
  9228  1364  2B69               	goto	l4253
  9229  1365                     l4251:	
  9230  1365  3001               	movlw	1
  9231  1366  00BD               	movwf	??_atoi
  9232  1367  083D               	movf	??_atoi,w
  9233  1368  07C2               	addwf	atoi@s,f
  9234  1369                     l4253:	
  9235  1369  0842               	movf	atoi@s,w
  9236  136A  0084               	movwf	4
  9237  136B  0800               	movf	0,w
  9238  136C  120A  158A  2000  160A  118A  	fcall	_isdigit
  9239  1371  1C03               	btfss	3,0
  9240  1372  2B97               	goto	l4255
  9241  1373  1283               	bcf	3,5	;RP0=0, select bank0
  9242  1374  1303               	bcf	3,6	;RP1=0, select bank0
  9243  1375  0841               	movf	atoi@a+1,w
  9244  1376  00B6               	movwf	___wmul@multiplier+1
  9245  1377  0840               	movf	atoi@a,w
  9246  1378  00B5               	movwf	___wmul@multiplier
  9247  1379  300A               	movlw	10
  9248  137A  00B7               	movwf	___wmul@multiplicand
  9249  137B  3000               	movlw	0
  9250  137C  00B8               	movwf	___wmul@multiplicand+1
  9251  137D  160A  158A  2526  160A  118A  	fcall	___wmul
  9252  1382  1283               	bcf	3,5	;RP0=0, select bank0
  9253  1383  1303               	bcf	3,6	;RP1=0, select bank0
  9254  1384  0842               	movf	atoi@s,w
  9255  1385  0084               	movwf	4
  9256  1386  1783               	bsf	3,7	;select IRP bank2
  9257  1387  0800               	movf	0,w
  9258  1388  0735               	addwf	?___wmul,w
  9259  1389  00BD               	movwf	??_atoi
  9260  138A  0836               	movf	?___wmul+1,w
  9261  138B  1803               	skipnc
  9262  138C  0A36               	incf	?___wmul+1,w
  9263  138D  00BE               	movwf	??_atoi+1
  9264  138E  083D               	movf	??_atoi,w
  9265  138F  3ED0               	addlw	208
  9266  1390  00C0               	movwf	atoi@a
  9267  1391  083E               	movf	??_atoi+1,w
  9268  1392  1803               	skipnc
  9269  1393  3E01               	addlw	1
  9270  1394  3EFF               	addlw	255
  9271  1395  00C1               	movwf	atoi@a+1
  9272  1396  2B65               	goto	l4251
  9273  1397                     l4255:	
  9274  1397  1283               	bcf	3,5	;RP0=0, select bank0
  9275  1398  1303               	bcf	3,6	;RP1=0, select bank0
  9276  1399  083F               	movf	atoi@sign,w
  9277  139A  1903               	btfsc	3,2
  9278  139B  2BA8               	goto	l4261
  9279  139C  0940               	comf	atoi@a,w
  9280  139D  00BD               	movwf	??_atoi
  9281  139E  0941               	comf	atoi@a+1,w
  9282  139F  00BE               	movwf	??_atoi+1
  9283  13A0  0ABD               	incf	??_atoi,f
  9284  13A1  1903               	skipnz
  9285  13A2  0ABE               	incf	??_atoi+1,f
  9286  13A3  083D               	movf	??_atoi,w
  9287  13A4  00BB               	movwf	?_atoi
  9288  13A5  083E               	movf	??_atoi+1,w
  9289  13A6  00BC               	movwf	?_atoi+1
  9290  13A7  0008               	return
  9291  13A8                     l4261:	
  9292  13A8  0841               	movf	atoi@a+1,w
  9293  13A9  00BC               	movwf	?_atoi+1
  9294  13AA  0840               	movf	atoi@a,w
  9295  13AB  00BB               	movwf	?_atoi
  9296  13AC  0008               	return
  9297  13AD                     __end_of_atoi:	
  9298                           
  9299                           	psect	text38
  9300  0800                     __ptext38:	
  9301 ;; *************** function _isdigit *****************
  9302 ;; Defined at:
  9303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;  c               1    wreg     unsigned char 
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;  c               1   22[BANK0 ] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;		None               void
  9310 ;; Registers used:
  9311 ;;		wreg, status,2, status,0
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9317 ;;      Params:         0       0       0       0       0
  9318 ;;      Locals:         0       2       0       0       0
  9319 ;;      Temps:          0       0       0       0       0
  9320 ;;      Totals:         0       2       0       0       0
  9321 ;;Total ram usage:        2 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    4
  9324 ;; This function calls:
  9325 ;;		Nothing
  9326 ;; This function is called by:
  9327 ;;		_atoi
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           
  9332                           ;psect for function _isdigit
  9333  0800                     _isdigit:	
  9334                           
  9335                           ;incstack = 0
  9336                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9337                           ;isdigit@c stored from wreg
  9338  0800  1283               	bcf	3,5	;RP0=0, select bank0
  9339  0801  1303               	bcf	3,6	;RP1=0, select bank0
  9340  0802  00B6               	movwf	isdigit@c
  9341  0803  01B5               	clrf	_isdigit$823
  9342  0804  303A               	movlw	58
  9343  0805  0236               	subwf	isdigit@c,w
  9344  0806  1803               	skipnc
  9345  0807  280E               	goto	l4039
  9346  0808  3030               	movlw	48
  9347  0809  0236               	subwf	isdigit@c,w
  9348  080A  1C03               	skipc
  9349  080B  280E               	goto	l4039
  9350  080C  01B5               	clrf	_isdigit$823
  9351  080D  0AB5               	incf	_isdigit$823,f
  9352  080E                     l4039:	
  9353  080E  0C35               	rrf	_isdigit$823,w
  9354  080F  0008               	return
  9355  0810                     __end_of_isdigit:	
  9356                           
  9357                           	psect	text39
  9358  1D26                     __ptext39:	
  9359 ;; *************** function ___wmul *****************
  9360 ;; Defined at:
  9361 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;  multiplier      2   21[BANK0 ] unsigned int 
  9364 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  product         2   25[BANK0 ] unsigned int 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  2   21[BANK0 ] unsigned int 
  9369 ;; Registers used:
  9370 ;;		wreg, status,2, status,0
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9376 ;;      Params:         0       4       0       0       0
  9377 ;;      Locals:         0       2       0       0       0
  9378 ;;      Temps:          0       0       0       0       0
  9379 ;;      Totals:         0       6       0       0       0
  9380 ;;Total ram usage:        6 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    4
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_sys
  9387 ;;		_atoi
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           
  9392                           ;psect for function ___wmul
  9393  1D26                     ___wmul:	
  9394                           
  9395                           ;incstack = 0
  9396                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9397  1D26  1283               	bcf	3,5	;RP0=0, select bank0
  9398  1D27  1303               	bcf	3,6	;RP1=0, select bank0
  9399  1D28  01B9               	clrf	___wmul@product
  9400  1D29  01BA               	clrf	___wmul@product+1
  9401  1D2A                     l4019:	
  9402  1D2A  1C35               	btfss	___wmul@multiplier,0
  9403  1D2B  2D32               	goto	l477
  9404  1D2C  0837               	movf	___wmul@multiplicand,w
  9405  1D2D  07B9               	addwf	___wmul@product,f
  9406  1D2E  1803               	skipnc
  9407  1D2F  0ABA               	incf	___wmul@product+1,f
  9408  1D30  0838               	movf	___wmul@multiplicand+1,w
  9409  1D31  07BA               	addwf	___wmul@product+1,f
  9410  1D32                     l477:	
  9411  1D32  3001               	movlw	1
  9412  1D33                     u4935:	
  9413  1D33  1003               	clrc
  9414  1D34  0DB7               	rlf	___wmul@multiplicand,f
  9415  1D35  0DB8               	rlf	___wmul@multiplicand+1,f
  9416  1D36  3EFF               	addlw	-1
  9417  1D37  1D03               	skipz
  9418  1D38  2D33               	goto	u4935
  9419  1D39  3001               	movlw	1
  9420  1D3A                     u4945:	
  9421  1D3A  1003               	clrc
  9422  1D3B  0CB6               	rrf	___wmul@multiplier+1,f
  9423  1D3C  0CB5               	rrf	___wmul@multiplier,f
  9424  1D3D  3EFF               	addlw	-1
  9425  1D3E  1D03               	skipz
  9426  1D3F  2D3A               	goto	u4945
  9427  1D40  0835               	movf	___wmul@multiplier,w
  9428  1D41  0436               	iorwf	___wmul@multiplier+1,w
  9429  1D42  1D03               	btfss	3,2
  9430  1D43  2D2A               	goto	l4019
  9431  1D44  083A               	movf	___wmul@product+1,w
  9432  1D45  00B6               	movwf	?___wmul+1
  9433  1D46  0839               	movf	___wmul@product,w
  9434  1D47  00B5               	movwf	?___wmul
  9435  1D48  0008               	return
  9436  1D49                     __end_of___wmul:	
  9437                           
  9438                           	psect	text40
  9439  1D03                     __ptext40:	
  9440 ;; *************** function _USARTReadData *****************
  9441 ;; Defined at:
  9442 ;;		line 124 in file "usart_pic16.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;		None
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;  data            1   22[BANK0 ] unsigned char 
  9447 ;; Return value:  Size  Location     Type
  9448 ;;                  1    wreg      unsigned char 
  9449 ;; Registers used:
  9450 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9456 ;;      Params:         0       0       0       0       0
  9457 ;;      Locals:         0       1       0       0       0
  9458 ;;      Temps:          0       1       0       0       0
  9459 ;;      Totals:         0       2       0       0       0
  9460 ;;Total ram usage:        2 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    4
  9463 ;; This function calls:
  9464 ;;		Nothing
  9465 ;; This function is called by:
  9466 ;;		_getData
  9467 ;;		_USARTReadBuffer
  9468 ;;		_USARTFlushBuffer
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           
  9473                           ;psect for function _USARTReadData
  9474  1D03                     _USARTReadData:	
  9475                           
  9476                           ;usart_pic16.c: 126: char data;
  9477                           ;usart_pic16.c: 129: if(UQFront==-1)
  9478                           
  9479                           ;incstack = 0
  9480                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
  9481  1D03  1283               	bcf	3,5	;RP0=0, select bank0
  9482  1D04  1303               	bcf	3,6	;RP1=0, select bank0
  9483  1D05  0A5A               	incf	_UQFront,w	;volatile
  9484  1D06  1D03               	btfss	3,2
  9485  1D07  2D0A               	goto	l3061
  9486                           
  9487                           ;usart_pic16.c: 130: return 0;
  9488  1D08  3000               	movlw	0
  9489  1D09  0008               	return
  9490  1D0A                     l3061:	
  9491                           
  9492                           ;usart_pic16.c: 132: data=URBuff[UQFront];
  9493  1D0A  085A               	movf	_UQFront,w
  9494  1D0B  3E10               	addlw	(low (_URBuff| (0+256)))& (0+255)
  9495  1D0C  0084               	movwf	4
  9496  1D0D  1783               	bsf	3,7	;select IRP bank2
  9497  1D0E  0800               	movf	0,w
  9498  1D0F  00B5               	movwf	??_USARTReadData
  9499  1D10  0835               	movf	??_USARTReadData,w
  9500  1D11  00B6               	movwf	USARTReadData@data
  9501                           
  9502                           ;usart_pic16.c: 134: if(UQFront==UQEnd)
  9503  1D12  085A               	movf	_UQFront,w	;volatile
  9504  1D13  0659               	xorwf	_UQEnd,w	;volatile
  9505  1D14  1D03               	skipz
  9506  1D15  2D1C               	goto	l3067
  9507                           
  9508                           ;usart_pic16.c: 135: {
  9509                           ;usart_pic16.c: 138: UQFront=UQEnd=-1;
  9510  1D16  30FF               	movlw	255
  9511  1D17  00D9               	movwf	_UQEnd	;volatile
  9512  1D18  00B5               	movwf	??_USARTReadData
  9513  1D19  0835               	movf	??_USARTReadData,w
  9514  1D1A  00DA               	movwf	_UQFront	;volatile
  9515                           
  9516                           ;usart_pic16.c: 139: }
  9517  1D1B  2D24               	goto	l3071
  9518  1D1C                     l3067:	
  9519                           
  9520                           ;usart_pic16.c: 140: else
  9521                           ;usart_pic16.c: 141: {
  9522                           ;usart_pic16.c: 142: UQFront++;
  9523  1D1C  3001               	movlw	1
  9524  1D1D  00B5               	movwf	??_USARTReadData
  9525  1D1E  0835               	movf	??_USARTReadData,w
  9526  1D1F  07DA               	addwf	_UQFront,f	;volatile
  9527                           
  9528                           ;usart_pic16.c: 144: if(UQFront==64)
  9529  1D20  3040               	movlw	64
  9530  1D21  065A               	xorwf	_UQFront,w	;volatile
  9531  1D22  1903               	btfsc	3,2
  9532                           
  9533                           ;usart_pic16.c: 145: UQFront=0;
  9534  1D23  01DA               	clrf	_UQFront	;volatile
  9535  1D24                     l3071:	
  9536                           
  9537                           ;usart_pic16.c: 146: }
  9538                           ;usart_pic16.c: 148: return data;
  9539  1D24  0836               	movf	USARTReadData@data,w
  9540  1D25  0008               	return
  9541  1D26                     __end_of_USARTReadData:	
  9542                           
  9543                           	psect	text41
  9544  113A                     __ptext41:	
  9545 ;; *************** function _USARTInit *****************
  9546 ;; Defined at:
  9547 ;;		line 31 in file "usart_pic16.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;  baud_rate       2   21[BANK0 ] unsigned int 
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9561 ;;      Params:         0       2       0       0       0
  9562 ;;      Locals:         0       0       0       0       0
  9563 ;;      Temps:          0       1       0       0       0
  9564 ;;      Totals:         0       3       0       0       0
  9565 ;;Total ram usage:        3 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    4
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_main
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           
  9576                           ;psect for function _USARTInit
  9577  113A                     _USARTInit:	
  9578                           
  9579                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
  9580                           
  9581                           ;incstack = 0
  9582                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  9583  113A  30FF               	movlw	255
  9584  113B  1283               	bcf	3,5	;RP0=0, select bank0
  9585  113C  1303               	bcf	3,6	;RP1=0, select bank0
  9586  113D  00D9               	movwf	_UQEnd	;volatile
  9587  113E  00B7               	movwf	??_USARTInit
  9588  113F  0837               	movf	??_USARTInit,w
  9589  1140  00DA               	movwf	_UQFront	;volatile
  9590                           
  9591                           ;usart_pic16.c: 37: switch(baud_rate)
  9592  1141  294D               	goto	l3285
  9593  1142                     l3275:	
  9594                           ;usart_pic16.c: 38: {
  9595                           ;usart_pic16.c: 39: case 9600:
  9596                           
  9597                           
  9598                           ;usart_pic16.c: 40: SPBRG=129;
  9599  1142  3081               	movlw	129
  9600  1143  2949               	goto	L4
  9601  1144                     l3277:	
  9602                           ;usart_pic16.c: 42: case 19200:
  9603                           
  9604                           ;usart_pic16.c: 41: break;
  9605                           
  9606                           
  9607                           ;usart_pic16.c: 43: SPBRG=64;
  9608  1144  3040               	movlw	64
  9609  1145  2949               	goto	L4
  9610  1146                     l3279:	
  9611                           ;usart_pic16.c: 45: case 28800:
  9612                           
  9613                           ;usart_pic16.c: 44: break;
  9614                           
  9615                           
  9616                           ;usart_pic16.c: 46: SPBRG=42;
  9617  1146  302A               	movlw	42
  9618  1147  2949               	goto	L4
  9619  1148                     l3281:	
  9620                           ;usart_pic16.c: 48: case 33600:
  9621                           
  9622                           ;usart_pic16.c: 47: break;
  9623                           
  9624                           
  9625                           ;usart_pic16.c: 49: SPBRG=36;
  9626  1148  3024               	movlw	36
  9627  1149                     L4:	
  9628  1149  1683               	bsf	3,5	;RP0=1, select bank1
  9629  114A  1303               	bcf	3,6	;RP1=0, select bank1
  9630  114B  0099               	movwf	25	;volatile
  9631                           
  9632                           ;usart_pic16.c: 51: }
  9633                           
  9634                           ;usart_pic16.c: 50: break;
  9635  114C  2970               	goto	l31
  9636  114D                     l3285:	
  9637                           
  9638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  9639                           ; Switch size 1, requested type "space"
  9640                           ; Number of cases is 4, Range of values is 37 to 131
  9641                           ; switch strategies available:
  9642                           ; Name         Instructions Cycles
  9643                           ; simple_byte           13     7 (average)
  9644                           ; jumptable            263     9 (fixed)
  9645                           ;	Chosen strategy is simple_byte
  9646  114D  1283               	bcf	3,5	;RP0=0, select bank0
  9647  114E  0836               	movf	USARTInit@baud_rate+1,w
  9648  114F  3A25               	xorlw	37	; case 37
  9649  1150  1903               	skipnz
  9650  1151  295C               	goto	l4719
  9651  1152  3A6E               	xorlw	110	; case 75
  9652  1153  1903               	skipnz
  9653  1154  2961               	goto	l4721
  9654  1155  3A3B               	xorlw	59	; case 112
  9655  1156  1903               	skipnz
  9656  1157  2966               	goto	l4723
  9657  1158  3AF3               	xorlw	243	; case 131
  9658  1159  1903               	skipnz
  9659  115A  296B               	goto	l4725
  9660  115B  2970               	goto	l31
  9661  115C                     l4719:	
  9662                           
  9663                           ; Switch size 1, requested type "space"
  9664                           ; Number of cases is 1, Range of values is 128 to 128
  9665                           ; switch strategies available:
  9666                           ; Name         Instructions Cycles
  9667                           ; simple_byte            4     3 (average)
  9668                           ; direct_byte           14    11 (fixed)
  9669                           ; jumptable            263     9 (fixed)
  9670                           ;	Chosen strategy is simple_byte
  9671  115C  0835               	movf	USARTInit@baud_rate,w
  9672  115D  3A80               	xorlw	128	; case 128
  9673  115E  1903               	skipnz
  9674  115F  2942               	goto	l3275
  9675  1160  2970               	goto	l31
  9676  1161                     l4721:	
  9677                           
  9678                           ; Switch size 1, requested type "space"
  9679                           ; Number of cases is 1, Range of values is 0 to 0
  9680                           ; switch strategies available:
  9681                           ; Name         Instructions Cycles
  9682                           ; simple_byte            4     3 (average)
  9683                           ; direct_byte           11     8 (fixed)
  9684                           ; jumptable            260     6 (fixed)
  9685                           ;	Chosen strategy is simple_byte
  9686  1161  0835               	movf	USARTInit@baud_rate,w
  9687  1162  3A00               	xorlw	0	; case 0
  9688  1163  1903               	skipnz
  9689  1164  2944               	goto	l3277
  9690  1165  2970               	goto	l31
  9691  1166                     l4723:	
  9692                           
  9693                           ; Switch size 1, requested type "space"
  9694                           ; Number of cases is 1, Range of values is 128 to 128
  9695                           ; switch strategies available:
  9696                           ; Name         Instructions Cycles
  9697                           ; simple_byte            4     3 (average)
  9698                           ; direct_byte           14    11 (fixed)
  9699                           ; jumptable            263     9 (fixed)
  9700                           ;	Chosen strategy is simple_byte
  9701  1166  0835               	movf	USARTInit@baud_rate,w
  9702  1167  3A80               	xorlw	128	; case 128
  9703  1168  1903               	skipnz
  9704  1169  2946               	goto	l3279
  9705  116A  2970               	goto	l31
  9706  116B                     l4725:	
  9707                           
  9708                           ; Switch size 1, requested type "space"
  9709                           ; Number of cases is 1, Range of values is 64 to 64
  9710                           ; switch strategies available:
  9711                           ; Name         Instructions Cycles
  9712                           ; simple_byte            4     3 (average)
  9713                           ; direct_byte           14    11 (fixed)
  9714                           ; jumptable            263     9 (fixed)
  9715                           ;	Chosen strategy is simple_byte
  9716  116B  0835               	movf	USARTInit@baud_rate,w
  9717  116C  3A40               	xorlw	64	; case 64
  9718  116D  1903               	skipnz
  9719  116E  2948               	goto	l3281
  9720  116F  2970               	goto	l31
  9721  1170                     l31:	
  9722                           
  9723                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
  9724  1170  1683               	bsf	3,5	;RP0=1, select bank1
  9725  1171  1303               	bcf	3,6	;RP1=0, select bank1
  9726  1172  1318               	bcf	24,6	;volatile
  9727                           
  9728                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
  9729  1173  1698               	bsf	24,5	;volatile
  9730                           
  9731                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
  9732  1174  1218               	bcf	24,4	;volatile
  9733                           
  9734                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
  9735  1175  1518               	bsf	24,2	;volatile
  9736                           
  9737                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
  9738  1176  1283               	bcf	3,5	;RP0=0, select bank0
  9739  1177  1303               	bcf	3,6	;RP1=0, select bank0
  9740  1178  1798               	bsf	24,7	;volatile
  9741                           
  9742                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
  9743  1179  1318               	bcf	24,6	;volatile
  9744                           
  9745                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
  9746  117A  1618               	bsf	24,4	;volatile
  9747                           
  9748                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
  9749  117B  1198               	bcf	24,3	;volatile
  9750                           
  9751                           ;usart_pic16.c: 65: RCIE=1;
  9752  117C  1683               	bsf	3,5	;RP0=1, select bank1
  9753  117D  1303               	bcf	3,6	;RP1=0, select bank1
  9754  117E  168C               	bsf	12,5	;volatile
  9755                           
  9756                           ;usart_pic16.c: 66: PEIE=1;
  9757  117F  170B               	bsf	11,6	;volatile
  9758                           
  9759                           ;usart_pic16.c: 68: (GIE = 1);
  9760  1180  178B               	bsf	11,7	;volatile
  9761  1181  0008               	return
  9762  1182                     __end_of_USARTInit:	
  9763                           
  9764                           	psect	text42
  9765  10AD                     __ptext42:	
  9766 ;; *************** function _ISR *****************
  9767 ;; Defined at:
  9768 ;;		line 96 in file "main.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      void 
  9775 ;; Registers used:
  9776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9782 ;;      Params:         0       0       0       0       0
  9783 ;;      Locals:         0       0       0       0       0
  9784 ;;      Temps:          0       5       0       0       0
  9785 ;;      Totals:         0       5       0       0       0
  9786 ;;Total ram usage:        5 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    3
  9789 ;; This function calls:
  9790 ;;		_USARTHandleRxInt
  9791 ;;		i1_acquire
  9792 ;; This function is called by:
  9793 ;;		Interrupt level 1
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           
  9798                           ;psect for function _ISR
  9799  10AD                     _ISR:	
  9800                           
  9801                           ;main.c: 98: if (RCIE && RCIF) {
  9802  10AD  1683               	bsf	3,5	;RP0=1, select bank1
  9803  10AE  1303               	bcf	3,6	;RP1=0, select bank1
  9804  10AF  1E8C               	btfss	12,5	;volatile
  9805  10B0  28BB               	goto	i1l252
  9806  10B1  1283               	bcf	3,5	;RP0=0, select bank0
  9807  10B2  1303               	bcf	3,6	;RP1=0, select bank0
  9808  10B3  1E8C               	btfss	12,5	;volatile
  9809  10B4  28BB               	goto	i1l252
  9810                           
  9811                           ;main.c: 99: USARTHandleRxInt();
  9812  10B5  160A  118A  2182  160A  118A  	fcall	_USARTHandleRxInt
  9813                           
  9814                           ;main.c: 100: return;
  9815  10BA  28E6               	goto	i1l253
  9816  10BB                     i1l252:	
  9817                           
  9818                           ;main.c: 101: }
  9819                           ;main.c: 103: if(INTCONbits.TMR0IF){
  9820  10BB  1D0B               	btfss	11,2	;volatile
  9821  10BC  28DE               	goto	i1l4617
  9822                           
  9823                           ;main.c: 104: INTCONbits.TMR0IF = 0;
  9824  10BD  110B               	bcf	11,2	;volatile
  9825                           
  9826                           ;main.c: 105: count++;
  9827  10BE  3001               	movlw	1
  9828  10BF  1283               	bcf	3,5	;RP0=0, select bank0
  9829  10C0  07D1               	addwf	_count,f
  9830  10C1  1803               	skipnc
  9831  10C2  0AD2               	incf	_count+1,f
  9832  10C3  3000               	movlw	0
  9833  10C4  07D2               	addwf	_count+1,f
  9834                           
  9835                           ;main.c: 106: if(count>=max_counters && stepEnable){
  9836  10C5  0852               	movf	_count+1,w
  9837  10C6  3A80               	xorlw	128
  9838  10C7  00B0               	movwf	??_ISR
  9839  10C8  0850               	movf	_max_counters+1,w
  9840  10C9  3A80               	xorlw	128
  9841  10CA  0230               	subwf	??_ISR,w
  9842  10CB  1D03               	skipz
  9843  10CC  28CF               	goto	u577_25
  9844  10CD  084F               	movf	_max_counters,w
  9845  10CE  0251               	subwf	_count,w
  9846  10CF                     u577_25:	
  9847  10CF  1C03               	skipc
  9848  10D0  28DE               	goto	i1l4617
  9849  10D1  1283               	bcf	3,5	;RP0=0, select bank0
  9850  10D2  1303               	bcf	3,6	;RP1=0, select bank0
  9851  10D3  0853               	movf	_stepEnable,w
  9852  10D4  1903               	btfsc	3,2
  9853  10D5  28DE               	goto	i1l4617
  9854                           
  9855                           ;main.c: 107: CCPR1L = 0b00000000;
  9856  10D6  0195               	clrf	21	;volatile
  9857                           
  9858                           ;main.c: 108: CCPR2L = 0b00000000;
  9859  10D7  019B               	clrf	27	;volatile
  9860                           
  9861                           ;main.c: 109: CCP1CONbits.CCP1Y = 0b00000000;
  9862  10D8  1217               	bcf	23,4	;volatile
  9863                           
  9864                           ;main.c: 110: CCP1CONbits.CCP1X = 0b00000000;
  9865  10D9  1297               	bcf	23,5	;volatile
  9866                           
  9867                           ;main.c: 111: CCP2CONbits.CCP2Y = 0b00000000;
  9868  10DA  121D               	bcf	29,4	;volatile
  9869                           
  9870                           ;main.c: 112: CCP2CONbits.CCP2X = 0b00000000;
  9871  10DB  129D               	bcf	29,5	;volatile
  9872                           
  9873                           ;main.c: 113: acquirement = 0;
  9874  10DC  01D8               	clrf	_acquirement
  9875                           
  9876                           ;main.c: 114: stepEnable = 0;
  9877  10DD  01D3               	clrf	_stepEnable
  9878  10DE                     i1l4617:	
  9879                           
  9880                           ;main.c: 115: }
  9881                           ;main.c: 116: }
  9882                           ;main.c: 118: if(INTCONbits.INTF){
  9883  10DE  1C8B               	btfss	11,1	;volatile
  9884  10DF  28E6               	goto	i1l253
  9885                           
  9886                           ;main.c: 119: INTCONbits.INTF = 0;
  9887  10E0  108B               	bcf	11,1	;volatile
  9888                           
  9889                           ;main.c: 120: acquire();
  9890  10E1  160A  118A  21CB  160A  118A  	fcall	i1_acquire
  9891  10E6                     i1l253:	
  9892  10E6  1283               	bcf	3,5	;RP0=0, select bank0
  9893  10E7  1303               	bcf	3,6	;RP1=0, select bank0
  9894  10E8  0834               	movf	??_ISR+4,w
  9895  10E9  00FF               	movwf	127
  9896  10EA  0833               	movf	??_ISR+3,w
  9897  10EB  008A               	movwf	10
  9898  10EC  0832               	movf	??_ISR+2,w
  9899  10ED  0084               	movwf	4
  9900  10EE  0E31               	swapf	(??_ISR+1)^0,w
  9901  10EF  0083               	movwf	3
  9902  10F0  0EFE               	swapf	126,f
  9903  10F1  0E7E               	swapf	126,w
  9904  10F2  0009               	retfie
  9905  10F3                     __end_of_ISR:	
  9906                           
  9907                           	psect	intentry
  9908  0004                     __pintentry:	
  9909                           ;incstack = 0
  9910 ;; hardware stack exceeded
  9911                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9912                           
  9913  0004                     interrupt_function:	
  9914  007E                     saved_w	set	btemp
  9915  0004  00FE               	movwf	btemp
  9916  0005  0E03               	swapf	3,w
  9917  0006  1283               	bcf	3,5	;RP0=0, select bank0
  9918  0007  1303               	bcf	3,6	;RP1=0, select bank0
  9919  0008  00B1               	movwf	??_ISR+1
  9920  0009  0804               	movf	4,w
  9921  000A  00B2               	movwf	??_ISR+2
  9922  000B  080A               	movf	10,w
  9923  000C  00B3               	movwf	??_ISR+3
  9924  000D  087F               	movf	btemp+1,w
  9925  000E  00B4               	movwf	??_ISR+4
  9926  000F  160A  118A  28AD   	ljmp	_ISR
  9927                           
  9928                           	psect	text43
  9929  11CB                     __ptext43:	
  9930 ;; *************** function i1_acquire *****************
  9931 ;; Defined at:
  9932 ;;		line 384 in file "main.c"
  9933 ;; Parameters:    Size  Location     Type
  9934 ;;		None
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;  acquire         2   14[BANK0 ] unsigned int 
  9937 ;; Return value:  Size  Location     Type
  9938 ;;                  1    wreg      void 
  9939 ;; Registers used:
  9940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9941 ;; Tracked objects:
  9942 ;;		On entry : 0/0
  9943 ;;		On exit  : 0/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9946 ;;      Params:         0       0       0       0       0
  9947 ;;      Locals:         0       2       0       0       0
  9948 ;;      Temps:          0       0       0       0       0
  9949 ;;      Totals:         0       2       0       0       0
  9950 ;;Total ram usage:        2 bytes
  9951 ;; Hardware stack levels used:    1
  9952 ;; Hardware stack levels required when called:    2
  9953 ;; This function calls:
  9954 ;;		i1_USARTDataAvailable
  9955 ;;		i1_USARTGotoNewLine
  9956 ;;		i1_USARTWriteString
  9957 ;;		i1_sampling
  9958 ;;		i1_sprintf
  9959 ;; This function is called by:
  9960 ;;		_ISR
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           
  9965                           ;psect for function i1_acquire
  9966  11CB                     i1_acquire:	
  9967                           
  9968                           ;main.c: 385: USARTGotoNewLine();
  9969                           
  9970                           ;incstack = 0
  9971 ;; hardware stack exceeded
  9972                           ; Regs used in i1_acquire: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9973  11CB  160A  158A  243C  160A  118A  	fcall	i1_USARTGotoNewLine
  9974                           
  9975                           ;main.c: 386: acquirement = 1;
  9976  11D0  1283               	bcf	3,5	;RP0=0, select bank0
  9977  11D1  1303               	bcf	3,6	;RP1=0, select bank0
  9978  11D2  01D8               	clrf	_acquirement
  9979  11D3  0AD8               	incf	_acquirement,f
  9980  11D4                     i1l4531:	
  9981                           ;main.c: 387: while(USARTDataAvailable() == 0 &&acquirement){
  9982                           
  9983  11D4  160A  158A  24BD  160A  118A  	fcall	i1_USARTDataAvailable
  9984  11D9  3A00               	xorlw	0
  9985  11DA  1D03               	skipz
  9986  11DB  0008               	return
  9987  11DC  1283               	bcf	3,5	;RP0=0, select bank0
  9988  11DD  1303               	bcf	3,6	;RP1=0, select bank0
  9989  11DE  0858               	movf	_acquirement,w
  9990  11DF  1903               	btfsc	3,2
  9991  11E0  0008               	return
  9992                           
  9993                           ;main.c: 388: unsigned int valueAD = sampling();
  9994  11E1  160A  158A  245F  160A  118A  	fcall	i1_sampling
  9995  11E6  0871               	movf	?i1_sampling+1,w
  9996  11E7  1283               	bcf	3,5	;RP0=0, select bank0
  9997  11E8  1303               	bcf	3,6	;RP1=0, select bank0
  9998  11E9  00AF               	movwf	i1acquire@valueAD+1
  9999  11EA  0870               	movf	?i1_sampling,w
 10000  11EB  00AE               	movwf	i1acquire@valueAD
 10001                           
 10002                           ;main.c: 389: if(valueAD<=1023 && valueAD >= 0){
 10003  11EC  3004               	movlw	4
 10004  11ED  022F               	subwf	i1acquire@valueAD+1,w
 10005  11EE  3000               	movlw	0
 10006  11EF  1903               	skipnz
 10007  11F0  022E               	subwf	i1acquire@valueAD,w
 10008  11F1  1803               	skipnc
 10009  11F2  29D4               	goto	i1l4531
 10010                           
 10011                           ;main.c: 390: USARTWriteString("The analog value is: ");
 10012  11F3  309D               	movlw	low (STR_61| (0+32768))
 10013  11F4  00F1               	movwf	i1USARTWriteString@str
 10014  11F5  3084               	movlw	high (STR_61| (0+32768))
 10015  11F6  00F2               	movwf	i1USARTWriteString@str+1
 10016  11F7  160A  158A  24E0  160A  118A  	fcall	i1_USARTWriteString
 10017                           
 10018                           ;main.c: 391: sprintf(strBuffer,"%d",valueAD);
 10019  11FC  3051               	movlw	low (STR_52| (0+32768))
 10020  11FD  1283               	bcf	3,5	;RP0=0, select bank0
 10021  11FE  1303               	bcf	3,6	;RP1=0, select bank0
 10022  11FF  00A0               	movwf	i1sprintf@f
 10023  1200  3086               	movlw	high (STR_52| (0+32768))
 10024  1201  00A1               	movwf	i1sprintf@f+1
 10025  1202  082F               	movf	i1acquire@valueAD+1,w
 10026  1203  00A3               	movwf	?i1_sprintf+3
 10027  1204  082E               	movf	i1acquire@valueAD,w
 10028  1205  00A2               	movwf	?i1_sprintf+2
 10029  1206  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
 10030  1207  160A  118A  24E6  160A  118A  	fcall	i1_sprintf
 10031                           
 10032                           ;main.c: 392: USARTWriteString(strBuffer);
 10033  120C  30D6               	movlw	(low (_strBuffer| (0+256)))& (0+255)
 10034  120D  00F1               	movwf	i1USARTWriteString@str
 10035  120E  3001               	movlw	1
 10036  120F  00F2               	movwf	i1USARTWriteString@str+1
 10037  1210  160A  158A  24E0  160A  118A  	fcall	i1_USARTWriteString
 10038                           
 10039                           ;main.c: 393: USARTGotoNewLine();
 10040  1215  160A  158A  243C  160A  118A  	fcall	i1_USARTGotoNewLine
 10041  121A  29D4               	goto	i1l4531
 10042  121B                     __end_ofi1_acquire:	
 10043                           
 10044                           	psect	text44
 10045  14E6                     __ptext44:	
 10046 ;; *************** function i1_sprintf *****************
 10047 ;; Defined at:
 10048 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;  sp              1    wreg     PTR unsigned char 
 10051 ;;		 -> strBuffer(25), 
 10052 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 10053 ;;		 -> STR_70(3), STR_68(3), STR_66(3), STR_64(3), 
 10054 ;;		 -> STR_62(3), STR_59(3), STR_53(3), STR_52(3), 
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;  sp              1   12[BANK0 ] PTR unsigned char 
 10057 ;;		 -> strBuffer(25), 
 10058 ;;  sprintf         4    0        struct .
 10059 ;;  sprintf         2   10[BANK0 ] unsigned int 
 10060 ;;  sprintf         2    0        PTR const unsigned char 
 10061 ;;  sprintf         2    0        unsigned int 
 10062 ;;  sprintf         1   13[BANK0 ] char 
 10063 ;;  sprintf         1    9[BANK0 ] char 
 10064 ;;  sprintf         1    8[BANK0 ] unsigned char 
 10065 ;;  sprintf         1    7[BANK0 ] PTR void [1]
 10066 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  2    0[BANK0 ] int 
 10069 ;; Registers used:
 10070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10076 ;;      Params:         0       4       0       0       0
 10077 ;;      Locals:         0       7       0       0       0
 10078 ;;      Temps:          0       3       0       0       0
 10079 ;;      Totals:         0      14       0       0       0
 10080 ;;Total ram usage:       14 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    1
 10083 ;; This function calls:
 10084 ;;		i1___lwdiv
 10085 ;;		i1___lwmod
 10086 ;; This function is called by:
 10087 ;;		i1_acquire
 10088 ;; This function uses a non-reentrant model
 10089 ;;
 10090                           
 10091                           
 10092                           ;psect for function i1_sprintf
 10093  14E6                     i1_sprintf:	
 10094                           
 10095                           ;incstack = 0
 10096 ;; hardware stack exceeded
 10097                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10098                           ;i1sprintf@sp stored from wreg
 10099  14E6  1283               	bcf	3,5	;RP0=0, select bank0
 10100  14E7  1303               	bcf	3,6	;RP1=0, select bank0
 10101  14E8  00AC               	movwf	i1sprintf@sp
 10102                           
 10103                           ;doprnt.c: 494: va_list ap;
 10104                           ;doprnt.c: 499: signed char c;
 10105                           ;doprnt.c: 506: signed char prec;
 10106                           ;doprnt.c: 508: unsigned char flag;
 10107                           ;doprnt.c: 523: union {
 10108                           ;doprnt.c: 524: unsigned long vd;
 10109                           ;doprnt.c: 525: double integ;
 10110                           ;doprnt.c: 526: } tmpval;
 10111                           ;doprnt.c: 528: unsigned int val;
 10112                           ;doprnt.c: 529: unsigned len;
 10113                           ;doprnt.c: 530: const char * cp;
 10114                           ;doprnt.c: 533: *ap = __va_start();
 10115  14E9  3022               	movlw	(low ((?i1_sprintf| 0+2)))& (0+255)
 10116  14EA  00A4               	movwf	??i1_sprintf
 10117  14EB  0824               	movf	??i1_sprintf,w
 10118  14EC  00A7               	movwf	i1sprintf@ap
 10119  14ED                     i1l3267:	
 10120                           ;doprnt.c: 536: while(c = *f++) {
 10121                           
 10122  14ED  0821               	movf	i1sprintf@f+1,w
 10123  14EE  00A5               	movwf	??i1_sprintf+1
 10124  14EF  0820               	movf	i1sprintf@f,w
 10125  14F0  00A4               	movwf	??i1_sprintf
 10126  14F1  0AA0               	incf	i1sprintf@f,f
 10127  14F2  1903               	skipnz
 10128  14F3  0AA1               	incf	i1sprintf@f+1,f
 10129  14F4  0825               	movf	??i1_sprintf+1,w
 10130  14F5  00FF               	movwf	127
 10131  14F6  0824               	movf	??i1_sprintf,w
 10132  14F7  0084               	movwf	4
 10133  14F8  120A  118A  2100  160A  118A  	fcall	stringtab
 10134  14FD  00A6               	movwf	??i1_sprintf+2
 10135  14FE  0826               	movf	??i1_sprintf+2,w
 10136  14FF  00AD               	movwf	i1sprintf@c
 10137  1500  082D               	movf	i1sprintf@c,w
 10138  1501  1903               	btfsc	3,2
 10139  1502  2DC9               	goto	i1l3269
 10140                           
 10141                           ;doprnt.c: 538: if(c != '%')
 10142  1503  3025               	movlw	37
 10143  1504  062D               	xorwf	i1sprintf@c,w
 10144  1505  1903               	btfsc	3,2
 10145  1506  2D13               	goto	i1l3223
 10146                           
 10147                           ;doprnt.c: 540: {
 10148                           ;doprnt.c: 541: ((*sp++ = (c)));
 10149  1507  082D               	movf	i1sprintf@c,w
 10150  1508  00A4               	movwf	??i1_sprintf
 10151  1509  082C               	movf	i1sprintf@sp,w
 10152  150A  0084               	movwf	4
 10153  150B  0824               	movf	??i1_sprintf,w
 10154  150C  1783               	bsf	3,7	;select IRP bank2
 10155  150D  0080               	movwf	0
 10156  150E  3001               	movlw	1
 10157  150F  00A4               	movwf	??i1_sprintf
 10158  1510  0824               	movf	??i1_sprintf,w
 10159  1511  07AC               	addwf	i1sprintf@sp,f
 10160                           
 10161                           ;doprnt.c: 542: continue;
 10162  1512  2CED               	goto	i1l3267
 10163  1513                     i1l3223:	
 10164                           
 10165                           ;doprnt.c: 543: }
 10166                           ;doprnt.c: 548: flag = 0;
 10167  1513  01A8               	clrf	i1sprintf@flag
 10168                           
 10169                           ;doprnt.c: 822: }
 10170                           
 10171                           ;doprnt.c: 813: continue;
 10172                           
 10173                           ;doprnt.c: 802: default:
 10174                           
 10175                           ;doprnt.c: 698: case 'i':
 10176                           ;doprnt.c: 699: break;
 10177                           
 10178                           ;doprnt.c: 697: case 'd':
 10179                           
 10180                           ;doprnt.c: 638: goto alldone;
 10181                           
 10182                           ;doprnt.c: 637: case 0:
 10183                           
 10184                           ;doprnt.c: 635: switch(c = *f++) {
 10185  1514  0821               	movf	i1sprintf@f+1,w
 10186  1515  00A5               	movwf	??i1_sprintf+1
 10187  1516  0820               	movf	i1sprintf@f,w
 10188  1517  00A4               	movwf	??i1_sprintf
 10189  1518  0AA0               	incf	i1sprintf@f,f
 10190  1519  1903               	skipnz
 10191  151A  0AA1               	incf	i1sprintf@f+1,f
 10192  151B  0825               	movf	??i1_sprintf+1,w
 10193  151C  00FF               	movwf	127
 10194  151D  0824               	movf	??i1_sprintf,w
 10195  151E  0084               	movwf	4
 10196  151F  120A  118A  2100  160A  118A  	fcall	stringtab
 10197  1524  00AD               	movwf	i1sprintf@c
 10198                           
 10199                           ; Switch size 1, requested type "space"
 10200                           ; Number of cases is 3, Range of values is 0 to 105
 10201                           ; switch strategies available:
 10202                           ; Name         Instructions Cycles
 10203                           ; simple_byte           10     6 (average)
 10204                           ; jumptable            260     6 (fixed)
 10205                           ;	Chosen strategy is simple_byte
 10206  1525  3A00               	xorlw	0	; case 0
 10207  1526  1903               	skipnz
 10208  1527  2DC9               	goto	i1l3269
 10209  1528  3A64               	xorlw	100	; case 100
 10210  1529  1903               	skipnz
 10211  152A  2D2F               	goto	i1l3229
 10212  152B  3A0D               	xorlw	13	; case 105
 10213  152C  1903               	skipnz
 10214  152D  2D2F               	goto	i1l3229
 10215  152E  2CED               	goto	i1l3267
 10216  152F                     i1l3229:	
 10217                           
 10218                           ;doprnt.c: 1253: {
 10219                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10220  152F  0827               	movf	i1sprintf@ap,w
 10221  1530  0084               	movwf	4
 10222  1531  1383               	bcf	3,7	;select IRP bank0
 10223  1532  0800               	movf	0,w
 10224  1533  00AA               	movwf	i1sprintf@val
 10225  1534  0A84               	incf	4,f
 10226  1535  0800               	movf	0,w
 10227  1536  00AB               	movwf	i1sprintf@val+1
 10228  1537  3002               	movlw	2
 10229  1538  00A4               	movwf	??i1_sprintf
 10230  1539  0824               	movf	??i1_sprintf,w
 10231  153A  07A7               	addwf	i1sprintf@ap,f
 10232                           
 10233                           ;doprnt.c: 1261: if((int)val < 0) {
 10234  153B  1FAB               	btfss	i1sprintf@val+1,7
 10235  153C  2D46               	goto	i1l3239
 10236                           
 10237                           ;doprnt.c: 1262: flag |= 0x03;
 10238  153D  3003               	movlw	3
 10239  153E  00A4               	movwf	??i1_sprintf
 10240  153F  0824               	movf	??i1_sprintf,w
 10241  1540  04A8               	iorwf	i1sprintf@flag,f
 10242                           
 10243                           ;doprnt.c: 1263: val = -val;
 10244  1541  09AA               	comf	i1sprintf@val,f
 10245  1542  09AB               	comf	i1sprintf@val+1,f
 10246  1543  0AAA               	incf	i1sprintf@val,f
 10247  1544  1903               	skipnz
 10248  1545  0AAB               	incf	i1sprintf@val+1,f
 10249  1546                     i1l3239:	
 10250                           
 10251                           ;doprnt.c: 1264: }
 10252                           ;doprnt.c: 1266: }
 10253                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10254  1546  01AD               	clrf	i1sprintf@c
 10255  1547  0AAD               	incf	i1sprintf@c,f
 10256  1548  3005               	movlw	5
 10257  1549  062D               	xorwf	i1sprintf@c,w
 10258  154A  1903               	btfsc	3,2
 10259  154B  2D71               	goto	i1l3251
 10260  154C                     i1l3245:	
 10261                           
 10262                           ;doprnt.c: 1306: if(val < dpowers[c])
 10263  154C  082D               	movf	i1sprintf@c,w
 10264  154D  00A4               	movwf	??i1_sprintf
 10265  154E  0724               	addwf	??i1_sprintf,w
 10266  154F  3E12               	addlw	low (_dpowers| (0+32768))
 10267  1550  0084               	movwf	4
 10268  1551  3081               	movlw	high (_dpowers| (0+32768))
 10269  1552  1803               	skipnc
 10270  1553  3E01               	addlw	1
 10271  1554  00FF               	movwf	127
 10272  1555  120A  118A  2100  160A  118A  	fcall	stringtab
 10273  155A  00A5               	movwf	??i1_sprintf+1
 10274  155B  120A  118A  2100  160A  118A  	fcall	stringtab
 10275  1560  00A6               	movwf	??i1_sprintf+2
 10276  1561  0826               	movf	??i1_sprintf+2,w
 10277  1562  022B               	subwf	i1sprintf@val+1,w
 10278  1563  1D03               	skipz
 10279  1564  2D67               	goto	u369_25
 10280  1565  0825               	movf	??i1_sprintf+1,w
 10281  1566  022A               	subwf	i1sprintf@val,w
 10282  1567                     u369_25:	
 10283  1567  1C03               	btfss	3,0
 10284  1568  2D71               	goto	i1l3251
 10285                           
 10286                           ;doprnt.c: 1307: break;
 10287  1569  3001               	movlw	1
 10288  156A  00A4               	movwf	??i1_sprintf
 10289  156B  0824               	movf	??i1_sprintf,w
 10290  156C  07AD               	addwf	i1sprintf@c,f
 10291  156D  3005               	movlw	5
 10292  156E  062D               	xorwf	i1sprintf@c,w
 10293  156F  1D03               	btfss	3,2
 10294  1570  2D4C               	goto	i1l3245
 10295  1571                     i1l3251:	
 10296                           
 10297                           ;doprnt.c: 1422: {
 10298                           ;doprnt.c: 1438: if(flag & 0x03)
 10299  1571  0828               	movf	i1sprintf@flag,w
 10300  1572  3903               	andlw	3
 10301  1573  1903               	btfsc	3,2
 10302  1574  2D80               	goto	i1l3257
 10303                           
 10304                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10305  1575  302D               	movlw	45
 10306  1576  00A4               	movwf	??i1_sprintf
 10307  1577  082C               	movf	i1sprintf@sp,w
 10308  1578  0084               	movwf	4
 10309  1579  0824               	movf	??i1_sprintf,w
 10310  157A  1783               	bsf	3,7	;select IRP bank2
 10311  157B  0080               	movwf	0
 10312  157C  3001               	movlw	1
 10313  157D  00A4               	movwf	??i1_sprintf
 10314  157E  0824               	movf	??i1_sprintf,w
 10315  157F  07AC               	addwf	i1sprintf@sp,f
 10316  1580                     i1l3257:	
 10317                           
 10318                           ;doprnt.c: 1469: }
 10319                           ;doprnt.c: 1472: prec = c;
 10320  1580  082D               	movf	i1sprintf@c,w
 10321  1581  00A4               	movwf	??i1_sprintf
 10322  1582  0824               	movf	??i1_sprintf,w
 10323  1583  00A9               	movwf	i1sprintf@prec
 10324  1584                     i1l3265:	
 10325                           ;doprnt.c: 1474: while(prec--) {
 10326                           
 10327  1584  30FF               	movlw	255
 10328  1585  00A4               	movwf	??i1_sprintf
 10329  1586  0824               	movf	??i1_sprintf,w
 10330  1587  07A9               	addwf	i1sprintf@prec,f
 10331  1588  0A29               	incf	i1sprintf@prec,w
 10332  1589  1903               	btfsc	3,2
 10333  158A  2CED               	goto	i1l3267
 10334                           
 10335                           ;doprnt.c: 1478: {
 10336                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10337  158B  300A               	movlw	10
 10338  158C  00F8               	movwf	i1___lwmod@divisor
 10339  158D  3000               	movlw	0
 10340  158E  00F9               	movwf	i1___lwmod@divisor+1
 10341  158F  0829               	movf	i1sprintf@prec,w
 10342  1590  00A4               	movwf	??i1_sprintf
 10343  1591  0724               	addwf	??i1_sprintf,w
 10344  1592  3E12               	addlw	low (_dpowers| (0+32768))
 10345  1593  0084               	movwf	4
 10346  1594  3081               	movlw	high (_dpowers| (0+32768))
 10347  1595  1803               	skipnc
 10348  1596  3E01               	addlw	1
 10349  1597  00FF               	movwf	127
 10350  1598  120A  118A  2100  160A  118A  	fcall	stringtab
 10351  159D  00F0               	movwf	i1___lwdiv@divisor
 10352  159E  120A  118A  2100  160A  118A  	fcall	stringtab
 10353  15A3  00F1               	movwf	i1___lwdiv@divisor+1
 10354  15A4  082B               	movf	i1sprintf@val+1,w
 10355  15A5  00F3               	movwf	i1___lwdiv@dividend+1
 10356  15A6  082A               	movf	i1sprintf@val,w
 10357  15A7  00F2               	movwf	i1___lwdiv@dividend
 10358  15A8  160A  158A  2706  160A  118A  	fcall	i1___lwdiv
 10359  15AD  0871               	movf	?i1___lwdiv+1,w
 10360  15AE  00FB               	movwf	i1___lwmod@dividend+1
 10361  15AF  0870               	movf	?i1___lwdiv,w
 10362  15B0  00FA               	movwf	i1___lwmod@dividend
 10363  15B1  160A  158A  2636  160A  118A  	fcall	i1___lwmod
 10364  15B6  0878               	movf	?i1___lwmod,w
 10365  15B7  3E30               	addlw	48
 10366  15B8  1283               	bcf	3,5	;RP0=0, select bank0
 10367  15B9  1303               	bcf	3,6	;RP1=0, select bank0
 10368  15BA  00A5               	movwf	??i1_sprintf+1
 10369  15BB  0825               	movf	??i1_sprintf+1,w
 10370  15BC  00AD               	movwf	i1sprintf@c
 10371                           
 10372                           ;doprnt.c: 1523: }
 10373                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10374  15BD  082D               	movf	i1sprintf@c,w
 10375  15BE  00A4               	movwf	??i1_sprintf
 10376  15BF  082C               	movf	i1sprintf@sp,w
 10377  15C0  0084               	movwf	4
 10378  15C1  0824               	movf	??i1_sprintf,w
 10379  15C2  1783               	bsf	3,7	;select IRP bank2
 10380  15C3  0080               	movwf	0
 10381  15C4  3001               	movlw	1
 10382  15C5  00A4               	movwf	??i1_sprintf
 10383  15C6  0824               	movf	??i1_sprintf,w
 10384  15C7  07AC               	addwf	i1sprintf@sp,f
 10385  15C8  2D84               	goto	i1l3265
 10386  15C9                     i1l3269:	
 10387                           ;doprnt.c: 1525: }
 10388                           ;doprnt.c: 1533: }
 10389                           ;doprnt.c: 1535: alldone:
 10390                           
 10391                           
 10392                           ;doprnt.c: 1538: *sp = 0;
 10393  15C9  082C               	movf	i1sprintf@sp,w
 10394  15CA  0084               	movwf	4
 10395  15CB  1783               	bsf	3,7	;select IRP bank2
 10396  15CC  0180               	clrf	0
 10397  15CD  0008               	return
 10398  15CE                     __end_ofi1_sprintf:	
 10399                           ;doprnt.c: 1540: return 0;
 10400                           ;	Return value of i1_sprintf is never used
 10401                           
 10402                           
 10403                           	psect	text45
 10404  1E36                     __ptext45:	
 10405 ;; *************** function i1___lwmod *****************
 10406 ;; Defined at:
 10407 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;  divisor         2    8[COMMON] unsigned int 
 10410 ;;  dividend        2   10[COMMON] unsigned int 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  __lwmod         1   13[COMMON] unsigned char 
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  2    8[COMMON] unsigned int 
 10415 ;; Registers used:
 10416 ;;		wreg, status,2, status,0
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10422 ;;      Params:         4       0       0       0       0
 10423 ;;      Locals:         1       0       0       0       0
 10424 ;;      Temps:          1       0       0       0       0
 10425 ;;      Totals:         6       0       0       0       0
 10426 ;;Total ram usage:        6 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; This function calls:
 10429 ;;		Nothing
 10430 ;; This function is called by:
 10431 ;;		i1_sprintf
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function i1___lwmod
 10437  1E36                     i1___lwmod:	
 10438                           
 10439                           ;incstack = 0
 10440 ;; hardware stack exceeded
 10441                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
 10442  1E36  0878               	movf	i1___lwmod@divisor,w
 10443  1E37  0479               	iorwf	i1___lwmod@divisor+1,w
 10444  1E38  1903               	btfsc	3,2
 10445  1E39  2E63               	goto	i1l3051
 10446  1E3A  01FD               	clrf	i1___lwmod@counter
 10447  1E3B  0AFD               	incf	i1___lwmod@counter,f
 10448  1E3C                     i1l3041:	
 10449  1E3C  1BF9               	btfsc	i1___lwmod@divisor+1,7
 10450  1E3D  2E4A               	goto	i1l3043
 10451  1E3E  3001               	movlw	1
 10452  1E3F                     u334_25:	
 10453  1E3F  1003               	clrc
 10454  1E40  0DF8               	rlf	i1___lwmod@divisor,f
 10455  1E41  0DF9               	rlf	i1___lwmod@divisor+1,f
 10456  1E42  3EFF               	addlw	-1
 10457  1E43  1D03               	skipz
 10458  1E44  2E3F               	goto	u334_25
 10459  1E45  3001               	movlw	1
 10460  1E46  00FC               	movwf	??i1___lwmod
 10461  1E47  087C               	movf	??i1___lwmod,w
 10462  1E48  07FD               	addwf	i1___lwmod@counter,f
 10463  1E49  2E3C               	goto	i1l3041
 10464  1E4A                     i1l3043:	
 10465  1E4A  0879               	movf	i1___lwmod@divisor+1,w
 10466  1E4B  027B               	subwf	i1___lwmod@dividend+1,w
 10467  1E4C  1D03               	skipz
 10468  1E4D  2E50               	goto	u336_25
 10469  1E4E  0878               	movf	i1___lwmod@divisor,w
 10470  1E4F  027A               	subwf	i1___lwmod@dividend,w
 10471  1E50                     u336_25:	
 10472  1E50  1C03               	skipc
 10473  1E51  2E58               	goto	i1l3047
 10474  1E52  0878               	movf	i1___lwmod@divisor,w
 10475  1E53  02FA               	subwf	i1___lwmod@dividend,f
 10476  1E54  0879               	movf	i1___lwmod@divisor+1,w
 10477  1E55  1C03               	skipc
 10478  1E56  03FB               	decf	i1___lwmod@dividend+1,f
 10479  1E57  02FB               	subwf	i1___lwmod@dividend+1,f
 10480  1E58                     i1l3047:	
 10481  1E58  3001               	movlw	1
 10482  1E59                     u337_25:	
 10483  1E59  1003               	clrc
 10484  1E5A  0CF9               	rrf	i1___lwmod@divisor+1,f
 10485  1E5B  0CF8               	rrf	i1___lwmod@divisor,f
 10486  1E5C  3EFF               	addlw	-1
 10487  1E5D  1D03               	skipz
 10488  1E5E  2E59               	goto	u337_25
 10489  1E5F  3001               	movlw	1
 10490  1E60  02FD               	subwf	i1___lwmod@counter,f
 10491  1E61  1D03               	btfss	3,2
 10492  1E62  2E4A               	goto	i1l3043
 10493  1E63                     i1l3051:	
 10494  1E63  087B               	movf	i1___lwmod@dividend+1,w
 10495  1E64  00F9               	movwf	?i1___lwmod+1
 10496  1E65  087A               	movf	i1___lwmod@dividend,w
 10497  1E66  00F8               	movwf	?i1___lwmod
 10498  1E67  0008               	return
 10499  1E68                     __end_ofi1___lwmod:	
 10500                           
 10501                           	psect	text46
 10502  1F06                     __ptext46:	
 10503 ;; *************** function i1___lwdiv *****************
 10504 ;; Defined at:
 10505 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;  divisor         2    0[COMMON] unsigned int 
 10508 ;;  dividend        2    2[COMMON] unsigned int 
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;  __lwdiv         2    5[COMMON] unsigned int 
 10511 ;;  __lwdiv         1    7[COMMON] unsigned char 
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  2    0[COMMON] unsigned int 
 10514 ;; Registers used:
 10515 ;;		wreg, status,2, status,0
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10521 ;;      Params:         4       0       0       0       0
 10522 ;;      Locals:         3       0       0       0       0
 10523 ;;      Temps:          1       0       0       0       0
 10524 ;;      Totals:         8       0       0       0       0
 10525 ;;Total ram usage:        8 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; This function calls:
 10528 ;;		Nothing
 10529 ;; This function is called by:
 10530 ;;		i1_sprintf
 10531 ;; This function uses a non-reentrant model
 10532 ;;
 10533                           
 10534                           
 10535                           ;psect for function i1___lwdiv
 10536  1F06                     i1___lwdiv:	
 10537                           
 10538                           ;incstack = 0
 10539 ;; hardware stack exceeded
 10540                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10541  1F06  01F5               	clrf	i1___lwdiv@quotient
 10542  1F07  01F6               	clrf	i1___lwdiv@quotient+1
 10543  1F08  0870               	movf	i1___lwdiv@divisor,w
 10544  1F09  0471               	iorwf	i1___lwdiv@divisor+1,w
 10545  1F0A  1903               	btfsc	3,2
 10546  1F0B  2F3D               	goto	i1l3029
 10547  1F0C  01F7               	clrf	i1___lwdiv@counter
 10548  1F0D  0AF7               	incf	i1___lwdiv@counter,f
 10549  1F0E                     i1l3017:	
 10550  1F0E  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10551  1F0F  2F1C               	goto	i1l3019
 10552  1F10  3001               	movlw	1
 10553  1F11                     u327_25:	
 10554  1F11  1003               	clrc
 10555  1F12  0DF0               	rlf	i1___lwdiv@divisor,f
 10556  1F13  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10557  1F14  3EFF               	addlw	-1
 10558  1F15  1D03               	skipz
 10559  1F16  2F11               	goto	u327_25
 10560  1F17  3001               	movlw	1
 10561  1F18  00F4               	movwf	??i1___lwdiv
 10562  1F19  0874               	movf	??i1___lwdiv,w
 10563  1F1A  07F7               	addwf	i1___lwdiv@counter,f
 10564  1F1B  2F0E               	goto	i1l3017
 10565  1F1C                     i1l3019:	
 10566  1F1C  3001               	movlw	1
 10567  1F1D                     u329_25:	
 10568  1F1D  1003               	clrc
 10569  1F1E  0DF5               	rlf	i1___lwdiv@quotient,f
 10570  1F1F  0DF6               	rlf	i1___lwdiv@quotient+1,f
 10571  1F20  3EFF               	addlw	-1
 10572  1F21  1D03               	skipz
 10573  1F22  2F1D               	goto	u329_25
 10574  1F23  0871               	movf	i1___lwdiv@divisor+1,w
 10575  1F24  0273               	subwf	i1___lwdiv@dividend+1,w
 10576  1F25  1D03               	skipz
 10577  1F26  2F29               	goto	u330_25
 10578  1F27  0870               	movf	i1___lwdiv@divisor,w
 10579  1F28  0272               	subwf	i1___lwdiv@dividend,w
 10580  1F29                     u330_25:	
 10581  1F29  1C03               	skipc
 10582  1F2A  2F32               	goto	i1l3025
 10583  1F2B  0870               	movf	i1___lwdiv@divisor,w
 10584  1F2C  02F2               	subwf	i1___lwdiv@dividend,f
 10585  1F2D  0871               	movf	i1___lwdiv@divisor+1,w
 10586  1F2E  1C03               	skipc
 10587  1F2F  03F3               	decf	i1___lwdiv@dividend+1,f
 10588  1F30  02F3               	subwf	i1___lwdiv@dividend+1,f
 10589  1F31  1475               	bsf	i1___lwdiv@quotient,0
 10590  1F32                     i1l3025:	
 10591  1F32  3001               	movlw	1
 10592  1F33                     u331_25:	
 10593  1F33  1003               	clrc
 10594  1F34  0CF1               	rrf	i1___lwdiv@divisor+1,f
 10595  1F35  0CF0               	rrf	i1___lwdiv@divisor,f
 10596  1F36  3EFF               	addlw	-1
 10597  1F37  1D03               	skipz
 10598  1F38  2F33               	goto	u331_25
 10599  1F39  3001               	movlw	1
 10600  1F3A  02F7               	subwf	i1___lwdiv@counter,f
 10601  1F3B  1D03               	btfss	3,2
 10602  1F3C  2F1C               	goto	i1l3019
 10603  1F3D                     i1l3029:	
 10604  1F3D  0876               	movf	i1___lwdiv@quotient+1,w
 10605  1F3E  00F1               	movwf	?i1___lwdiv+1
 10606  1F3F  0875               	movf	i1___lwdiv@quotient,w
 10607  1F40  00F0               	movwf	?i1___lwdiv
 10608  1F41  0008               	return
 10609  1F42                     __end_ofi1___lwdiv:	
 10610                           
 10611                           	psect	text47
 10612  1C5F                     __ptext47:	
 10613 ;; *************** function i1_sampling *****************
 10614 ;; Defined at:
 10615 ;;		line 377 in file "main.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  2    0[COMMON] unsigned int 
 10622 ;; Registers used:
 10623 ;;		wreg
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10629 ;;      Params:         2       0       0       0       0
 10630 ;;      Locals:         0       0       0       0       0
 10631 ;;      Temps:          1       0       0       0       0
 10632 ;;      Totals:         3       0       0       0       0
 10633 ;;Total ram usage:        3 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		i1_acquire
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function i1_sampling
 10644  1C5F                     i1_sampling:	
 10645                           
 10646                           ;main.c: 378: _delay((unsigned long)((100)*(20000000/4000000.0)));
 10647                           
 10648                           ;incstack = 0
 10649 ;; hardware stack exceeded
 10650                           ; Regs used in i1_sampling: [wreg]
 10651  1C5F  30A6               	movlw	166
 10652  1C60  00F2               	movwf	??i1_sampling
 10653  1C61                     u581_27:	
 10654  1C61  0BF2               	decfsz	??i1_sampling,f
 10655  1C62  2C61               	goto	u581_27
 10656  1C63  0000               	nop
 10657                           
 10658                           ;main.c: 379: ADCON0bits.GO_nDONE = 1;
 10659  1C64  1283               	bcf	3,5	;RP0=0, select bank0
 10660  1C65  1303               	bcf	3,6	;RP1=0, select bank0
 10661  1C66  151F               	bsf	31,2	;volatile
 10662  1C67                     i1l340:	
 10663                           ;main.c: 380: while(ADCON0bits.GO_nDONE){}
 10664                           
 10665  1C67  191F               	btfsc	31,2	;volatile
 10666  1C68  2C67               	goto	i1l340
 10667                           
 10668                           ;main.c: 381: return (int)(ADRESH << 8) + (ADRESL);
 10669  1C69  081E               	movf	30,w	;volatile
 10670  1C6A  00F1               	movwf	?i1_sampling+1
 10671  1C6B  1683               	bsf	3,5	;RP0=1, select bank1
 10672  1C6C  1303               	bcf	3,6	;RP1=0, select bank1
 10673  1C6D  081E               	movf	30,w	;volatile
 10674  1C6E  00F0               	movwf	?i1_sampling
 10675  1C6F  0008               	return
 10676  1C70                     __end_ofi1_sampling:	
 10677                           
 10678                           	psect	text48
 10679  1CE0                     __ptext48:	
 10680 ;; *************** function i1_USARTWriteString *****************
 10681 ;; Defined at:
 10682 ;;		line 78 in file "usart_pic16.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;  str             2    1[COMMON] PTR const unsigned char 
 10685 ;;		 -> STR_72(7), STR_71(35), STR_69(8), STR_67(9), 
 10686 ;;		 -> STR_65(9), STR_63(22), STR_61(22), status@output(25), 
 10687 ;;		 -> STR_57(7), STR_56(35), STR_55(7), STR_54(35), 
 10688 ;;		 -> strBuffer(25), STR_51(2), STR_50(28), STR_35(94), 
 10689 ;;		 -> STR_34(19), STR_33(34), STR_32(19), STR_31(19), 
 10690 ;;		 -> STR_30(56), STR_29(19), STR_28(19), STR_27(74), 
 10691 ;;		 -> STR_26(19), STR_25(19), STR_24(43), STR_23(19), 
 10692 ;;		 -> STR_22(19), STR_21(34), STR_20(19), STR_19(28), 
 10693 ;;		 -> STR_18(70), STR_17(19), STR_16(19), STR_15(82), 
 10694 ;;		 -> STR_14(19), STR_13(21), STR_12(83), STR_11(19), 
 10695 ;;		 -> STR_10(18), STR_9(85), STR_8(19), STR_7(15), 
 10696 ;;		 -> STR_6(88), STR_5(19), STR_4(57), STR_3(48), 
 10697 ;;		 -> STR_2(93), STR_1(2), 
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;		None
 10700 ;; Return value:  Size  Location     Type
 10701 ;;                  1    wreg      void 
 10702 ;; Registers used:
 10703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10704 ;; Tracked objects:
 10705 ;;		On entry : 0/0
 10706 ;;		On exit  : 0/0
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10709 ;;      Params:         2       0       0       0       0
 10710 ;;      Locals:         0       0       0       0       0
 10711 ;;      Temps:          0       0       0       0       0
 10712 ;;      Totals:         2       0       0       0       0
 10713 ;;Total ram usage:        2 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; Hardware stack levels required when called:    1
 10716 ;; This function calls:
 10717 ;;		i1_USARTWriteChar
 10718 ;; This function is called by:
 10719 ;;		i1_acquire
 10720 ;; This function uses a non-reentrant model
 10721 ;;
 10722                           
 10723                           
 10724                           ;psect for function i1_USARTWriteString
 10725  1CE0                     i1_USARTWriteString:	
 10726  1CE0                     i1l4485:	
 10727                           ;usart_pic16.c: 80: while(*str!='\0')
 10728                           
 10729                           ;incstack = 0
 10730 ;; hardware stack exceeded
 10731                           ; Regs used in i1_USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10732                           
 10733  1CE0  0872               	movf	i1USARTWriteString@str+1,w
 10734  1CE1  1283               	bcf	3,5	;RP0=0, select bank0
 10735  1CE2  1303               	bcf	3,6	;RP1=0, select bank0
 10736  1CE3  00FF               	movwf	127
 10737  1CE4  0871               	movf	i1USARTWriteString@str,w
 10738  1CE5  0084               	movwf	4
 10739  1CE6  120A  118A  2100  160A  158A  	fcall	stringtab
 10740  1CEB  3A00               	xorlw	0
 10741  1CEC  1903               	btfsc	3,2
 10742  1CED  0008               	return
 10743                           
 10744                           ;usart_pic16.c: 81: {
 10745                           ;usart_pic16.c: 82: USARTWriteChar(*str);
 10746  1CEE  0872               	movf	i1USARTWriteString@str+1,w
 10747  1CEF  1283               	bcf	3,5	;RP0=0, select bank0
 10748  1CF0  1303               	bcf	3,6	;RP1=0, select bank0
 10749  1CF1  00FF               	movwf	127
 10750  1CF2  0871               	movf	i1USARTWriteString@str,w
 10751  1CF3  0084               	movwf	4
 10752  1CF4  120A  118A  2100  160A  158A  	fcall	stringtab
 10753  1CF9  160A  158A  2424  160A  158A  	fcall	i1_USARTWriteChar
 10754                           
 10755                           ;usart_pic16.c: 83: str++;
 10756  1CFE  3001               	movlw	1
 10757  1CFF  07F1               	addwf	i1USARTWriteString@str,f
 10758  1D00  1803               	skipnc
 10759  1D01  0AF2               	incf	i1USARTWriteString@str+1,f
 10760  1D02  2CE0               	goto	i1l4485
 10761  1D03                     __end_ofi1_USARTWriteString:	
 10762                           
 10763                           	psect	text49
 10764  1C3C                     __ptext49:	
 10765 ;; *************** function i1_USARTGotoNewLine *****************
 10766 ;; Defined at:
 10767 ;;		line 202 in file "usart_pic16.c"
 10768 ;; Parameters:    Size  Location     Type
 10769 ;;		None
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;		None
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  1    wreg      void 
 10774 ;; Registers used:
 10775 ;;		wreg, status,2, status,0, pclath, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : 0/0
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10781 ;;      Params:         0       0       0       0       0
 10782 ;;      Locals:         0       0       0       0       0
 10783 ;;      Temps:          0       0       0       0       0
 10784 ;;      Totals:         0       0       0       0       0
 10785 ;;Total ram usage:        0 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:    1
 10788 ;; This function calls:
 10789 ;;		i1_USARTWriteChar
 10790 ;; This function is called by:
 10791 ;;		i1_acquire
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           
 10796                           ;psect for function i1_USARTGotoNewLine
 10797  1C3C                     i1_USARTGotoNewLine:	
 10798                           
 10799                           ;usart_pic16.c: 204: USARTWriteChar('\r');
 10800                           
 10801                           ;incstack = 0
 10802 ;; hardware stack exceeded
 10803                           ; Regs used in i1_USARTGotoNewLine: [wreg+status,2+status,0+pclath+cstack]
 10804  1C3C  300D               	movlw	13
 10805  1C3D  160A  158A  2424  160A  158A  	fcall	i1_USARTWriteChar
 10806                           
 10807                           ;usart_pic16.c: 205: USARTWriteChar('\n');
 10808  1C42  300A               	movlw	10
 10809  1C43  160A  158A  2424   	fcall	i1_USARTWriteChar
 10810  1C46  0008               	return
 10811  1C47                     __end_ofi1_USARTGotoNewLine:	
 10812                           
 10813                           	psect	text50
 10814  1C24                     __ptext50:	
 10815 ;; *************** function i1_USARTWriteChar *****************
 10816 ;; Defined at:
 10817 ;;		line 71 in file "usart_pic16.c"
 10818 ;; Parameters:    Size  Location     Type
 10819 ;;  ch              1    wreg     unsigned char 
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;  ch              1    0[COMMON] unsigned char 
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  1    wreg      void 
 10824 ;; Registers used:
 10825 ;;		wreg
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10831 ;;      Params:         0       0       0       0       0
 10832 ;;      Locals:         1       0       0       0       0
 10833 ;;      Temps:          0       0       0       0       0
 10834 ;;      Totals:         1       0       0       0       0
 10835 ;;Total ram usage:        1 bytes
 10836 ;; Hardware stack levels used:    1
 10837 ;; This function calls:
 10838 ;;		Nothing
 10839 ;; This function is called by:
 10840 ;;		i1_USARTWriteString
 10841 ;;		i1_USARTGotoNewLine
 10842 ;; This function uses a non-reentrant model
 10843 ;;
 10844                           
 10845                           
 10846                           ;psect for function i1_USARTWriteChar
 10847  1C24                     i1_USARTWriteChar:	
 10848                           
 10849                           ;incstack = 0
 10850 ;; hardware stack exceeded
 10851                           ; Regs used in i1_USARTWriteChar: [wreg]
 10852                           ;i1USARTWriteChar@ch stored from wreg
 10853  1C24  00F0               	movwf	i1USARTWriteChar@ch
 10854  1C25                     i1l38:	
 10855                           ;usart_pic16.c: 73: while(!PIR1bits.TXIF);
 10856                           
 10857  1C25  1283               	bcf	3,5	;RP0=0, select bank0
 10858  1C26  1303               	bcf	3,6	;RP1=0, select bank0
 10859  1C27  1E0C               	btfss	12,4	;volatile
 10860  1C28  2C25               	goto	i1l38
 10861                           
 10862                           ;usart_pic16.c: 75: TXREG=ch;
 10863  1C29  0870               	movf	i1USARTWriteChar@ch,w
 10864  1C2A  0099               	movwf	25	;volatile
 10865  1C2B  0008               	return
 10866  1C2C                     __end_ofi1_USARTWriteChar:	
 10867                           
 10868                           	psect	text51
 10869  1CBD                     __ptext51:	
 10870 ;; *************** function i1_USARTDataAvailable *****************
 10871 ;; Defined at:
 10872 ;;		line 151 in file "usart_pic16.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;		None
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;		None
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      unsigned char 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10886 ;;      Params:         0       0       0       0       0
 10887 ;;      Locals:         0       0       0       0       0
 10888 ;;      Temps:          1       0       0       0       0
 10889 ;;      Totals:         1       0       0       0       0
 10890 ;;Total ram usage:        1 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; This function calls:
 10893 ;;		Nothing
 10894 ;; This function is called by:
 10895 ;;		i1_acquire
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899                           
 10900                           ;psect for function i1_USARTDataAvailable
 10901  1CBD                     i1_USARTDataAvailable:	
 10902                           
 10903                           ;usart_pic16.c: 153: if(UQFront==-1) return 0;
 10904                           
 10905                           ;incstack = 0
 10906 ;; hardware stack exceeded
 10907                           ; Regs used in i1_USARTDataAvailable: [wreg+status,2+status,0]
 10908  1CBD  1283               	bcf	3,5	;RP0=0, select bank0
 10909  1CBE  1303               	bcf	3,6	;RP1=0, select bank0
 10910  1CBF  0A5A               	incf	_UQFront,w	;volatile
 10911  1CC0  1D03               	btfss	3,2
 10912  1CC1  2CC4               	goto	i1l3185
 10913  1CC2  3000               	movlw	0
 10914  1CC3  0008               	return
 10915  1CC4                     i1l3185:	
 10916                           
 10917                           ;usart_pic16.c: 154: if(UQFront<UQEnd)
 10918  1CC4  085A               	movf	_UQFront,w	;volatile
 10919  1CC5  3A80               	xorlw	128
 10920  1CC6  00F0               	movwf	??i1_USARTDataAvailable
 10921  1CC7  0859               	movf	_UQEnd,w	;volatile
 10922  1CC8  3A80               	xorlw	128
 10923  1CC9  02F0               	subwf	??i1_USARTDataAvailable,f
 10924  1CCA  1803               	skipnc
 10925  1CCB  2CD1               	goto	i1l3193
 10926                           
 10927                           ;usart_pic16.c: 155: return(UQEnd-UQFront+1);
 10928  1CCC  035A               	decf	_UQFront,w	;volatile
 10929  1CCD  3AFF               	xorlw	255
 10930  1CCE  0759               	addwf	_UQEnd,w	;volatile
 10931  1CCF  3E01               	addlw	1
 10932  1CD0  0008               	return
 10933  1CD1                     i1l3193:	
 10934                           
 10935                           ;usart_pic16.c: 156: else if(UQFront>UQEnd)
 10936  1CD1  0859               	movf	_UQEnd,w	;volatile
 10937  1CD2  3A80               	xorlw	128
 10938  1CD3  00F0               	movwf	??i1_USARTDataAvailable
 10939  1CD4  085A               	movf	_UQFront,w	;volatile
 10940  1CD5  3A80               	xorlw	128
 10941  1CD6  02F0               	subwf	??i1_USARTDataAvailable,f
 10942  1CD7  1803               	skipnc
 10943  1CD8  2CDE               	goto	i1l3201
 10944                           
 10945                           ;usart_pic16.c: 157: return (64-UQFront+UQEnd+1);
 10946  1CD9  035A               	decf	_UQFront,w	;volatile
 10947  1CDA  3AFF               	xorlw	255
 10948  1CDB  0759               	addwf	_UQEnd,w	;volatile
 10949  1CDC  3E41               	addlw	65
 10950  1CDD  0008               	return
 10951  1CDE                     i1l3201:	
 10952                           
 10953                           ;usart_pic16.c: 158: else
 10954                           ;usart_pic16.c: 159: return 1;
 10955  1CDE  3001               	movlw	1
 10956  1CDF  0008               	return
 10957  1CE0                     __end_ofi1_USARTDataAvailable:	
 10958                           
 10959                           	psect	text52
 10960  1182                     __ptext52:	
 10961 ;; *************** function _USARTHandleRxInt *****************
 10962 ;; Defined at:
 10963 ;;		line 95 in file "usart_pic16.c"
 10964 ;; Parameters:    Size  Location     Type
 10965 ;;		None
 10966 ;; Auto vars:     Size  Location     Type
 10967 ;;  data            1    4[COMMON] unsigned char 
 10968 ;; Return value:  Size  Location     Type
 10969 ;;                  1    wreg      void 
 10970 ;; Registers used:
 10971 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10977 ;;      Params:         0       0       0       0       0
 10978 ;;      Locals:         1       0       0       0       0
 10979 ;;      Temps:          4       0       0       0       0
 10980 ;;      Totals:         5       0       0       0       0
 10981 ;;Total ram usage:        5 bytes
 10982 ;; Hardware stack levels used:    1
 10983 ;; This function calls:
 10984 ;;		Nothing
 10985 ;; This function is called by:
 10986 ;;		_ISR
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           
 10991                           ;psect for function _USARTHandleRxInt
 10992  1182                     _USARTHandleRxInt:	
 10993                           
 10994                           ;usart_pic16.c: 97: if(RB1==1)
 10995                           
 10996                           ;incstack = 0
 10997 ;; hardware stack exceeded
 10998                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
 10999  1182  1283               	bcf	3,5	;RP0=0, select bank0
 11000  1183  1303               	bcf	3,6	;RP1=0, select bank0
 11001  1184  1C86               	btfss	6,1	;volatile
 11002  1185  2988               	goto	i1l53
 11003                           
 11004                           ;usart_pic16.c: 98: RB1=0;
 11005  1186  1086               	bcf	6,1	;volatile
 11006  1187  2989               	goto	i1l3307
 11007  1188                     i1l53:	
 11008                           
 11009                           ;usart_pic16.c: 99: else
 11010                           ;usart_pic16.c: 100: RB1=1;
 11011  1188  1486               	bsf	6,1	;volatile
 11012  1189                     i1l3307:	
 11013                           
 11014                           ;usart_pic16.c: 103: char data=RCREG;
 11015  1189  081A               	movf	26,w	;volatile
 11016  118A  00F0               	movwf	??_USARTHandleRxInt
 11017  118B  0870               	movf	??_USARTHandleRxInt,w
 11018  118C  00F4               	movwf	USARTHandleRxInt@data
 11019                           
 11020                           ;usart_pic16.c: 106: if(((UQEnd==64-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 11021  118D  303F               	movlw	63
 11022  118E  0659               	xorwf	_UQEnd,w	;volatile
 11023  118F  1903               	btfsc	3,2
 11024  1190  085A               	movf	_UQFront,w	;volatile
 11025  1191  1903               	btfsc	3,2
 11026  1192  29A8               	goto	i1l3315
 11027  1193  085A               	movf	_UQFront,w	;volatile
 11028  1194  00F0               	movwf	??_USARTHandleRxInt
 11029  1195  01F1               	clrf	??_USARTHandleRxInt+1
 11030  1196  1BF0               	btfsc	??_USARTHandleRxInt,7
 11031  1197  03F1               	decf	??_USARTHandleRxInt+1,f
 11032  1198  3001               	movlw	1
 11033  1199  0759               	addwf	_UQEnd,w	;volatile
 11034  119A  00F2               	movwf	??_USARTHandleRxInt+2
 11035  119B  01F3               	clrf	??_USARTHandleRxInt+3
 11036  119C  1803               	skipnc
 11037  119D  0AF3               	incf	??_USARTHandleRxInt+3,f
 11038  119E  1BD9               	btfsc	_UQEnd,7	;volatile
 11039  119F  03F3               	decf	??_USARTHandleRxInt+3,f
 11040  11A0  0871               	movf	??_USARTHandleRxInt+1,w
 11041  11A1  0673               	xorwf	??_USARTHandleRxInt+3,w
 11042  11A2  1D03               	skipz
 11043  11A3  29A6               	goto	u378_25
 11044  11A4  0870               	movf	??_USARTHandleRxInt,w
 11045  11A5  0672               	xorwf	??_USARTHandleRxInt+2,w
 11046  11A6                     u378_25:	
 11047  11A6  1D03               	skipz
 11048  11A7  29B2               	goto	i1l3319
 11049  11A8                     i1l3315:	
 11050                           
 11051                           ;usart_pic16.c: 107: {
 11052                           ;usart_pic16.c: 109: UQFront++;
 11053  11A8  3001               	movlw	1
 11054  11A9  00F0               	movwf	??_USARTHandleRxInt
 11055  11AA  0870               	movf	??_USARTHandleRxInt,w
 11056  11AB  1283               	bcf	3,5	;RP0=0, select bank0
 11057  11AC  1303               	bcf	3,6	;RP1=0, select bank0
 11058  11AD  07DA               	addwf	_UQFront,f	;volatile
 11059                           
 11060                           ;usart_pic16.c: 110: if(UQFront==64) UQFront=0;
 11061  11AE  3040               	movlw	64
 11062  11AF  065A               	xorwf	_UQFront,w	;volatile
 11063  11B0  1903               	btfsc	3,2
 11064  11B1  01DA               	clrf	_UQFront	;volatile
 11065  11B2                     i1l3319:	
 11066                           
 11067                           ;usart_pic16.c: 111: }
 11068                           ;usart_pic16.c: 113: if(UQEnd==64-1)
 11069  11B2  303F               	movlw	63
 11070  11B3  1283               	bcf	3,5	;RP0=0, select bank0
 11071  11B4  1303               	bcf	3,6	;RP1=0, select bank0
 11072  11B5  0659               	xorwf	_UQEnd,w	;volatile
 11073  11B6  1D03               	btfss	3,2
 11074  11B7  29BA               	goto	i1l3323
 11075                           
 11076                           ;usart_pic16.c: 114: UQEnd=0;
 11077  11B8  01D9               	clrf	_UQEnd	;volatile
 11078  11B9  29BE               	goto	i1l3325
 11079  11BA                     i1l3323:	
 11080                           
 11081                           ;usart_pic16.c: 115: else
 11082                           ;usart_pic16.c: 116: UQEnd++;
 11083  11BA  3001               	movlw	1
 11084  11BB  00F0               	movwf	??_USARTHandleRxInt
 11085  11BC  0870               	movf	??_USARTHandleRxInt,w
 11086  11BD  07D9               	addwf	_UQEnd,f	;volatile
 11087  11BE                     i1l3325:	
 11088                           
 11089                           ;usart_pic16.c: 118: URBuff[UQEnd]=data;
 11090  11BE  0874               	movf	USARTHandleRxInt@data,w
 11091  11BF  00F0               	movwf	??_USARTHandleRxInt
 11092  11C0  0859               	movf	_UQEnd,w
 11093  11C1  3E10               	addlw	(low (_URBuff| (0+256)))& (0+255)
 11094  11C2  0084               	movwf	4
 11095  11C3  0870               	movf	??_USARTHandleRxInt,w
 11096  11C4  1783               	bsf	3,7	;select IRP bank2
 11097  11C5  0080               	movwf	0
 11098                           
 11099                           ;usart_pic16.c: 120: if(UQFront==-1) UQFront=0;
 11100  11C6  0A5A               	incf	_UQFront,w	;volatile
 11101  11C7  1D03               	btfss	3,2
 11102  11C8  0008               	return
 11103  11C9  01DA               	clrf	_UQFront	;volatile
 11104  11CA  0008               	return
 11105  11CB                     __end_of_USARTHandleRxInt:	
 11106  007E                     btemp	set	126	;btemp
 11107  007E                     wtemp0	set	126


Data Sizes:
    Strings     1342
    Constant    10
    Data        5
    BSS         127
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      59
    BANK1            80     46      74
    BANK3            96     70      95
    BANK2            96     26      90

Pointer List with Targets:

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), 
		 -> STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 25
		 -> choice@duty_541(BANK3[10]), choice@duty_534(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 
		 -> content(BANK1[25]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 25
		 -> choice@duty_541(BANK3[10]), choice@duty_534(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 
		 -> content(BANK1[25]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), 
		 -> STR_41(CODE[2]), STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), 
		 -> STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 25
		 -> content(BANK1[25]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_58(CODE[27]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_60(CODE[2]), strBuffer(BANK3[25]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    memcmp@s2	PTR const void  size(2) Largest target is 10
		 -> STR_49(CODE[7]), STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[7]), 
		 -> STR_43(CODE[5]), STR_40(CODE[5]), STR_36(CODE[6]), 

    memcmp@s1	PTR const void  size(1) Largest target is 25
		 -> content(BANK1[25]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 10
		 -> choice@duty_541(BANK3[10]), choice@duty_534(BANK3[10]), choice@time(BANK2[10]), choice@duty(BANK3[10]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_70(CODE[3]), STR_68(CODE[3]), STR_66(CODE[3]), STR_64(CODE[3]), 
		 -> STR_62(CODE[3]), STR_59(CODE[3]), STR_53(CODE[3]), STR_52(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 25
		 -> strBuffer(BANK3[25]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i1_sprintf(BANK0[2]), ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 25
		 -> status@output(BANK3[25]), 

    USARTWriteLine@str	PTR const unsigned char  size(2) Largest target is 94
		 -> STR_72(CODE[7]), STR_71(CODE[35]), status@output(BANK3[25]), STR_57(CODE[7]), 
		 -> STR_56(CODE[35]), STR_55(CODE[7]), STR_54(CODE[35]), strBuffer(BANK3[25]), 
		 -> STR_50(CODE[28]), STR_35(CODE[94]), STR_34(CODE[19]), STR_33(CODE[34]), 
		 -> STR_32(CODE[19]), STR_31(CODE[19]), STR_30(CODE[56]), STR_29(CODE[19]), 
		 -> STR_28(CODE[19]), STR_27(CODE[74]), STR_26(CODE[19]), STR_25(CODE[19]), 
		 -> STR_24(CODE[43]), STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[34]), 
		 -> STR_20(CODE[19]), STR_19(CODE[28]), STR_18(CODE[70]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[82]), STR_14(CODE[19]), STR_13(CODE[21]), 
		 -> STR_12(CODE[83]), STR_11(CODE[19]), STR_10(CODE[18]), STR_9(CODE[85]), 
		 -> STR_8(CODE[19]), STR_7(CODE[15]), STR_6(CODE[88]), STR_5(CODE[19]), 
		 -> STR_4(CODE[57]), STR_3(CODE[48]), STR_2(CODE[93]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 94
		 -> STR_72(CODE[7]), STR_71(CODE[35]), STR_69(CODE[8]), STR_67(CODE[9]), 
		 -> STR_65(CODE[9]), STR_63(CODE[22]), STR_61(CODE[22]), status@output(BANK3[25]), 
		 -> STR_57(CODE[7]), STR_56(CODE[35]), STR_55(CODE[7]), STR_54(CODE[35]), 
		 -> strBuffer(BANK3[25]), STR_51(CODE[2]), STR_50(CODE[28]), STR_35(CODE[94]), 
		 -> STR_34(CODE[19]), STR_33(CODE[34]), STR_32(CODE[19]), STR_31(CODE[19]), 
		 -> STR_30(CODE[56]), STR_29(CODE[19]), STR_28(CODE[19]), STR_27(CODE[74]), 
		 -> STR_26(CODE[19]), STR_25(CODE[19]), STR_24(CODE[43]), STR_23(CODE[19]), 
		 -> STR_22(CODE[19]), STR_21(CODE[34]), STR_20(CODE[19]), STR_19(CODE[28]), 
		 -> STR_18(CODE[70]), STR_17(CODE[19]), STR_16(CODE[19]), STR_15(CODE[82]), 
		 -> STR_14(CODE[19]), STR_13(CODE[21]), STR_12(CODE[83]), STR_11(CODE[19]), 
		 -> STR_10(CODE[18]), STR_9(CODE[85]), STR_8(CODE[19]), STR_7(CODE[15]), 
		 -> STR_6(CODE[88]), STR_5(CODE[19]), STR_4(CODE[57]), STR_3(CODE[48]), 
		 -> STR_2(CODE[93]), STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    i1_USARTWriteString->i1_USARTWriteChar
    i1_USARTGotoNewLine->i1_USARTWriteChar

Critical Paths under _main in BANK0

    _sys->___awmod
    _srand->___wmul
    _rand->___lmul
    ___awmod->_rand
    _strcspn->_strchr
    _step->_sprintf
    _status->___ftdiv
    _status->___ftmul
    _status->_sprintf
    _adReadA0->_sprintf
    ___ftdiv->___awtoft
    _set_pwm->___ftmul
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _acquire->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _help->_USARTWriteLine
    _USARTWriteLine->_USARTWriteString
    _USARTWriteString->_USARTWriteChar
    _USARTGotoNewLine->_USARTWriteChar
    _atoi->___wmul

Critical Paths under _ISR in BANK0

    _ISR->i1_acquire
    i1_acquire->i1_sprintf

Critical Paths under _main in BANK1

    _main->_getData
    _getData->_choice
    _choice->_sys
    _sys->_set_pwm
    _step->_set_pwm
    _stop->_set_pwm
    _status->___fttol
    _adReadA0->_sprintf
    _run->_set_pwm
    _set_pwm->___fttol
    ___fttol->___ftmul
    _acquire->_sprintf

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    _getData->_choice
    _choice->_status

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    _getData->_choice

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  116125
                          _USARTInit
                   _USARTWriteString
                            _getData
                               _help
                               _init
                               _stop
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getData                                              5     5      0  103609
                                             41 BANK1      5     5      0
                 _USARTDataAvailable
                      _USARTReadData
                     _USARTWriteChar
                             _choice
 ---------------------------------------------------------------------------------
 (2) _choice                                              69    69      0  103357
                                             36 BANK1      5     5      0
                                             32 BANK3     38    38      0
                                              0 BANK2     26    26      0
                   _USARTGotoNewLine
                     _USARTWriteLine
                   _USARTWriteString
                            _acquire
                               _atoi
                               _help
                             _memcmp
                                _run
                             _status
                               _step
                               _stop
                            _strcspn
                             _strlen
                                _sys
 ---------------------------------------------------------------------------------
 (3) _sys                                                  8     6      2   16707
                                             28 BANK1      8     6      2
                 _USARTDataAvailable
                   _USARTGotoNewLine
                     _USARTWriteLine
                   _USARTWriteString
                            ___awmod
                             ___wmul
                               _atoi (ARG)
                               _rand
                           _sampling
                            _set_pwm
                            _sprintf
                              _srand
 ---------------------------------------------------------------------------------
 (4) _srand                                                2     0      2     108
                                             27 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     290
                                             34 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     290
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     741
                                             41 BANK0      1     1      0
                                              0 BANK1      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     424
                                             21 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     5      2    1181
                                             27 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               6     2      4     278
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _step                                                 6     0      6   24307
                                             28 BANK1      6     0      6
                     _USARTWriteLine
                            _acquire
                            _set_pwm
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 0     0      0    6755
                            _set_pwm
 ---------------------------------------------------------------------------------
 (3) _status                                              32    32      0   20785
                                              0 BANK3     32    32      0
                   _USARTGotoNewLine
                     _USARTWriteLine
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           _adReadA0
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               5     3      2     219
                                             21 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _strcat                                               5     3      2     363
                                             21 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _adReadA0                                             2     2      0    3519
                                             10 BANK1      2     2      0
                   _USARTWriteString
                           _sampling
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2978
                                             35 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _run                                                  2     0      2   15028
                                             28 BANK1      2     0      2
                     _USARTWriteLine
                            _acquire
                               _atoi (ARG)
                            _set_pwm
 ---------------------------------------------------------------------------------
 (2) _set_pwm                                              4     2      2    6755
                                             24 BANK1      4     2      2
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     525
                                             10 BANK1     14    10      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3200
                                             35 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2691
                                             29 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2404
                                             21 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _acquire                                              2     2      0    3550
                                             10 BANK1      2     2      0
                 _USARTDataAvailable
                   _USARTGotoNewLine
                   _USARTWriteString
                           _sampling
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             24    18      6    2357
                                             35 BANK0      6     0      6
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     386
                                             29 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     395
                                             21 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _sampling                                             3     1      2       0
                                             21 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _USARTDataAvailable                                   1     1      0       0
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _memcmp                                               7     3      4    1470
                                             21 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _help                                                 0     0      0    4578
                   _USARTGotoNewLine
                     _USARTWriteLine
 ---------------------------------------------------------------------------------
 (2) _USARTWriteLine                                       2     0      2    4547
                                             24 BANK0      2     0      2
                     _USARTWriteChar
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2    1097
                                             22 BANK0      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (2) _USARTGotoNewLine                                     0     0      0      31
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2    1009
                                             27 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     444
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _USARTReadData                                        2     2      0      23
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      86
                                             21 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  5     5      0    1213
                                             16 BANK0      5     5      0
                   _USARTHandleRxInt
                          i1_acquire
 ---------------------------------------------------------------------------------
 (9) i1_acquire                                            2     2      0    1190
                                             14 BANK0      2     2      0
               i1_USARTDataAvailable
                 i1_USARTGotoNewLine
                 i1_USARTWriteString
                         i1_sampling
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (10) i1_sprintf                                          22    18      4     928
                                              0 BANK0     14    10      4
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (11) i1___lwmod                                           6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (10) i1_sampling                                          3     1      2       0
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (10) i1_USARTWriteString                                  2     0      2     166
                                              1 COMMON     2     0      2
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (10) i1_USARTGotoNewLine                                  0     0      0      31
                   i1_USARTWriteChar
 ---------------------------------------------------------------------------------
 (11) i1_USARTWriteChar                                    1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_USARTDataAvailable                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTInit
   _USARTWriteString
     _USARTWriteChar
   _getData
     _USARTDataAvailable
     _USARTReadData
     _USARTWriteChar
     _choice
       _USARTGotoNewLine
         _USARTWriteChar
       _USARTWriteLine
         _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
       _USARTWriteString
         _USARTWriteChar
       _acquire
         _USARTDataAvailable
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
         _sampling
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _atoi
         ___wmul
         _isdigit
       _help
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
       _memcmp
       _run
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _acquire
           _USARTDataAvailable
           _USARTGotoNewLine
             _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _atoi (ARG)
           ___wmul
           _isdigit
         _set_pwm (ARG)
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _status
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _adReadA0
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _strcat
         _strcpy
       _step
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _acquire
           _USARTDataAvailable
           _USARTGotoNewLine
             _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
           _sampling
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _set_pwm
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _stop
           _set_pwm
             ___awtoft
               ___ftpack
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
       _stop
         _set_pwm
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _strcspn
         _strchr
       _strlen
       _sys
         _USARTDataAvailable
         _USARTGotoNewLine
           _USARTWriteChar
         _USARTWriteLine
           _USARTWriteChar
           _USARTWriteString
             _USARTWriteChar
         _USARTWriteString
           _USARTWriteChar
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
         _atoi (ARG)
           ___wmul
           _isdigit
         _rand (ARG)
           ___lmul
         _sampling (ARG)
         _set_pwm (ARG)
           ___awtoft
             ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _sprintf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _srand (ARG)
           ___wmul (ARG)
   _help
     _USARTGotoNewLine
       _USARTWriteChar
     _USARTWriteLine
       _USARTWriteChar
       _USARTWriteString
         _USARTWriteChar
   _init
   _stop
     _set_pwm
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 _ISR (ROOT)
   _USARTHandleRxInt
   i1_acquire
     i1_USARTDataAvailable
     i1_USARTGotoNewLine
       i1_USARTWriteChar
     i1_USARTWriteString
       i1_USARTWriteChar
     i1_sampling
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     46      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     1A      5A      11       93.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2E      4A       7       92.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     14C      12        0.0%
ABS                  0      0     14C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jun 02 03:06:03 2018

                            pc 0002                    __CFG_CP$OFF 0000                             l31 1170  
                           l38 1C2F                             fsr 0004            ___wmul@multiplicand 0037  
           USARTInit@baud_rate 0035                            l321 14BA                            l340 1C7A  
                          l660 131B                            l900 1000                            l477 1D32  
                          l661 1323                            l653 1306                            l744 1421  
         ??_USARTDataAvailable 0035                            l854 1027                            _GIE 005F  
                          _RB1 0031                            _PR2 0092                   __CFG_CPD$OFF 0000  
                          _ISR 10AD                 ?_USARTReadData 0070                            fsr0 0004  
                          _pwm 00CE                            _run 1F80                            _sys 08FD  
                          indf 0000                   ___awmod@sign 00A5                   __CFG_FOSC$HS 0000  
                 __CFG_LVP$OFF 0000                           ?_ISR 0070                   ___ftdiv@cntr 00A4  
                 ___ftdiv@sign 00A9                           l3061 1D0A                           l3071 1D24  
                         l3067 1D1C                           l4019 1D2A                           l4203 105C  
                         l4115 169B                           l4107 1678                           l4051 1227  
                         l4213 1E6E                           l4039 080E                           l4207 1065  
                         l4303 1F9C                           l4215 1E78                           l4063 1234  
                         l4055 122E                           l3281 1148                           l4233 1346  
                         l4225 1D72                           l4065 1246                           l4073 125F  
                         l4401 0D13                           l3275 1142                           l4251 1365  
                         l4235 133F                           l4219 1E96                           l4227 1D7F  
                         l4323 0971                           l3277 1144                           l3285 114D  
                         l4261 13A8                           l4253 1369                           l4245 135F  
                         l4237 134B                           l4093 1615                           l4077 1267  
                         l4069 1254                           l4317 0917                           l4405 0D33  
                         l3279 1146                           l4255 1397                           l4087 15F2  
                         l4351 0A1D                           l4431 0E65                           l4415 0D75  
                         l4407 0C3E                           l3641 12D8                           l3721 073B  
                         l3713 0720                           l4433 0DDE                           l4409 0D3C  
                         l4417 0D96                           l4513 07DE                           l3811 1EA3  
                         l4347 0A10                           l4451 0F55                           l4435 0E6E  
                         l4427 0E45                           l3813 1EB1                           l3821 1ECA  
                         l3645 12DF                           l3725 075D                           l3709 06FE  
                         l3741 13C7                           l4365 0837                           l4269 144C  
                         l4461 0F92                           l4453 0ECE                           l4437 0E86  
                         l3831 1D8F                           l3911 1791                           l3655 130B  
                         l3647 12EB                           l4359 081F                           l4455 0F5E  
                         l4447 0F35                           l4721 1161                           l3817 1EBF  
                         l3905 1764                           l3657 1315                           l3649 12F0  
                         l3681 1DC0                           l3761 1409                           l4473 0FE6  
                         l4465 0FAE                           l4457 0F76                           l4393 0CA5  
                         l4723 1166                           l3691 067E                           l4299 1F92  
                         l4475 0FF1                           l4725 116B                           l3925 17A4  
                         l3917 17A0                           l3773 1432                           l4469 0FCA  
                         l4397 0CC5                           l4637 1E30                           l4719 115C  
                         l3855 1D6A                           l3847 1D5D                           l3839 1D50  
                         l3927 16DD                           l3767 1416                           l3759 13F9  
                         l3943 1FC9                           l3929 17FB                           l3697 06A1  
                         l3769 1424                           l3795 1F70                           l3787 1F4C  
                         l3883 1717                           l3971 1275                           l3947 1FDF  
                         l3789 1F5A                           l3799 1F7B                           l3889 1747  
                         l3993 1DE0                           l3899 175E                           l3995 1DEB  
                         l3987 1CA2                           l3999 1DF3                           STR_1 0658  
                         ?_run 00BC                           STR_2 011D                           STR_3 03CD  
                         STR_4 035C                           STR_5 0527                           STR_6 017A  
                         STR_7 05F7                           STR_8 053A                           STR_9 01D2  
                         ?_sys 00BC                           u4215 130E                           u5015 1237  
                         u5105 1653                           u4315 06BB                           u5115 1679  
                         u5035 124C                           u4405 075E                           u4341 0711  
                         u4325 06D9                           u5125 168C                           u5045 1255  
                         u4342 071C                           u4255 132A                           u4175 12E4  
                         u4415 0767                           u5135 169C                           u4505 1418  
                         u5305 1F8B                           u4195 12FF                           u4355 0721  
                         _PEIE 005E                           u4365 072A                           u4445 13CE  
                         u5325 096B                           u5405 0CBE                           u4615 1EA6  
                         u4391 074E                           u5095 1635                           u5415 0CFA  
                         u4392 0759                           u4545 1F4F                           u5505 0F1C  
                         u5425 0D2C                           u4635 1EB7                           u4475 13FA  
                         u5355 081D                           u5515 0F4E                           u5435 0C57  
                         _RCIE 0465                           _RCIF 0065                           i1l53 1188  
                         u4565 1F5B                           u4645 1EC0                           u5365 0835  
                         u5285 1446                           u5525 0EE7                           u5605 07CE  
                         i1l38 1C25                           u4575 1F67                           u4735 1787  
                         u4815 1FE1                           u4585 1F71                           u4825 1FE9  
                         u5465 0E2C                           u4915 112C                           u5475 0E5E  
                         u5395 0C8C                           u5485 0DF7                           u4935 1D33  
                         u5807 1C74                           u4945 1D3A                           _TMR0 0001  
                 __CFG_WRT$OFF 0000         __end_of_USARTWriteChar 1C34         __end_of_USARTWriteLine 1C9B  
                         _help 0A32                           _atoi 133C                           _main 1E06  
                 ___ftpack@arg 0035                           _init 1ECF                           _rand 10F3  
                 ___ftpack@exp 0038                           _step 143B                           btemp 007E  
                         _stop 1C52                     i1_sampling 1C5F              USARTReadData@data 0036  
                __CFG_BOREN$ON 0000                           start 0012                   ___ftmul@cntr 00A8  
                 ___ftmul@sign 00A9                          ??_ISR 0030                   ___fttol@exp1 00B7  
                 ___fttol@lval 00B3                          ??_run 0049                          ??_sys 00BE  
            ?_USARTHandleRxInt 0070                          ?_help 0070                          ?_atoi 003B  
                        ?_main 0070                          ?_init 0070                          ?_rand 0042  
           ??_USARTHandleRxInt 0070                          STR_10 05E5                          STR_11 054D  
                        STR_20 0586                          STR_12 0227                          STR_13 04B3  
                        STR_21 0428                          STR_14 0560                          STR_22 04DB  
                        STR_30 0395                          STR_23 0599                          STR_31 0501  
                        STR_15 027A                          STR_40 0647                          STR_32 05D2  
                        STR_16 04C8                          STR_24 03FD                          STR_41 064A  
                        STR_33 0428                          STR_17 0573                          STR_25 04EE  
                __CFG_WDTE$OFF 0000                          STR_34 04DB                          STR_42 060E  
                        STR_26 05AC                          STR_50 044A                          STR_18 0316  
                        STR_51 0658                          STR_43 064C                          STR_19 0466  
                        STR_27 02CC                          STR_35 011C                          STR_44 064A  
                        STR_60 0654                          STR_52 0651                          STR_36 0641  
                        STR_28 0514                __end_of___awmod 126C                          STR_37 064A  
                        STR_45 060E                          STR_53 0651                          STR_29 05BF  
                        STR_61 049D                          STR_54 0405                          STR_70 0651  
                        STR_62 0651                          STR_38 0656                          STR_46 063A  
                        STR_63 049D                          STR_39 060E                          STR_55 063A  
                        STR_71 0405                          STR_47 0622                          STR_72 063A  
                        STR_56 0405                          STR_64 0651                          STR_48 0606  
                        STR_57 063A                          STR_49 0633                          STR_65 0610  
                        STR_66 0651                          STR_58 0482                          STR_59 0651  
                        STR_67 0619                          STR_68 0651                          STR_69 062B  
    __size_ofi1_USARTWriteChar 0008                __end_of___ftdiv 16D6                          ?_step 00BC  
             USARTWriteChar@ch 0035                          ?_stop 0070                __end_of___ftmul 07A0  
              __end_of___fttol 143B                          _T2CON 0012                __end_of___lwdiv 1F80  
                        i1l340 1C67                          i1l252 10BB                          i1l253 10E6  
              __end_of___lwmod 1ECF                          _RCREG 001A                          _SPBRG 0099  
                        _PORTA 0005                          _PORTB 0006                          _PORTC 0007  
                        _PORTD 0008                          _TRISA 0085                          _TRISB 0086  
                        _TRISC 0087                          _TRISD 0088                          _TXREG 0019  
                        _UQEnd 0059                __end_of_acquire 12CE                __end_of_getData 07F6  
          ___lmul@multiplicand 0039                  __CFG_PWRTE$ON 0000             i1___lwmod@dividend 007A  
                ___awtoft@sign 0042                __end_of_dpowers 011C                          _count 0051  
              __end_of_isdigit 0810                          _randx 0054                  ___ftpack@sign 0039  
                        atoi@a 0040                          _srand 07F6                          atoi@s 0042  
                        pclath 000A                __end_of_set_pwm 00FD             __size_of_USARTInit 0048  
              ?_USARTWriteChar 0070                ?_USARTWriteLine 0038                          status 0003  
                        wtemp0 007E                __end_of_sprintf 1800                __end_of_strcspn 1E9B  
             i1acquire@valueAD 002E             __size_ofi1___lwdiv 003C             __size_ofi1___lwmod 0032  
           __size_ofi1_acquire 0050                __initialization 0015                   __end_of_help 0BDE  
                 __end_of_atoi 13AD                   __end_of_main 1E36                   __end_of_init 1F06  
                 __end_of_rand 113A                   __end_of_step 14E6                   __end_of_stop 1C5F  
                   i1sprintf@c 002D                     i1sprintf@f 0020                ??_USARTReadData 0035  
                       ??_help 003A                         ??_atoi 003D                         ??_main 004A  
                ___fttol@sign1 00B2                         ??_init 0035                         ??_rand 0044  
                       ??_step 0049                         ??_stop 0049             __size_ofi1_sprintf 00E8  
           i1_USARTWriteString 1CE0               __end_of_adReadA0 10AD                         _ADCON0 001F  
                       _ADCON1 009F                         _ADRESH 001E                         _ADRESL 009E  
                       _CCPR1L 0015                         _CCPR2L 001B                         ?_srand 003B  
             __end_of___awtoft 1DD9               __end_of___ftpack 133C            ?i1_USARTWriteString 0071  
                       i1l3201 1CDE                         i1l3025 1F32                         i1l3017 1F0E  
                       i1l3041 1E3C                         i1l3019 1F1C                         i1l3043 1E4A  
                       i1l3051 1E63                         i1l3029 1F3D                         i1l3047 1E58  
                       i1l3223 1513                         i1l3323 11BA                         i1l3315 11A8  
                       i1l3307 1189                         i1l3251 1571                         i1l3325 11BE  
                       i1l3245 154C                         i1l3229 152F                         i1l3319 11B2  
                       i1l3239 1546                         i1l3193 1CD1                         i1l3185 1CC4  
                       i1l3265 1584                         i1l3257 1580                         i1l3267 14ED  
                       i1l3269 15C9                         i1l4531 11D4                         i1l4617 10DE  
                       i1l4485 1CE0                         _INTCON 000B                         u330_25 1F29  
                       u331_25 1F33                         u334_25 1E3F                         u327_25 1F11  
                       u336_25 1E50                         u329_25 1F1D                         u337_25 1E59  
                       u369_25 1567                         u378_25 11A6                         u581_27 1C61  
                       u577_25 10CF                    ?i1_sampling 0070                  i1sprintf@flag 0028  
                       _URBuff 0110                  i1sprintf@prec 0029              USARTWriteLine@str 0038  
            ?_USARTGotoNewLine 0070                         ___lmul 1FBF                         ___wmul 1D26  
                    ??___awmod 0049                      ??___ftdiv 00A0                      ??___ftmul 00A0  
                       _choice 0BDE                      ??___fttol 00AE                      ??___lwdiv 0039  
         ??i1_USARTWriteString 0073                      ??___lwmod 0041                         _buffer 00D0  
           ??_USARTGotoNewLine 0036       __end_of_USARTWriteString 1DB4                         _memcmp 1024  
                    ??_acquire 0049                ___awmod@divisor 00A0                      ??_getData 00C9  
              ___awmod@counter 00A4                 choice@duty_541 01C4                 choice@duty_534 01BA  
            __end_of_USARTInit 1182                         _status 0810                         _strcat 1DD9  
                       _strchr 1000                         _strcpy 1C9B                         _strlen 1D6C  
        ___ftmul@f3_as_product 00A5               __end_of_sampling 1C85              __end_ofi1___lwdiv 1F42  
            __end_ofi1___lwmod 1E68                      ??_isdigit 0035                         saved_w 007E  
            __end_ofi1_acquire 121B                      ??_set_pwm 00BA                         srand@x 003B  
__size_ofi1_USARTDataAvailable 0023                      ??_sprintf 00A0                      ??_strcspn 003D  
      __end_of__initialization 0053              __end_ofi1_sprintf 15CE                     ___ftdiv@f1 0046  
                   ___ftdiv@f2 0043                     ___ftdiv@f3 00A5                     ___awtoft@c 003D  
                 status@output 0190                     ___ftmul@f1 0043                     ___ftmul@f2 0046  
  __size_ofi1_USARTGotoNewLine 000B                     ___fttol@f1 00AA                 __pcstackCOMMON 0070  
           i1USARTWriteChar@ch 0070                   __pidataBANK0 1C1F                  __end_of_srand 07FF  
             i1_USARTWriteChar 1C24            __size_ofi1_sampling 0011                    i1sprintf@ap 0027  
                  i1sprintf@sp 002C                        ??_srand 003D                     __pbssBANK0 004A  
                   __pbssBANK1 00CE                     __pbssBANK2 0110                     __pbssBANK3 01D6  
                   __pmaintext 1E06                        ?___lmul 0035                        ?___wmul 0035  
                    ?_adReadA0 0070                        ?_choice 0070                     __pintentry 0004  
                      _CCP1CON 0017                        _CCP2CON 001D                        ?_memcmp 0035  
               ___lmul@product 003E                      ?___awtoft 003D                      ?___ftpack 0035  
                      ?_status 0070                        ?_strcat 0035                        ?_strchr 0035  
                      ?_strcpy 0035                        ?_strlen 0035    __size_of_USARTDataAvailable 0023  
             ??_USARTWriteChar 0035               ??_USARTWriteLine 003A             USARTWriteInt@F1155 004A  
    __size_of_USARTHandleRxInt 0049                     __stringtab 0100                        _UQFront 005A  
                    ?_sampling 0035                     ??_adReadA0 0049          i1USARTWriteString@str 0071  
              __size_of___lmul 0041                        ___awmod 121B                        ___ftdiv 15CE  
              __size_of___wmul 0023                        ___ftmul 065A                        ___fttol 13AD  
                      ___lwdiv 1F42                        ___lwmod 1E9B                __size_of_choice 0422  
              __size_of_memcmp 0044                        _acquire 126C                     ??___awtoft 0040  
                   ??___ftpack 003A                        _getData 07A0                        __ptext1 1ECF  
                      __ptext2 07A0                        __ptext3 0BDE                        __ptext4 08FD  
                      __ptext5 07F6                        __ptext6 10F3                        __ptext7 1FBF  
                      __ptext8 121B                        __ptext9 1D6C                __size_of_status 00ED  
              __size_of_strcat 002D                        _content 00D1                __size_of_strchr 0024  
              __size_of_strcpy 0022                __size_of_strlen 0023                   __size_of_ISR 0046  
                      _dpowers 0112              i1___lwdiv@divisor 0070                        _isdigit 0800  
            i1___lwdiv@counter 0077                   __size_of_run 003F                   __size_of_sys 0135  
             ___awmod@dividend 00A2                        choice@i 0168                        _set_pwm 0057  
                      _sprintf 16D6                        clrloop0 1C35                        _strcspn 1E68  
         end_of_initialization 0053                        memcmp@n 0037                     choice@duty 01B0  
                   choice@time 0150                   ??i1_sampling 0072                     ??_sampling 0037  
                      run@duty 00BC                      _RCSTAbits 0018                   __pstringtext 0100  
                      status@i 01AE                        sys@duty 00BC                        strlen@s 0035  
            ?_USARTWriteString 0036          __end_of_USARTReadData 1D26             ??_USARTWriteString 0038  
                   _stepEnable 0053             __end_ofi1_sampling 1C70                      _USARTInit 113A  
    __size_of_USARTGotoNewLine 000B                      i1___lwdiv 1F06                      i1___lwmod 1E36  
                    i1_acquire 11CB                    _CCP1CONbits 0017                    ___ftdiv@exp 00A8  
     __end_ofi1_USARTWriteChar 1C2C                    _CCP2CONbits 001D                      _TXSTAbits 0098  
                  ___ftmul@exp 00A4   __end_ofi1_USARTDataAvailable 1CE0                      i1_sprintf 14E6  
               __end_of___lmul 2000    __size_ofi1_USARTWriteString 0023                 __end_of___wmul 1D49  
               __end_of_choice 1000              i1___lwmod@divisor 0078                 __end_of_memcmp 1068  
            i1___lwmod@counter 007D                 __end_of_status 08FD                 __end_of_strcat 1E06  
               __end_of_strchr 1024                 __end_of_strcpy 1CBD                 __end_of_strlen 1D8F  
          start_initialization 0015                     ?_USARTInit 0035                    __end_of_ISR 10F3  
                  __end_of_run 1FBF                    __end_of_sys 0A32                     ?i1___lwdiv 0070  
                   ?i1___lwmod 0078               _USARTHandleRxInt 1182                     ?i1_acquire 0070  
   __end_ofi1_USARTGotoNewLine 1C47                   i1sprintf@val 002A                     ?i1_sprintf 0020  
                     ??___lmul 003D                       ??___wmul 0039                       ??_choice 00C4  
                  __pdataBANK0 0054                       ??_memcmp 0039                  choice@secondP 0162  
            __size_of_adReadA0 0045                       ??_status 0049                       ??_strcat 0037  
                     ??_strchr 0039                       ??_strcpy 0037                       ??_strlen 0037  
               set_pwm@percent 00B8              __size_of___awtoft 0025              __size_of___ftpack 006E  
                 _max_counters 004F                      ___latbits 0002                  __pcstackBANK0 0020  
                __pcstackBANK1 00A0                  __pcstackBANK2 0150                  __pcstackBANK3 0190  
                  sys@max_duty 00C2                    _acquirement 0058                    sprintf@flag 00A4  
                  sprintf@prec 00A5                      __pnvBANK0 0059               ___lwdiv@dividend 0037  
              adReadA0@valueAD 00AA              __size_of_sampling 0015                       ?___awmod 00A0  
                     ?___ftdiv 0043                       ?___ftmul 0043                       ?___fttol 00AA  
                     ?___lwdiv 0035                       ?___lwmod 003D     __end_of_USARTDataAvailable 1D6C  
                     ?_acquire 0070                       ?_getData 0070                       ?_isdigit 0070  
                  ??_USARTInit 0037               _USARTGotoNewLine 1C47                       ?_set_pwm 00B8  
             ___lwdiv@quotient 003B                    ??i1___lwdiv 0074                    ??i1___lwmod 007C  
         i1_USARTDataAvailable 1CBD                       ?_sprintf 0043                       ?_strcspn 003B  
               __size_of_srand 0009                    ??i1_acquire 007E              interrupt_function 0004  
               ___wmul@product 0039                      clear_ram0 1C34                       _PIR1bits 000C  
                  ??i1_sprintf 0024                      _strBuffer 01D6                     _ADCON0bits 001F  
                  __stringbase 0112              ___wmul@multiplier 0035          ?i1_USARTDataAvailable 0070  
            ___lmul@multiplier 0035      __size_of_USARTWriteString 0025              ?i1_USARTWriteChar 0070  
      __size_of_USARTWriteChar 0008        __size_of_USARTWriteLine 0016             ??i1_USARTWriteChar 0070  
                 choice@firstP 015A                   choice@duty_i 0160                       _adReadA0 1068  
                 choice@time_1 01D4                   choice@thirdP 01CE       __end_of_USARTHandleRxInt 11CB  
             __size_of___awmod 0051               __size_of___ftdiv 0108               __size_of___ftmul 0146  
             __size_of___fttol 008E                     status@duty 01AC               __size_of___lwdiv 003E  
             __size_of___lwmod 0034                       ___awtoft 1DB4                       ___ftpack 12CE  
           __end_of__stringtab 0112              choice@secondP_544 01D2              choice@secondP_537 01D0  
             __size_of_acquire 0062                    _isdigit$823 0035               __size_of_getData 0056  
                   sys@valueAD 00C0                     sprintf@val 00A6                 acquire@valueAD 00AA  
                   strcat@from 0035               __size_of_isdigit 0010                ___lwdiv@divisor 0035  
              ___lwdiv@counter 003A                       __ptext10 1E68                       __ptext11 1000  
                     __ptext20 0057                       __ptext12 143B                       __ptext21 13AD  
                     __ptext13 1C52                       __ptext30 1D49                       __ptext22 065A  
                     __ptext14 0810                       __ptext31 1024                       __ptext23 1DB4  
                     __ptext15 1C9B                       __ptext40 1D03                       __ptext32 0A32  
                     __ptext24 12CE                       __ptext16 1DD9                       __ptext41 113A  
                     __ptext33 1C85                       __ptext25 126C                       __ptext17 1068  
                     __ptext50 1C24                       __ptext42 10AD                       __ptext34 1D8F  
                     __ptext26 16D6                       __ptext18 15CE                       __ptext51 1CBD  
                     __ptext43 11CB                       __ptext35 1C47                       __ptext27 1E9B  
                     __ptext19 1F80                       __ptext52 1182                       __ptext44 14E6  
                     __ptext36 1C2C                       __ptext28 1F42                       __ptext45 1E36  
                     __ptext37 133C                       __ptext29 1C70                       __ptext46 1F06  
                     __ptext38 0800                       __ptext47 1C5F                       __ptext39 1D26  
                     __ptext48 1CE0                       __ptext49 1C3C               __size_of_set_pwm 00A6  
             __size_of_sprintf 012A               __size_of_strcspn 0033             i1___lwdiv@dividend 0072  
                   strcpy@from 0035               choice@firstP_542 015E               choice@firstP_535 015C  
                __size_of_help 01AC                  __size_of_atoi 0071                  __size_of_main 0030  
                __size_of_init 0037                  __size_of_rand 0047                  __size_of_step 00AB  
                __size_of_stop 000D                       getData@i 00CC                       getData@n 00CA  
       __size_of_USARTReadData 0023                       _sampling 1C70     __end_ofi1_USARTWriteString 1D03  
                     atoi@sign 003F             i1_USARTGotoNewLine 1C3C             i1___lwdiv@quotient 0075  
                  getData@data 00CB                    choice@i_546 0166                    choice@i_539 0164  
                   _INTCONbits 000B                       memcmp@s1 003B                       memcmp@s2 0035  
       ??i1_USARTDataAvailable 0070            ?i1_USARTGotoNewLine 0070                       isdigit@c 0036  
                    status@aux 01A9                       intlevel1 0000                      sprintf@ap 00A3  
                    sprintf@sp 00A8                      strchr@chr 0037               ___lwmod@dividend 003F  
                    strchr@ptr 0035                      strcspn@s1 0041                      strcspn@s2 003B  
                    stringcode 010A           ??i1_USARTGotoNewLine 0071       __end_of_USARTGotoNewLine 1C52  
          USARTWriteString@str 0036                       step@duty 00BC                       step@time 00BE  
                   _OPTION_REG 0081                       sprintf@c 00A9                       sprintf@f 0043  
                     strcat@cp 0039                       strcat@to 0038                ___lwmod@divisor 003D  
                _USARTReadData 1D03                       strcpy@cp 0039                       strlen@cp 0039  
                     strcpy@to 0038                ___lwmod@counter 0042                       strcspn@i 003F  
         USARTHandleRxInt@data 0074                       stringtab 0100             _USARTDataAvailable 1D49  
             _USARTWriteString 1D8F            ?_USARTDataAvailable 0070                 _USARTWriteChar 1C2C  
               _USARTWriteLine 1C85  
